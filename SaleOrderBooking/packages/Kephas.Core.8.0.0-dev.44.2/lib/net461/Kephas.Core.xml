<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kephas.Core</name>
    </assembly>
    <members>
        <member name="T:Kephas.Activation.ActivationException">
            <summary>
            Defines an exception thrown when activation fails.
            </summary>
        </member>
        <member name="M:Kephas.Activation.ActivationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Activation.ActivationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Activation.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Activation.ActivationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Activation.ActivatorBase">
            <summary>
            Base abstract class activators.
            </summary>
        </member>
        <member name="F:Kephas.Activation.ActivatorBase.implementationTypeMap">
            <summary>
            The implementation type map.
            </summary>
        </member>
        <member name="M:Kephas.Activation.ActivatorBase.CreateInstance(Kephas.Reflection.ITypeInfo,System.Collections.Generic.IEnumerable{System.Object},Kephas.Services.IContext)">
            <summary>
            Creates an instance of the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </summary>
            <param name="typeInfo">Indicates the <see cref="T:Kephas.Reflection.ITypeInfo"/> used for the instantiation.</param>
            <param name="args">Constructor arguments.</param>
            <param name="activationContext">Context for the activation.</param>
            <remarks>
            The <paramref name="typeInfo"/> may be either an implementation type or an abstract type.
            If an abstract type is provided, then an implementation type is determined first and then instantiated.
            </remarks>
            <returns>
            An instance of the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Activation.ActivatorBase.GetImplementationType(Kephas.Reflection.ITypeInfo,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Gets the type implementing the abstract type provided as the parameter.
            </summary>
            <param name="abstractType">Indicates the abstract type.</param>
            <param name="activationContext">Context for the activation.</param>
            <param name="throwOnNotFound">Indicates whether to throw an exception if an implementation type is not found.</param>
            <returns>
            The implementation type for the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Activation.ActivatorBase.GetImplementationTypes">
            <summary>
            Gets the supported implementation types.
            </summary>
            <remarks>
            The <see cref="T:Kephas.Activation.ActivatorBase"/> class provides always an empty list
            of implementation types. The inheritors should provide a proper list of
            supported implementation types annotated with <see cref="T:Kephas.Activation.ImplementationForAttribute"/>,
            otherwise only non-abstract types will be resolved.
            </remarks>
            <returns>
            An enumeration of implementation types.
            </returns>
        </member>
        <member name="M:Kephas.Activation.ActivatorBase.TryGetTypeInfo(Kephas.Reflection.ITypeInfo)">
            <summary>
            Tries to get the native type information.
            </summary>
            <param name="abstractType">Indicates the abstract type.</param>
            <returns>
            A TypeInfo.
            </returns>
        </member>
        <member name="M:Kephas.Activation.ActivatorBase.ComputeImplementationType(Kephas.Reflection.ITypeInfo,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Computes the type implementing the abstract type provided as the parameter.
            </summary>
            <param name="abstractType">Indicates the abstract type.</param>
            <param name="activationContext">Context for the activation.</param>
            <param name="throwOnNotFound">Indicates whether to throw an exception if an implementation type is not found.</param>
            <returns>
            The implementation type for the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="T:Kephas.Activation.IActivator">
            <summary>
            Contract for a service used for object instantiation based on <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Activation.IActivator.CreateInstance(Kephas.Reflection.ITypeInfo,System.Collections.Generic.IEnumerable{System.Object},Kephas.Services.IContext)">
            <summary>
            Creates an instance of the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </summary>
            <param name="typeInfo">Indicates the <see cref="T:Kephas.Reflection.ITypeInfo"/> used for the instantiation.</param>
            <param name="args">Constructor arguments.</param>
            <param name="activationContext">Context for the activation.</param>
            <remarks>
            The <paramref name="typeInfo"/> may be either an implementation type or an abstract type.
            If an abstract type is provided, then an implementation type is determined first and then instantiated.
            </remarks>
            <returns>
            An instance of the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Activation.IActivator.GetImplementationType(Kephas.Reflection.ITypeInfo,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Gets the type implementing the abstract type provided as the parameter.
            </summary>
            <param name="abstractType">Indicates the abstract type.</param>
            <param name="activationContext">Context for the activation.</param>
            <param name="throwOnNotFound">Indicates whether to throw an exception if an implementation type is not found.</param>
            <returns>
            The implementation type for the provided <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="T:Kephas.Activation.ImplementationForAttribute">
            <summary>
            Attribute associating implementations to their abstract model.
            </summary>
            <remarks>
            This attribute is typically used to annotate the concrete implementation of an abstract type
            defined typically either as an abstract class or as an interface. This association helps the infrastructure
            to find the concrete implementation based only on the abstract type.
            </remarks>
        </member>
        <member name="M:Kephas.Activation.ImplementationForAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Activation.ImplementationForAttribute"/> class.
            </summary>
            <param name="abstractType">The model type associated to the attributed type.</param>
            <param name="abstractTypeParts">A variable-length parameters list containing parts of the provided abstract type.</param>
        </member>
        <member name="P:Kephas.Activation.ImplementationForAttribute.AbstractType">
            <summary>
            Gets the abstract type associated to the attributed type.
            </summary>
            <value>
            The associated abstract type.
            </value>
        </member>
        <member name="P:Kephas.Activation.ImplementationForAttribute.AbstractTypeParts">
            <summary>
            Gets the parts of the abstract type.
            </summary>
            <value>
            The abstract type parts.
            </value>
        </member>
        <member name="T:Kephas.AmbientServices">
            <summary>
            Provides the global ambient services.
            </summary>
            <remarks>
            It is a recommended practice to not use global services, instead get the services
            using the composition (the classical example is the unit testing, where the classes
            should be sandboxed as much as possible). However, there may be cases when this cannot be avoided,
            such as static classes or classes which get instantiated outside of the developer's control
            (like in the case of the entities instatiated by the ORMs). Those are cases where the
            <see cref="T:Kephas.AmbientServices"/> can be safely used.
            </remarks>
        </member>
        <member name="M:Kephas.AmbientServices.#ctor(System.Boolean,Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.AmbientServices"/> class.
            </summary>
            <param name="registerDefaultServices">Optional. True to register default services.</param>
            <param name="typeRegistry">Optional. The type registry.</param>
        </member>
        <member name="P:Kephas.AmbientServices.ConfigurationStore">
            <summary>
            Gets the configuration store.
            </summary>
            <value>
            The configuration store.
            </value>
        </member>
        <member name="P:Kephas.AmbientServices.CompositionContainer">
            <summary>
            Gets the composition container.
            </summary>
            <value>
            The composition container.
            </value>
        </member>
        <member name="P:Kephas.AmbientServices.TypeRegistry">
            <summary>
            Gets the type serviceRegistry.
            </summary>
        </member>
        <member name="P:Kephas.AmbientServices.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
            <value>
            The type loader.
            </value>
        </member>
        <member name="P:Kephas.AmbientServices.AppRuntime">
            <summary>
            Gets the application runtime.
            </summary>
            <value>
            The application runtime.
            </value>
        </member>
        <member name="P:Kephas.AmbientServices.LogManager">
            <summary>
            Gets the log manager.
            </summary>
            <value>
            The log manager.
            </value>
        </member>
        <member name="P:Kephas.AmbientServices.LicensingManager">
            <summary>
            Gets the manager for licensing.
            </summary>
            <value>
            The licensing manager.
            </value>
        </member>
        <member name="M:Kephas.AmbientServices.Register(System.Type,System.Action{Kephas.Composition.Lite.IServiceRegistrationBuilder})">
            <summary>
            Registers the provided service using a registration builder.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="builder">The builder.</param>
            <returns>
            The IAmbientServices.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServices.IsRegistered(System.Type)">
            <summary>
            Gets a value indicating whether the service with the provided contract is registered.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            <c>true</c> if the service is registered, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServices.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param>
        </member>
        <member name="M:Kephas.AmbientServices.GetAppServiceInfos(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets the application service infos in this collection.
            </summary>
            <param name="candidateTypes">List of types of the candidates.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            An enumerator that allows foreach to be used to process the application service infos in this
            collection.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServices.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="M:Kephas.AmbientServices.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to
                                    release only unmanaged resources.</param>
        </member>
        <member name="M:Kephas.AmbientServices.CreateDefaultInitializedAppRuntime">
            <summary>
            Creates the default application runtime and initializes it.
            </summary>
            <returns>
            The new application runtime.
            </returns>
        </member>
        <member name="T:Kephas.AmbientServicesExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.IAmbientServices"/>.
            </summary>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetLogger(Kephas.IAmbientServices,System.String)">
            <summary>
            Gets the logger with the provided name.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="loggerName">Name of the logger.</param>
            <returns>
            A logger for the provided name.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetLogger(Kephas.IAmbientServices,System.Type)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="type">The type.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetLogger``1(Kephas.IAmbientServices)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <typeparam name="T">The type for which a logger should be created.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Configure``1(Kephas.IAmbientServices,System.Action{``0})">
            <summary>
            Configures the settings.
            </summary>
            <typeparam name="TSettings">Type of the settings.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="optionsConfig">The options configuration.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register``1(Kephas.IAmbientServices,System.Action{Kephas.Composition.Lite.IServiceRegistrationBuilder})">
            <summary>
            Registers the provided service.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="builder">The registration builder.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple``1(Kephas.IAmbientServices,System.Action{Kephas.Composition.Lite.IServiceRegistrationBuilder})">
            <summary>
            Registers the provided service, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="builder">The registration builder.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register``1(Kephas.IAmbientServices,``0)">
            <summary>
            Registers the provided service instance.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="service">The service.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple``1(Kephas.IAmbientServices,``0)">
            <summary>
            Registers the provided service instance, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="service">The service.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register``2(Kephas.IAmbientServices)">
            <summary>
            Registers the provided service with implementation type as singleton.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceImplementation">Type of the service implementation.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple``2(Kephas.IAmbientServices)">
            <summary>
            Registers the provided service with implementation type as singleton, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceImplementation">Type of the service implementation.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransient``2(Kephas.IAmbientServices)">
            <summary>
            Registers the provided service with implementation type as transient.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceImplementation">Type of the service implementation.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransientMultiple``2(Kephas.IAmbientServices)">
            <summary>
            Registers the provided service with implementation type as transient, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceImplementation">Type of the service implementation.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register``1(Kephas.IAmbientServices,System.Func{``0})">
            <summary>
            Registers the provided service as singleton factory.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple``1(Kephas.IAmbientServices,System.Func{``0})">
            <summary>
            Registers the provided service as singleton factory, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransient``1(Kephas.IAmbientServices,System.Func{``0})">
            <summary>
            Registers the provided service as transient factory.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransientMultiple``1(Kephas.IAmbientServices,System.Func{``0})">
            <summary>
            Registers the provided service as transient factory, allowing also multiple registrations.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register(Kephas.IAmbientServices,System.Type,System.Func{System.Object})">
            <summary>
            Registers the provided service as singleton factory.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple(Kephas.IAmbientServices,System.Type,System.Func{System.Object})">
            <summary>
            Registers the provided service as singleton factory, allowing also multiple registrations.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransient(Kephas.IAmbientServices,System.Type,System.Func{System.Object})">
            <summary>
            Registers the provided service as transient factory.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransientMultiple(Kephas.IAmbientServices,System.Type,System.Func{System.Object})">
            <summary>
            Registers the provided service as transient factory, allowing also multiple registrations.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceFactory">The service factory.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register(Kephas.IAmbientServices,System.Type,System.Object)">
            <summary>
            Registers the provided service.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple(Kephas.IAmbientServices,System.Type,System.Object)">
            <summary>
            Registers the provided service, allowing also multiple registrations.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="service">The service.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.Register(Kephas.IAmbientServices,System.Type,System.Type)">
            <summary>
            Registers the provided service as singleton.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceImplementationType">The service implementation type.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterMultiple(Kephas.IAmbientServices,System.Type,System.Type)">
            <summary>
            Registers the provided service as singleton, allowing also multiple registrations.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceImplementationType">The service implementation type.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransient(Kephas.IAmbientServices,System.Type,System.Type)">
            <summary>
            Registers the provided service as transient.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceImplementationType">The service implementation type.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.RegisterTransientMultiple(Kephas.IAmbientServices,System.Type,System.Type)">
            <summary>
            Registers the provided service as transient, allowing also multiple registrations.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceImplementationType">The service implementation type.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service with the provided type.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            A service object of type <typeparamref name="TService"/>.-or- <c>null</c> if there is no
            service object of type <typeparamref name="TService"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Gets the service with the provided type.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Gets the service with the provided type.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            A service object of type <typeparamref name="TService"/>.-or- <c>null</c> if there is no
            service object of type <typeparamref name="TService"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithConfigurationStore(Kephas.IAmbientServices,Kephas.Configuration.IConfigurationStore)">
            <summary>
            Sets the configuration store to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="configurationStore">The configuration store.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithLicensingManager(Kephas.IAmbientServices,Kephas.Licensing.ILicensingManager)">
            <summary>
            Sets the licensing manager to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="licensingManager">The licensing manager.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithDefaultLicensingManager(Kephas.IAmbientServices,Kephas.Cryptography.IEncryptionService)">
            <summary>
            Sets the default licensing manager to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="encryptionService">The encryption service.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithLogManager(Kephas.IAmbientServices,Kephas.Logging.ILogManager,System.Boolean)">
            <summary>
            Sets the log manager to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="logManager">The log manager.</param>
            <param name="replaceDefault">Optional. True to replace the <see cref="P:Kephas.Logging.LoggingHelper.DefaultLogManager"/>.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithAppRuntime(Kephas.IAmbientServices,Kephas.Application.IAppRuntime)">
            <summary>
            Sets the application runtime to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="appRuntime">The application runtime.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithCompositionContainer(Kephas.IAmbientServices,Kephas.Composition.ICompositionContext)">
            <summary>
            Sets the composition container to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="compositionContainer">The composition container.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.WithCompositionContainer``1(Kephas.IAmbientServices,System.Action{``0})">
            <summary>
            Sets the composition container to the ambient services.
            </summary>
            <typeparam name="TContainerBuilder">Type of the composition container builder.</typeparam>
            <param name="ambientServices">The ambient services.</param>
            <param name="containerBuilderConfig">The container builder configuration.</param>
            <remarks>The container builder type must provide a constructor with one parameter of type <see cref="T:Kephas.Services.IContext" />.</remarks>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.AmbientServicesExtensions.BuildWithLite(Kephas.IAmbientServices,System.Action{Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder})">
            <summary>
            Builds the composition container using Lite and adds it to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="containerBuilderConfig">Optional. The container builder configuration.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="T:Kephas.Application.AmbientServicesApplicationExtensions">
            <summary>
            Extension methods for the <see cref="T:Kephas.IAmbientServices"/>.
            </summary>
        </member>
        <member name="M:Kephas.Application.AmbientServicesApplicationExtensions.WithDynamicAppRuntime(Kephas.IAmbientServices,System.Func{System.Reflection.AssemblyName,System.Boolean},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Action{Kephas.Application.DynamicAppRuntime})">
            <summary>
            Adds the dynamic application runtime to the ambient services.
            </summary>
            <remarks>
            It uses the <see cref="T:Kephas.Reflection.ITypeLoader"/> and <see cref="T:Kephas.Logging.ILogManager"/> services from the
            ambient services to configure the application runtime. Make sure that these services are
            properly configured before using this method.
            </remarks>
            <param name="ambientServices">The ambient services.</param>
            <param name="assemblyFilter">Optional. A filter specifying the assembly.</param>
            <param name="appFolder">Optional. The application location.</param>
            <param name="configFolders">Optional. The configuration folders.</param>
            <param name="licenseFolders">Optional. The license folders.</param>
            <param name="isRoot">Optional. Indicates whether the application instance is the root.</param>
            <param name="appId">Optional. Identifier for the application.</param>
            <param name="appInstanceId">Optional. Identifier for the application instance.</param>
            <param name="appVersion">Optional. The application version.</param>
            <param name="config">Optional. The application runtime configuration callback.</param>
            <returns>
            The provided ambient services.
            </returns>
        </member>
        <member name="M:Kephas.Application.AmbientServicesApplicationExtensions.WithStaticAppRuntime(Kephas.IAmbientServices,System.Func{System.Reflection.AssemblyName,System.Boolean},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Action{Kephas.Application.StaticAppRuntime})">
            <summary>
            Adds the static application runtime to the ambient services.
            </summary>
            <remarks>
            It uses the <see cref="T:Kephas.Reflection.ITypeLoader"/> and <see cref="T:Kephas.Logging.ILogManager"/> services from the
            ambient services to configure the application runtime. Make sure that these services are
            properly configured before using this method.
            </remarks>
            <param name="ambientServices">The ambient services.</param>
            <param name="assemblyFilter">Optional. A filter specifying the assembly.</param>
            <param name="appFolder">Optional. The application location.</param>
            <param name="configFolders">Optional. The configuration folders.</param>
            <param name="licenseFolders">Optional. The license folders.</param>
            <param name="isRoot">Optional. Indicates whether the application instance is the root.</param>
            <param name="appId">Optional. Identifier for the application.</param>
            <param name="appInstanceId">Optional. Identifier for the application instance.</param>
            <param name="appVersion">Optional. The application version.</param>
            <param name="config">Optional. The application runtime configuration callback.</param>
            <returns>
            The provided ambient services.
            </returns>
        </member>
        <member name="T:Kephas.Application.AppArgs">
            <summary>
            Application arguments.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.LogLevelArgName">
            <summary>
            Gets the name of the LogLevel application argument.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.ServiceArgName">
            <summary>
            Gets the name of the Service application argument.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.EnvArgName">
            <summary>
            Gets the name of the Env application argument.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.AppIdArgName">
            <summary>
            Gets the name of the AppId application argument.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.AppInstanceIdArgName">
            <summary>
            Gets the name of the AppInstanceId application argument.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppArgs.RootArgName">
            <summary>
            Gets the name of the Root application argument.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppArgs"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppArgs.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppArgs"/> class.
            </summary>
            <param name="appArgs">The application arguments.</param>
        </member>
        <member name="M:Kephas.Application.AppArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppArgs"/> class.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="M:Kephas.Application.AppArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppArgs"/> class.
            </summary>
            <param name="argValues">The argument values.</param>
        </member>
        <member name="M:Kephas.Application.AppArgs.#ctor(Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppArgs"/> class.
            </summary>
            <param name="args">The argument values.</param>
        </member>
        <member name="P:Kephas.Application.AppArgs.AppId">
            <summary>
            Gets or sets the application ID.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.AppInstanceId">
            <summary>
            Gets or sets the application instance ID.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.Environment">
            <summary>
            Gets or sets the environment name.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.RootAppInstanceId">
            <summary>
            Gets or sets the ID of the root application instance, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.LogLevel">
            <summary>
            Gets the log level, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.RunAsService">
            <summary>
            Gets a value indicating whether the application is executed as a Windows service (or Linux daemon).
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.RunAsRoot">
            <summary>
            Gets a value indicating whether this application instance is the root.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppArgs.IsDevelopment">
            <summary>
            Gets a value indicating whether the application is in development mode.
            </summary>
        </member>
        <member name="T:Kephas.Application.AppIdentity">
            <summary>
            An app identity.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppIdentity.#ctor(System.String,Kephas.Versioning.SemanticVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppIdentity"/> class.
            </summary>
            <param name="id">The app ID.</param>
            <param name="version">Optional. The version.</param>
        </member>
        <member name="M:Kephas.Application.AppIdentity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppIdentity"/> class.
            </summary>
            <param name="id">The app ID.</param>
            <param name="version">Optional. The version.</param>
        </member>
        <member name="P:Kephas.Application.AppIdentity.Id">
            <summary>
            Gets the identifier for this instance.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Kephas.Application.AppIdentity.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Kephas.Application.AppIdentity.Kephas#Data#IIdentifiable#Id">
            <summary>
            Gets the identifier for this instance.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:Kephas.Application.AppIdentity.Parse(System.String)">
            <summary>
            Parses a string and returns an instance of <see cref="T:Kephas.Application.AppIdentity"/>.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            An AppIdentity.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppIdentity.IsMatch(Kephas.Application.AppIdentity)">
            <summary>
            Returns a value indicating whether this identity matches the provided one.
            It is considered a match when the IDs are the same and either the versions are
            the same or this version is <c>null</c>.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            True if match, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppIdentity.Equals(Kephas.Application.AppIdentity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppIdentity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppIdentity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppIdentity.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Application.AppRuntimeBase">
            <summary>
            An application application runtime providing only assemblies loaded by the runtime.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.DefaultConfigFolder">
            <summary>
            The default configuration folder.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.DefaultLicenseFolder">
            <summary>
            The default license folder.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AppIdentityKey">
            <summary>
            The application identifier key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.EnvKey">
            <summary>
            The environment name key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AppIdKey">
            <summary>
            The application identifier key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AppInstanceIdKey">
            <summary>
            The application instance identifier key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AppVersionKey">
            <summary>
            The application version key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.IsRootKey">
            <summary>
            The root application identifier key.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AssemblyFileSearchPattern">
            <summary>
            A pattern specifying the assembly file search.
            </summary>
        </member>
        <member name="F:Kephas.Application.AppRuntimeBase.AssemblyFileExtension">
            <summary>
            The assembly file extension.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.#ctor(System.Func{System.String,Kephas.Logging.ILogger},System.Func{Kephas.Application.AppIdentity,Kephas.Services.IContext,Kephas.Licensing.ILicenseCheckResult},System.Func{System.Reflection.AssemblyName,System.Boolean},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,System.String,Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.AppRuntimeBase"/> class.
            </summary>
            <param name="getLogger">Optional. The get logger delegate.</param>
            <param name="checkLicense">Optional. The check license delegate.</param>
            <param name="defaultAssemblyFilter">Optional. A default filter applied when loading
                                                assemblies.</param>
            <param name="appFolder">Optional. The application folder. If not specified, the current
                                      application location is considered.</param>
            <param name="configFolders">Optional. The configuration folders relative to the application
                                        location.</param>
            <param name="licenseFolders">Optional. The license folders relative to the application
                                         location.</param>
            <param name="isRoot">Optional. Indicates whether the application instance is the root.</param>
            <param name="appId">Optional. Identifier for the application.</param>
            <param name="appInstanceId">Optional. Identifier for the application instance.</param>
            <param name="appVersion">Optional. The application version.</param>
            <param name="appArgs">Optional. The application arguments.</param>
        </member>
        <member name="P:Kephas.Application.AppRuntimeBase.AppArgs">
            <summary>
            Gets the application arguments.
            </summary>
        </member>
        <member name="P:Kephas.Application.AppRuntimeBase.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Kephas.Application.AppRuntimeBase.CheckLicense">
            <summary>
            Gets the check license delegate.
            </summary>
            <value>
            A function delegate that yields an ILicenseCheckResult.
            </value>
        </member>
        <member name="P:Kephas.Application.AppRuntimeBase.AssemblyFilter">
            <summary>
            Gets the assembly filter.
            </summary>
            <value>
            The assembly filter.
            </value>
        </member>
        <member name="P:Kephas.Application.AppRuntimeBase.InitializationMonitor">
            <summary>
            Gets the initialization monitor.
            </summary>
            <value>
            The initialization monitor.
            </value>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.Kephas#Services#IInitializable#Initialize(Kephas.Services.IContext)">
            <summary>
            Initializes the service.
            </summary>
            <param name="context">An optional context for initialization.</param>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppFramework">
            <summary>
            Gets the application's underlying .NET framework identifier.
            </summary>
            <returns>
            The application's underlying .NET framework identifier.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppLocation">
            <summary>
            Gets the application location (directory where the application lies).
            </summary>
            <returns>
            A path indicating the application location.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppLocation(Kephas.Application.AppIdentity,System.Boolean)">
            <summary>
            Gets the location of the application with the indicated identity.
            </summary>
            <param name="appIdentity">The application identity.</param>
            <param name="throwOnNotFound">Optional. True to throw if the indicated app is not found.</param>
            <returns>
            A path indicating the indicated application location.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppBinLocations">
            <summary>
            Gets the application bin folders from where application is loaded.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the application bin folders in this
            collection.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppConfigLocations">
            <summary>
            Gets the application directories where configuration files are stored.
            </summary>
            <returns>
            The application configuration directories.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppLicenseLocations">
            <summary>
            Gets the application directories where license files are stored.
            </summary>
            <returns>
            The application configuration directories.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppAssemblies(System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>
            Gets the application assemblies.
            </summary>
            <param name="assemblyFilter">Optional. A filter for the assemblies.</param>
            <returns>
            An enumeration of application assemblies.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetHostAddress">
            <summary>
            Gets host address.
            </summary>
            <returns>
            The host address.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetHostName">
            <summary>
            Gets the name of the host where the application process runs.
            </summary>
            <returns>
            The host name.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.LoadAssemblyFromName(System.Reflection.AssemblyName)">
            <summary>
            Attempts to load an assembly.
            </summary>
            <param name="assemblyName">The name of the assembly to be loaded.</param>
            <returns>
            The resolved assembly reference.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.LoadAssemblyFromPath(System.String)">
            <summary>
            Attempts to load an assembly.
            </summary>
            <param name="assemblyFilePath">The file path of the assembly to be loaded.</param>
            <returns>
            The resolved assembly reference.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Kephas.Application.AppRuntimeBase and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to
                                    release only unmanaged resources.</param>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.InitializeAppProperties(System.Reflection.Assembly,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
            <summary>
            Initializes the application properties: AppId, AppInstanceId, and AppVersion.
            </summary>
            <param name="entryAssembly">The entry assembly.</param>
            <param name="isRoot">Indicates whether the application instance is the root.</param>
            <param name="appId">Identifier for the application.</param>
            <param name="appInstanceId">Identifier for the application instance.</param>
            <param name="appVersion">The application version.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.HandleAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the AppDomain.CurrentDomain.AssemblyResolve event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="args">Resolve event information.</param>
            <returns>
            The resolved assembly -or- <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.IsAssemblyMatch(System.Reflection.AssemblyName,System.String,System.Version,System.Byte[])">
            <summary>
            Query if the assembly name matches the provided values.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="publicKeyToken">The public key token.</param>
            <returns>
            True if assembly match, false if not, <c>null</c> if the assembly matches the name but not the version or public key token.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.IsCodeAssembly(System.String)">
            <summary>
            Query if 'assemblyName' is a code assembly.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <returns>
            True if code assembly, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppFrameworkName">
            <summary>
            Gets the application's underlying framework name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <returns>
            The application framework name.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetAppId(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the application identifier.
            </summary>
            <param name="entryAssembly">The entry assembly.</param>
            <param name="appId">Identifier for the application.</param>
            <returns>
            The application identifier.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.GetReferencedAssemblies(System.Reflection.Assembly)">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            An array of assembly name.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.ComputeAppAssemblies(System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>
            Computes the application assemblies.
            </summary>
            <param name="assemblyFilter">A filter for the assemblies.</param>
            <returns>
            An enumeration of application assemblies.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeBase.InitializeCore(Kephas.Services.IContext)">
            <summary>
            Initializes the service, ensuring that the assembly resolution is properly handled.
            </summary>
            <param name="context">Optional. An optional context for initialization.</param>
        </member>
        <member name="T:Kephas.Application.DefaultAppSetupService">
            <summary>
            The default service for the <see cref="T:Kephas.Application.IAppSetupService"/> contract.
            </summary>
        </member>
        <member name="M:Kephas.Application.DefaultAppSetupService.#ctor(System.Collections.Generic.ICollection{System.Lazy{Kephas.Application.IAppSetupHandler,Kephas.Services.Composition.AppServiceMetadata}},Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.DefaultAppSetupService"/> class.
            </summary>
            <param name="lazyHandlers">The lazy setup handlers.</param>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Application.DefaultAppSetupService.SetupAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Performs the application setup.
            </summary>
            <param name="appContext">The application context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Kephas.Application.DefaultAppSetupService.SetupAsync(Kephas.Application.IAppSetupHandler,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Performs the application setup.
            </summary>
            <param name="setupHandler">The setup handler.</param>
            <param name="appContext">The application context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Kephas.Application.DynamicAppRuntime">
            <summary>
            An application application runtime loading dynamically assemblies from the application localtion.
            </summary>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.#ctor(System.Func{System.String,Kephas.Logging.ILogger},System.Func{Kephas.Application.AppIdentity,Kephas.Services.IContext,Kephas.Licensing.ILicenseCheckResult},System.Func{System.Reflection.AssemblyName,System.Boolean},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,System.String,Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.DynamicAppRuntime"/> class.
            </summary>
            <param name="getLogger">Optional. The get logger delegate.</param>
            <param name="checkLicense">Optional. The check license delegate.</param>
            <param name="defaultAssemblyFilter">Optional. The default assembly filter.</param>
            <param name="appFolder">Optional. The application location.</param>
            <param name="configFolders">Optional. The configuration folders.</param>
            <param name="licenseFolders">Optional. The license folders.</param>
            <param name="isRoot">Optional. Indicates whether the application instance is the root.</param>
            <param name="appId">Optional. Identifier for the application.</param>
            <param name="appInstanceId">Optional. Identifier for the application instance.</param>
            <param name="appVersion">Optional. The application version.</param>
            <param name="appArgs">Optional. The application arguments.</param>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.ComputeAppAssemblies(System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>
            Computes the application assemblies.
            </summary>
            <param name="assemblyFilter">A filter for the assemblies.</param>
            <returns>
            An enumeration of application assemblies.
            </returns>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.AddAdditionalAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly},System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>
            Adds additional assemblies to the ones already collected.
            </summary>
            <param name="assemblies">The collected assemblies.</param>
            <param name="assemblyFilter">A filter for the assemblies.</param>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.EnumerateFiles(System.String,System.String)">
            <summary>
            Enumerates the files in the provided directory.
            </summary>
            <param name="directory">Pathname of the directory.</param>
            <param name="filePattern">A pattern specifying the files to retrieve.</param>
            <returns>
            An enumeration of file names.
            </returns>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.GetFileName(System.Reflection.Assembly)">
            <summary>
            Gets the file name of the provided assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            The assembly file name.
            </returns>
        </member>
        <member name="M:Kephas.Application.DynamicAppRuntime.GetAssemblyName(System.String)">
            <summary>
            Gets the assembly name from the assembly file name.
            </summary>
            <param name="assemblyFileName">The assembly file name.</param>
            <returns>
            The assembly name.
            </returns>
        </member>
        <member name="T:Kephas.Application.EnvironmentName">
            <summary>
            Enumerates the environment names.
            </summary>
        </member>
        <member name="F:Kephas.Application.EnvironmentName.Development">
            <summary>
            The development environment name.
            </summary>
        </member>
        <member name="F:Kephas.Application.EnvironmentName.Production">
            <summary>
            The production environment name.
            </summary>
        </member>
        <member name="F:Kephas.Application.EnvironmentName.Staging">
            <summary>
            The staging environment name.
            </summary>
        </member>
        <member name="F:Kephas.Application.EnvironmentName.Test">
            <summary>
            The test environment name.
            </summary>
        </member>
        <member name="T:Kephas.Application.IAppArgs">
            <summary>
            Provides the commonly used arguments in applications.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.AppId">
            <summary>
            Gets the application ID, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.AppInstanceId">
            <summary>
            Gets the application instance ID, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.RootAppInstanceId">
            <summary>
            Gets the ID of the root application instance, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.LogLevel">
            <summary>
            Gets the log level, if set.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.Environment">
            <summary>
            Gets the environment name.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.RunAsService">
            <summary>
            Gets a value indicating whether the application is executed as a Windows service (or Linux daemon).
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.RunAsRoot">
            <summary>
            Gets a value indicating whether this application instance is the root.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppArgs.IsDevelopment">
            <summary>
            Gets a value indicating whether the application is in development mode.
            </summary>
        </member>
        <member name="T:Kephas.Application.IAppLifecycleBehavior">
            <summary>
            Singleton service contract for application lifecycle behavior.
            </summary>
            <remarks>
            An application lifecycle behavior intercepts the initialization and finalization of the application
            and reacts to them.
            </remarks>
        </member>
        <member name="M:Kephas.Application.IAppLifecycleBehavior.BeforeAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous initialization.
            </summary>
            <remarks>
            To interrupt the application initialization, simply throw an appropriate exception.
            </remarks>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppLifecycleBehavior.AfterAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppLifecycleBehavior.BeforeAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous finalization.
            </summary>
            <remarks>
            To interrupt finalization, simply throw any appropriate exception.
            Caution! Interrupting the finalization may cause the application to remain in an undefined state.
            </remarks>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppLifecycleBehavior.AfterAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Application.IAppRuntime">
            <summary>
            Interface for abstracting away the runtime for the application.
            </summary>
        </member>
        <member name="P:Kephas.Application.IAppRuntime.AppArgs">
            <summary>
            Gets the application arguments.
            </summary>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppLocation">
            <summary>
            Gets the application location (directory where the executing application lies).
            </summary>
            <returns>
            A path indicating the application location.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppLocation(Kephas.Application.AppIdentity,System.Boolean)">
            <summary>
            Gets the location of the application with the indicated identity.
            </summary>
            <param name="appIdentity">The application identity.</param>
            <param name="throwOnNotFound">Optional. True to throw if the indicated app is not found.</param>
            <returns>
            A path indicating the indicated application location.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppBinLocations">
            <summary>
            Gets the application bin directories from where application is loaded.
            </summary>
            <returns>
            The application bin directories.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppConfigLocations">
            <summary>
            Gets the application directories where configuration files are stored.
            </summary>
            <returns>
            The application configuration directories.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppLicenseLocations">
            <summary>
            Gets the application directories where license files are stored.
            </summary>
            <returns>
            The application configuration directories.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppAssemblies(System.Func{System.Reflection.AssemblyName,System.Boolean})">
            <summary>
            Gets the application assemblies.
            </summary>
            <param name="assemblyFilter">A filter for the assemblies (optional).</param>
            <returns>
            An enumeration of application assemblies.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetAppFramework">
            <summary>
            Gets the application's underlying .NET framework identifier.
            </summary>
            <returns>
            The application's underlying .NET framework identifier.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetHostAddress">
            <summary>
            Gets host address.
            </summary>
            <returns>
            The host address.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.GetHostName">
            <summary>
            Gets host name.
            </summary>
            <returns>
            The host name.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.LoadAssemblyFromName(System.Reflection.AssemblyName)">
            <summary>
            Attempts to load an assembly from its given assembly name.
            </summary>
            <param name="assemblyName">The name of the assembly to be loaded.</param>
            <returns>
            The resolved assembly reference.
            </returns>
        </member>
        <member name="M:Kephas.Application.IAppRuntime.LoadAssemblyFromPath(System.String)">
            <summary>
            Attempts to load an assembly.
            </summary>
            <param name="assemblyFilePath">The file path of the assembly to be loaded.</param>
            <returns>
            The resolved assembly reference.
            </returns>
        </member>
        <member name="T:Kephas.Application.AppRuntimeExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Application.IAppRuntime"/>.
            </summary>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.IsRoot(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the identifier of the application.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <returns>
            The identifier of the application.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetAppId(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the identifier of the application.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <returns>
            The identifier of the application.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetAppVersion(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the version of the application.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <returns>
            The version of the application.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetAppIdentity(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the application identity.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <returns>
            The application identity.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetEnvironment(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the running environment.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <returns>The running environment.</returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.IsDevelopment(Kephas.Application.IAppRuntime)">
            <summary>
            Gets a value indicating whether the running environment is development.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <returns>A value indicating whether the running environment is development.</returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetAppInstanceId(Kephas.Application.IAppRuntime)">
            <summary>
            Gets the identifier of the application instance.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <returns>
            The identifier of the application instance.
            </returns>
        </member>
        <member name="M:Kephas.Application.AppRuntimeExtensions.GetFullPath(Kephas.Application.IAppRuntime,System.String)">
            <summary>
            Gets the full path of the file or folder. If the name is a relative path, it will be made relative to the application location.
            </summary>
            <param name="appRuntime">The app runtime to act on.</param>
            <param name="path">Relative or absolute path of the file or folder.</param>
            <returns>
            The full path of the file or folder.
            </returns>
        </member>
        <member name="T:Kephas.Application.IAppSetupHandler">
            <summary>
            Singleton service handling one aspect of the application setup.
            </summary>
        </member>
        <member name="M:Kephas.Application.IAppSetupHandler.SetupAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Performs one step in the application setup.
            </summary>
            <param name="appContext">The application context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Kephas.Application.IAppSetupService">
            <summary>
            Singleton service contract for setting up the application.
            </summary>
        </member>
        <member name="M:Kephas.Application.IAppSetupService.SetupAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Performs the application setup.
            </summary>
            <param name="appContext">The application context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Kephas.Application.Interaction.AppSetupQueryEvent">
            <summary>
            Event for querying whether setup activities can be executed.
            </summary>
        </member>
        <member name="P:Kephas.Application.Interaction.AppSetupQueryEvent.SetupEnabled">
            <summary>
            Gets or sets a value indicating whether the setup activities are enabled.
            </summary>
        </member>
        <member name="T:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior">
            <summary>
            Feature manager configuring the <see cref="T:Kephas.Threading.Tasks.ThreadContextAwaiter"/> to preserve the thread culture.
            </summary>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.BeforeAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.AfterAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.BeforeAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token (optional).</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.AfterAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token (optional).</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.StoreThreadCulture(Kephas.Threading.Tasks.ThreadContext)">
            <summary>
            Stores the current culture in the threading context.
            </summary>
            <param name="threadContext">Context for the server threading.</param>
        </member>
        <member name="M:Kephas.Application.PreserveCultureThreadContextAppLifecycleBehavior.RestoreThreadCulture(Kephas.Threading.Tasks.ThreadContext)">
            <summary>
            Restores the current culture from the threading context.
            </summary>
            <param name="threadContext">Context for the server threading.</param>
        </member>
        <member name="T:Kephas.Application.Reflection.AppDependency">
            <summary>
            An application dependency.
            </summary>
        </member>
        <member name="M:Kephas.Application.Reflection.AppDependency.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.Reflection.AppDependency"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="versionRange">The version range.</param>
        </member>
        <member name="P:Kephas.Application.Reflection.AppDependency.Name">
            <summary>
            Gets the name of the referenced app.
            </summary>
            <value>
            The name of the referenced app.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.AppDependency.VersionRange">
            <summary>
            Gets the version range.
            </summary>
            <value>
            The version range.
            </value>
        </member>
        <member name="T:Kephas.Application.Reflection.AppInfo">
            <summary>
            Information about the application.
            </summary>
        </member>
        <member name="M:Kephas.Application.Reflection.AppInfo.#ctor(Kephas.Application.AppIdentity,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.Reflection.AppInfo"/> class.
            </summary>
            <param name="identity">The app identity.</param>
            <param name="description">Optional. The description.</param>
            <param name="tags">Optional. The tags.</param>
        </member>
        <member name="M:Kephas.Application.Reflection.AppInfo.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.Reflection.AppInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">Optional. The version.</param>
            <param name="description">Optional. The description.</param>
            <param name="tags">Optional. The tags.</param>
        </member>
        <member name="P:Kephas.Application.Reflection.AppInfo.Identity">
            <summary>
            Gets the app identity.
            </summary>
            <value>
            The app identity.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.AppInfo.Description">
            <summary>
            Gets the application description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.AppInfo.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.AppInfo.Kephas#Application#Reflection#IAppInfo#Parameters">
            <summary>
            Gets the application parameters.
            </summary>
            <value>
            The application parameters.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.AppInfo.Dependencies">
            <summary>
            Gets the dependencies.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="M:Kephas.Application.Reflection.AppInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Application.Reflection.IAppDependency">
            <summary>
            Interface for application dependency.
            </summary>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppDependency.Name">
            <summary>
            Gets the name of the referenced app.
            </summary>
            <value>
            The name of the referenced app.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppDependency.VersionRange">
            <summary>
            Gets the version range.
            </summary>
            <value>
            The version range.
            </value>
        </member>
        <member name="T:Kephas.Application.Reflection.IAppInfo">
            <summary>
            Interface for application information.
            </summary>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppInfo.Identity">
            <summary>
            Gets the app identity.
            </summary>
            <value>
            The app identity.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppInfo.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppInfo.Description">
            <summary>
            Gets the application description.
            </summary>
            <value>
            The application description.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppInfo.Parameters">
            <summary>
            Gets the application parameters.
            </summary>
            <value>
            The application parameters.
            </value>
        </member>
        <member name="P:Kephas.Application.Reflection.IAppInfo.Dependencies">
            <summary>
            Gets the dependencies.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="T:Kephas.Application.StaticAppRuntime">
            <summary>
            An application application runtime providing only assemblies loaded by the runtime.
            </summary>
        </member>
        <member name="M:Kephas.Application.StaticAppRuntime.#ctor(System.Func{System.String,Kephas.Logging.ILogger},System.Func{Kephas.Application.AppIdentity,Kephas.Services.IContext,Kephas.Licensing.ILicenseCheckResult},System.Func{System.Reflection.AssemblyName,System.Boolean},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.String,System.String,System.String,Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Application.StaticAppRuntime"/> class.
            </summary>
            <param name="getLogger">Optional. The get logger delegate.</param>
            <param name="checkLicense">Optional. The check license delegate.</param>
            <param name="defaultAssemblyFilter">Optional. A default filter applied when loading
                                                assemblies.</param>
            <param name="appFolder">Optional. The application location. If not specified, the current
                                      application location is considered.</param>
            <param name="configFolders">Optional. The configuration folders.</param>
            <param name="licenseFolders">Optional. The license folders.</param>
            <param name="isRoot">Optional. Indicates whether the application instance is the root.</param>
            <param name="appId">Optional. Identifier for the application.</param>
            <param name="appInstanceId">Optional. Identifier for the application instance.</param>
            <param name="appVersion">Optional. The application version.</param>
            <param name="appArgs">Optional. The application arguments.</param>
        </member>
        <member name="T:Kephas.Behaviors.AsyncBehaviorRuleBase`2">
            <summary>
            Base class for asynchronous behavior rules.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.AsyncBehaviorRuleBase`2.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Behaviors.AsyncBehaviorRuleBase`2"/> class.
            </summary>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Behaviors.AsyncBehaviorRuleBase`2.CanApplyAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a value asynchronously indicating whether the rule may be applied or not.
            </summary>
            <param name="context">          The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of a value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.AsyncBehaviorRuleBase`2.Kephas#Behaviors#IAsyncBehaviorRule{TContext}#GetValueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.AsyncBehaviorRuleBase`2.GetValueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">          The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.BehaviorRuleBase`2">
            <summary>
            Base class for behavior rules.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleBase`2.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Behaviors.BehaviorRuleBase`2"/> class.
            </summary>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleBase`2.CanApply(`0)">
            <summary>
            Gets a value indicating whether the rule may be applied or not.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleBase`2.Kephas#Behaviors#IBehaviorRule{TContext}#GetValue(`0)">
            <summary>
            Gets the behavior value.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The behavior value.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleBase`2.GetValue(`0)">
            <summary>
            Gets the behavior value.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.BehaviorRuleFlowControlBase">
            <summary>
            Base class controlling the flow of a behavior rule.
            </summary>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleFlowControlBase.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Behaviors.BehaviorRuleFlowControlBase"/> class.
            </summary>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.ProcessingPriority">
            <summary>
            Gets or sets the processing priority.
            </summary>
            <value>
            The processing priority.
            </value>
        </member>
        <member name="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.IsEndRule">
            <summary>
            Gets or sets a value indicating whether this rule ends the processing flow.
            </summary>
            <value>
            <c>true</c> if this rule ends the processing flow, <c>false</c> if not.
            </value>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleFlowControlBase.ComputeIsEndRule">
            <summary>
            Calculates the value of the <see cref="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.IsEndRule"/> property.
            </summary>
            <returns>
            The calculated value of the <see cref="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.IsEndRule"/> property.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorRuleFlowControlBase.ComputeProcessingPriority">
            <summary>
            Calculates the value of the <see cref="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.ProcessingPriority"/> property.
            </summary>
            <returns>
            The calculated value of the <see cref="P:Kephas.Behaviors.BehaviorRuleFlowControlBase.ProcessingPriority"/> property.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.BehaviorValue">
            <summary>
            Class providing convenience methods for behavior values.
            </summary>
        </member>
        <member name="F:Kephas.Behaviors.BehaviorValue.False">
            <summary>
            A behavior value representing the boolean value <c>false</c>.
            </summary>
        </member>
        <member name="F:Kephas.Behaviors.BehaviorValue.True">
            <summary>
            A behavior value representing the boolean value <c>true</c>.
            </summary>
        </member>
        <member name="F:Kephas.Behaviors.BehaviorValue.ReasonKey">
            <summary>
            The key for the dynamic "Reason" property.
            </summary>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorValue.ToBehaviorValue``1(``0)">
            <summary>
            A TValue extension method that converts a value to a behavior value.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="value">The value to act on.</param>
            <returns>
            A BehaviorValue{TValue} representing the provided value.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorValue.WithReason``1(Kephas.Behaviors.IBehaviorValue{``0},System.String)">
            <summary>
            Sets a reason for the given BehaviorValue{TValue}.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="behavior">The value to act on.</param>
            <param name="reason">  The reason.</param>
            <returns>
            The provided BehaviorValue{TValue}.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorValue.GetReason(Kephas.Behaviors.IBehaviorValue)">
            <summary>
            Sets a reason for the given BehaviorValue{TValue}.
            </summary>
            <param name="behavior">The value to act on.</param>
            <returns>
            The reason, if one was provided, otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.BehaviorValue`1">
            <summary>
            Default implementation of a generic behavior value.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.BehaviorValue`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Behaviors.BehaviorValue`1"/> class.
            </summary>
            <param name="value">The behavior value.</param>
        </member>
        <member name="P:Kephas.Behaviors.BehaviorValue`1.Kephas#Behaviors#IBehaviorValue#Value">
            <summary>
            Gets the behavior value.
            </summary>
            <value>
            The behavior value.
            </value>
        </member>
        <member name="P:Kephas.Behaviors.BehaviorValue`1.Value">
            <summary>
            Gets or sets the behavior value.
            </summary>
            <value>
            The behavior value.
            </value>
        </member>
        <member name="T:Kephas.Behaviors.EndRuleAttribute">
            <summary>
            Indicates an end rule.
            </summary>
        </member>
        <member name="M:Kephas.Behaviors.EndRuleAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Behaviors.EndRuleAttribute" /> class.
            </summary>
        </member>
        <member name="P:Kephas.Behaviors.EndRuleAttribute.Value">
            <summary>
            Gets a value indicating whether the rule is an end rule.
            </summary>
            <value>
            Boolean value indicating whether the rule is an end rule.
            </value>
        </member>
        <member name="P:Kephas.Behaviors.EndRuleAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Behaviors.IAsyncBehaviorRule`1">
            <summary>
            Value agnostic contract for defining an asynchronous behavior rule.
            </summary>
            <typeparam name="TContext">The context type.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.IAsyncBehaviorRule`1.CanApplyAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets a value asynchronously indicating whether the rule may be applied or not.
            </summary>
            <param name="context">The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of a value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.IAsyncBehaviorRule`1.GetValueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.IAsyncBehaviorRule`2">
            <summary>
            Contract for defining an asynchronous behavior rule.
            </summary>
            <typeparam name="TContext">The context type.</typeparam>
            <typeparam name="TValue">The type of the behavior value.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.IAsyncBehaviorRule`2.GetValueAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">The context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.IBehaviorRule`1">
            <summary>
            Non-generic contract for defining a behavior rule.
            </summary>
            <typeparam name="TContext">The context type.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.IBehaviorRule`1.CanApply(`0)">
            <summary>
            Gets a value indicating whether the rule may be applied or not.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="M:Kephas.Behaviors.IBehaviorRule`1.GetValue(`0)">
            <summary>
            Gets the behavior value.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.IBehaviorRule`2">
            <summary>
            Contract for defining a behavior rule.
            </summary>
            <typeparam name="TContext">The context type.</typeparam>
            <typeparam name="TValue">  The type of the behavior value.</typeparam>
        </member>
        <member name="M:Kephas.Behaviors.IBehaviorRule`2.GetValue(`0)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Behaviors.IBehaviorRuleFlowControl">
            <summary>
            Contract for controlling the flow of behavior rules.
            </summary>
        </member>
        <member name="P:Kephas.Behaviors.IBehaviorRuleFlowControl.ProcessingPriority">
            <summary>
            Gets the processing priority.
            </summary>
            <value>
            The processing priority.
            </value>
        </member>
        <member name="P:Kephas.Behaviors.IBehaviorRuleFlowControl.IsEndRule">
            <summary>
            Gets a value indicating whether this rule ends the processing flow.
            </summary>
            <value>
            <c>true</c> if this rule ends the processing flow, <c>false</c> if not.
            </value>
        </member>
        <member name="T:Kephas.Behaviors.IBehaviorValue">
            <summary>
            Generic contract for behavior values.
            </summary>
        </member>
        <member name="P:Kephas.Behaviors.IBehaviorValue.Value">
            <summary>
            Gets the behavior value.
            </summary>
            <value>
            The behavior value.
            </value>
        </member>
        <member name="T:Kephas.Behaviors.IBehaviorValue`1">
            <summary>
            Generic contract for behavior values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Kephas.Behaviors.IBehaviorValue`1.Value">
            <summary>
            Gets the behavior value.
            </summary>
            <value>
            The behavior value.
            </value>
        </member>
        <member name="T:Kephas.Collections.CollectionExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:Kephas.Collections.CollectionExtensions.AddRange``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
            <returns>The provided collection for method chaining.</returns>
        </member>
        <member name="T:Kephas.Collections.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Kephas.Collections.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value for the provided key. If the requested item cannot be found, the default value is returned.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The item's key.</param>
            <param name="defaultValue">The default value to return if the item could not be found.</param>
            <returns>The found value, or the default value.</returns>
        </member>
        <member name="T:Kephas.Collections.EnumerableExtensions">
            <summary>
              Extension methods for all kinds of (typed) enumerable data (Array, List, ...)
            </summary>
        </member>
        <member name="M:Kephas.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
              Performs an action for each item in the enumerable.
            </summary>
            <typeparam name = "T">The enumerable data type.</typeparam>
            <param name = "values">The data values.</param>
            <param name = "action">The action to be performed.</param>
            <example>
            <code>
              var values = new[] { "1", "2", "3" };
              values.ConvertList&lt;string, int&gt;().ForEach(Console.WriteLine);
            </code>
            </example>
            <remarks>
              This method was intended to return the passed values to provide method chaining. Howver due to defered execution the compiler would actually never run the entire code at all.
            </remarks>
        </member>
        <member name="T:Kephas.Collections.ProducerConsumerCollectionExtensions">
            <summary>
            Extension methods for producer consumer collections.
            </summary>
        </member>
        <member name="M:Kephas.Collections.ProducerConsumerCollectionExtensions.AddRange``2(``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds a range of items to the collection.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
            <returns>The provided collection for method chaining.</returns>
        </member>
        <member name="T:Kephas.Commands.Args">
            <summary>
            Settings retrieved from the application command line arguments.
            </summary>
        </member>
        <member name="M:Kephas.Commands.Args.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Args"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Commands.Args.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Args"/> class.
            </summary>
            <param name="appArgs">The application arguments.</param>
        </member>
        <member name="M:Kephas.Commands.Args.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Args"/> class.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="M:Kephas.Commands.Args.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Args"/> class.
            </summary>
            <param name="argValues">The argument values.</param>
        </member>
        <member name="M:Kephas.Commands.Args.#ctor(Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Args"/> class.
            </summary>
            <param name="args">The argument values.</param>
        </member>
        <member name="M:Kephas.Commands.Args.ToCommandArgs">
            <summary>
            Converts this app arguments list to a list of string arguments for use in command lines.
            </summary>
            <returns>A list of string arguments.</returns>
        </member>
        <member name="M:Kephas.Commands.Args.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Commands.Args.ComputeArgs(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Calculates the arguments as a dictionary of values.
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            The calculated arguments.
            </returns>
        </member>
        <member name="M:Kephas.Commands.Args.ComputeArgs(System.String)">
            <summary>
            Calculates the arguments as a dictionary of values.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>
            The calculated arguments.
            </returns>
        </member>
        <member name="M:Kephas.Commands.Args.ComputeArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Calculates the arguments as a dictionary of values.
            </summary>
            <param name="args">The application arguments.</param>
            <returns>
            The calculated arguments.
            </returns>
        </member>
        <member name="M:Kephas.Commands.Args.TrySetValue(System.String,System.Object)">
            <summary>
            Attempts to set the value with the given key.
            </summary>
            <remarks>
            First of all, it is tried to set the property value to the inner object, if one is set.
            The next try is to set the property value to the expando object itself.
            Lastly, if still a property by the provided name cannot be found, the inner dictionary is used to set the value with the provided key.
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value to set.</param>
            <returns>
            <c>true</c> if the value could be set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Commands.Args.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get the dynamic value with the given key.
            </summary>
            <remarks>
            First of all, it is tried to get a property value from the inner object, if one is set.
            The next try is to retrieve the property value from the expando object itself.
            Lastly, if still a property by the provided name cannot be found, the inner dictionary is searched by the provided key.
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value to get.</param>
            <returns>
            <c>true</c> if a value is found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Kephas.Commands.Command">
            <summary>
            Represents a command to be executed.
            </summary>
        </member>
        <member name="M:Kephas.Commands.Command.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Command"/> class.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="M:Kephas.Commands.Command.#ctor(System.String,Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Commands.Command"/> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="P:Kephas.Commands.Command.Name">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="P:Kephas.Commands.Command.Args">
            <summary>
            Gets the command arguments.
            </summary>
        </member>
        <member name="M:Kephas.Commands.Command.Parse(System.String)">
            <summary>
            Parses the command from the provided command line and returns it.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>The parsed command.</returns>
        </member>
        <member name="M:Kephas.Commands.Command.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Kephas.Commands.Command.ParseCore(System.String)">
            <summary>
            Parses the command line and returns the parts.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>The command name and arguments.</returns>
        </member>
        <member name="T:Kephas.Commands.CommandsExtensions">
            <summary>
            Extension methods for commands.
            </summary>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.AsArgs``1(Kephas.Dynamic.IExpando)">
            <summary>
            Converts the provided expando arguments to <see cref="T:Kephas.Commands.IArgs"/>.
            </summary>
            <typeparam name="TArgs">The arguments type.</typeparam>
            <param name="args">The expando arguments.</param>
            <returns>The same instance, if it is convertible to <see cref="T:Kephas.Commands.IArgs"/>, otherwise app args constructed on the provided <paramref name="args"/>.</returns>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.AsArgs(Kephas.Dynamic.IExpando)">
            <summary>
            Converts the provided expando arguments to <see cref="T:Kephas.Commands.IArgs"/>.
            </summary>
            <param name="args">The expando arguments.</param>
            <returns>The same instance, if it is convertible to <see cref="T:Kephas.Commands.IArgs"/>, otherwise app args constructed on the provided <paramref name="args"/>.</returns>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.AsArgs``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the provided expando arguments to <see cref="T:Kephas.Commands.IArgs"/>.
            </summary>
            <typeparam name="TArgs">The arguments type.</typeparam>
            <param name="args">The expando arguments.</param>
            <returns>The same instance, if it is convertible to <see cref="T:Kephas.Commands.IArgs"/>, otherwise app args constructed on the provided <paramref name="args"/>.</returns>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.AsArgs(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the provided expando arguments to <see cref="T:Kephas.Commands.IArgs"/>.
            </summary>
            <param name="args">The expando arguments.</param>
            <returns>The same instance, if it is convertible to <see cref="T:Kephas.Commands.IArgs"/>, otherwise app args constructed on the provided <paramref name="args"/>.</returns>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.ToCommandArgs(Kephas.Dynamic.IExpando)">
            <summary>
            Converts the app arguments list to a list of string arguments for use in command lines.
            </summary>
            <param name="arguments">The arguments as a dictionary.</param>
            <returns>A list of string arguments.</returns>
        </member>
        <member name="M:Kephas.Commands.CommandsExtensions.ToCommandArgs(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the app arguments list to a list of string arguments for use in command lines.
            </summary>
            <param name="arguments">The arguments as a dictionary.</param>
            <returns>A list of string arguments.</returns>
        </member>
        <member name="T:Kephas.Commands.IArgs">
            <summary>
            Interface for accessing arguments.
            </summary>
        </member>
        <member name="M:Kephas.Commands.IArgs.ToCommandArgs">
            <summary>
            Converts this app arguments list to a list of string arguments for use in command lines.
            </summary>
            <returns>A list of string arguments.</returns>
        </member>
        <member name="T:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute">
            <summary>
            Display attribute for types.
            </summary>
        </member>
        <member name="F:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.resourceType">
            <summary>
            The resource type.
            </summary>
        </member>
        <member name="P:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.ResourceType">
            <summary>
            Gets or sets the resource type.
            </summary>
            <value>
            The resource type.
            </value>
        </member>
        <member name="P:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.Prompt">
            <summary>
            Gets or sets the prompt.
            </summary>
            <value>
            The prompt.
            </value>
        </member>
        <member name="P:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.ShortName">
            <summary>
            Gets or sets the short name.
            </summary>
            <value>
            The short name.
            </value>
        </member>
        <member name="M:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.GetName">
            <summary>
            Gets the localized name.
            </summary>
            <returns>
            The localized name.
            </returns>
        </member>
        <member name="M:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.GetDescription">
            <summary>
            Gets the localized description.
            </summary>
            <returns>
            The localized description.
            </returns>
        </member>
        <member name="M:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.GetPrompt">
            <summary>
            Gets the localized prompt.
            </summary>
            <returns>
            The localized prompt.
            </returns>
        </member>
        <member name="M:Kephas.ComponentModel.DataAnnotations.DisplayInfoAttribute.GetShortName">
            <summary>
            Gets the localized short name.
            </summary>
            <returns>
            The localized short name.
            </returns>
        </member>
        <member name="T:Kephas.Composition.AttributedModel.CompositionConstructorAttribute">
            <summary>
            Specifies that a constructor should be used when constructing an attributed part.
            </summary>
            <remarks>
            By default, only a default parameter-less constructor, if available, is used to
                            construct an attributed part. Use this attribute to indicate that a specific constructor
                            should be used.
            </remarks>
        </member>
        <member name="T:Kephas.Composition.AttributedModel.ExcludeFromCompositionAttribute">
            <summary>
            Marks a class eligible as an application service implementation to be excluded from composition.
            </summary>
        </member>
        <member name="T:Kephas.Composition.CompositionException">
            <summary>
            Exception which occurs on composition errors.
            </summary>
        </member>
        <member name="M:Kephas.Composition.CompositionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.CompositionException"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Composition.CompositionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.CompositionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kephas.Composition.CompositionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.CompositionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Kephas.Composition.CompositionScopeNames">
            <summary>
            Provides the built-in scope names.
            </summary>
        </member>
        <member name="F:Kephas.Composition.CompositionScopeNames.Default">
            <summary>
            The default scope name.
            </summary>
        </member>
        <member name="T:Kephas.Composition.Configuration.CompositionSettings">
            <summary>
            Stores composition settings.
            </summary>
        </member>
        <member name="P:Kephas.Composition.Configuration.CompositionSettings.AssemblyFileNamePattern">
            <summary>
            Gets or sets the assembly file name pattern.
            </summary>
            <value>
            The assembly file name pattern.
            </value>
        </member>
        <member name="T:Kephas.Composition.Conventions.AttributedAppServiceInfoProvider">
            <summary>
            An attributed application service information provider.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.AttributedAppServiceInfoProvider.GetAppServiceInfos(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets an enumeration of application service information objects.
            </summary>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            An enumeration of application service information objects and their associated contract type.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.AttributedAppServiceInfoProvider.TryGetAppServiceInfo(System.Type)">
            <summary>
            Tries to get the <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/> for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            An <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/> or <c>null</c>, if the provided type is not a service contract.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.ConventionsBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Composition.Conventions.IConventionsBuilder"/>.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.ForInstance``1(Kephas.Composition.Conventions.IConventionsBuilder,``0)">
            <summary>
            Defines a registration for the specified type and its singleton instance.
            </summary>
            <typeparam name="TService">Type of the registered service.</typeparam>
            <param name="conventionsBuilder">The conventionsBuilder to act on.</param>
            <param name="instance">The singleton instance.</param>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.ForInstanceFactory``1(Kephas.Composition.Conventions.IConventionsBuilder,System.Func{Kephas.Composition.ICompositionContext,``0})">
            <summary>
            Defines a registration for the specified type and its instance factory.
            </summary>
            <typeparam name="TService">Type of the registered service.</typeparam>
            <param name="conventionsBuilder">The conventionsBuilder to act on.</param>
            <param name="factory">The instance factory.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartBuilder"/> to further configure the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.RegisterConventions(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Adds the conventions from the provided types implementing
            <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar" />.
            </summary>
            <param name="builder">The builder.</param>
            <param name="parts">The parts.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            The convention builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.RegisterConventionsFrom(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Adds the conventions from types implementing <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar" /> found in
            the provided assemblies.
            </summary>
            <param name="builder">The builder.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="parts">The parts.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            The convention builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.IsPartCandidate(System.Type)">
            <summary>
            Gets a value indicating whether the type is part candidate.
            </summary>
            <param name="potentialCandidate">The potential candidate type.</param>
            <returns>
            True if the type is a part candidate, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsBuilderExtensions.RegisterConventionsCore(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets the registration builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="parts">The convention types.</param>
            <param name="registrationContext">The registration context.</param>
            <returns>
            The registration builder.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.ConventionsTypeExtensions">
            <summary>
            Type extensions for composition conventions.
            </summary>
        </member>
        <member name="F:Kephas.Composition.Conventions.ConventionsTypeExtensions.ConventionRegistrarContractTypeInfo">
            <summary>
            Information describing the convention registrar contract type.
            </summary>
        </member>
        <member name="F:Kephas.Composition.Conventions.ConventionsTypeExtensions.AppServiceInfoProviderContractTypeInfo">
            <summary>
            Information describing the application service information provider contract type.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableConventionsRegistrarType(System.Type)">
            <summary>
            Indicates whether the provided type is an instantiable <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar"/>
            type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <returns>
            True if the type is an instantiable <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar"/> type, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableConventionsRegistrarType(System.Reflection.TypeInfo)">
            <summary>
            Indicates whether the provided type is an instantiable <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar"/>
            type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <returns>
            True if the type is an instantiable <see cref="T:Kephas.Composition.Conventions.IConventionsRegistrar"/> type, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableAppServiceInfoProviderType(System.Type)">
            <summary>
            Indicates whether the provided type is an instantiable <see cref="T:Kephas.Composition.Conventions.IAppServiceInfoProvider"/>
            type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <returns>
            True if the type is an instantiable <see cref="T:Kephas.Composition.Conventions.IAppServiceInfoProvider"/> type, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableAppServiceInfoProviderType(System.Reflection.TypeInfo)">
            <summary>
            Indicates whether the provided type is an instantiable <see cref="T:Kephas.Composition.Conventions.IAppServiceInfoProvider"/>
            type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <returns>
            True if the type is an instantiable <see cref="T:Kephas.Composition.Conventions.IAppServiceInfoProvider"/> type, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableConventionsType(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Indicates whether the provided type is an instantiable type implementing the provided
            contract type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <param name="conventionsContractType">Type of the conventions contract.</param>
            <returns>
            True if the type is an instantiable type implementing the provided contract type, false if
            not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.ConventionsTypeExtensions.IsInstantiableConventionsType(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            Indicates whether the provided type is an instantiable type implementing the provided
            contract type.
            </summary>
            <param name="conventionsType">The conventions type to act on.</param>
            <param name="conventionsContractType">Type of the conventions contract.</param>
            <returns>
            True if the type is an instantiable type implementing the provided contract type, false if
            not.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.IAppServiceInfoProvider">
            <summary>
            Interface for application service information provider.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IAppServiceInfoProvider.GetAppServiceInfos(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets an enumeration of application service information objects.
            </summary>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            An enumeration of application service information objects and their associated contract type.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.IConventionsBuilder">
            <summary>
            Contract for conventions builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsBuilder.ForTypesDerivedFrom(System.Type)">
            <summary>
            Define a rule that will apply to all types that derive from (or implement) the specified type.
            </summary>
            <param name="type">The type from which matching types derive.</param>
            <returns>A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder"/> that must be used to specify the rule.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsBuilder.ForTypesMatching(System.Predicate{System.Type})">
            <summary>
            Define a rule that will apply to all types that derive from (or implement) the specified type.
            </summary>
            <param name="typePredicate">The type predicate.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder" /> that must be used to specify the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsBuilder.ForType(System.Type)">
            <summary>
            Define a rule that will apply to the specified type.
            </summary>
            <param name="type">The type from which matching types derive.</param>
            <returns>A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder"/> that must be used to specify the rule.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsBuilder.ForInstance(System.Type,System.Object)">
            <summary>
            Defines a registration for the specified type and its singleton instance.
            </summary>
            <param name="type">The registered service type.</param>
            <param name="instance">The instance.</param>
            <returns>A <see cref="T:Kephas.Composition.Conventions.IPartBuilder"/> to further configure the rule.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsBuilder.ForInstanceFactory(System.Type,System.Func{Kephas.Composition.ICompositionContext,System.Object})">
            <summary>
            Defines a registration for the specified type and its instance factory.
            </summary>
            <param name="type">The registered service type.</param>
            <param name="factory">The service factory.</param>
            <returns>A <see cref="T:Kephas.Composition.Conventions.IPartBuilder"/> to further configure the rule.</returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.IConventionsRegistrar">
            <summary>
            Registrar for composition conventions.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IConventionsRegistrar.RegisterConventions(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Registers the conventions.
            </summary>
            <remarks>
            The candidate types provided may be changed, typically by adding new types.
            </remarks>
            <param name="builder">The registration builder.</param>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
        </member>
        <member name="T:Kephas.Composition.Conventions.IExportConventionsBuilder">
            <summary>
            Contract for export conventions builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IExportConventionsBuilder.AsContractType(System.Type)">
            <summary>
            Specify the contract type for the export.
            </summary>
            <param name="contractType">The contract type.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IExportConventionsBuilder.AddMetadata(System.String,System.Object)">
            <summary>
            Add export metadata to the export.
            </summary>
            <param name="name">The name of the metadata item.</param>
            <param name="value">The metadata value.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IExportConventionsBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
            <summary>
            Add export metadata to the export.
            </summary>
            <param name="name">The name of the metadata item.</param>
            <param name="getValueFromPartType">A function that calculates the metadata value based on the type.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.IImportConventionsBuilder">
            <summary>
            Conventions builder for imports.
            </summary>
        </member>
        <member name="T:Kephas.Composition.Conventions.IPartBuilder">
            <summary>
            Interface for part builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartBuilder.Singleton">
            <summary>
            Mark the part as being shared within the entire composition.
            </summary>
            <returns>A part builder allowing further configuration of the part.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartBuilder.Scoped">
            <summary>
            Mark the part as being shared within the scope.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartBuilder.AllowMultiple(System.Boolean)">
            <summary>
            Indicates that this service allows multiple registrations.
            </summary>
            <param name="value">True if multiple service registrations are allowed, false otherwise.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Conventions.IPartConventionsBuilder">
            <summary>
            Contract for part conventions builders.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.AsServiceType(System.Type)">
            <summary>
            Indicates the declared service type. Typically this is the same as the contract type, but
            this may get overwritten, for example when declaring generic type services for collecting
            metadata.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.Singleton">
            <summary>
            Mark the part as being shared within the entire composition.
            </summary>
            <returns>A part builder allowing further configuration of the part.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.Scoped">
            <summary>
            Mark the part as being shared within the scope.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.Export(System.Action{Kephas.Composition.Conventions.IExportConventionsBuilder})">
            <summary>
            Exports the part using the specified conventions builder.
            </summary>
            <param name="conventionsBuilder">The conventions builder.</param>
            <returns>A part builder allowing further configuration of the part.</returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.ExportInterface(System.Type,System.Action{System.Type,Kephas.Composition.Conventions.IExportConventionsBuilder})">
            <summary>
            Select the interface on the part type that will be exported.
            </summary>
            <param name="exportInterface">The interface to export.</param>
            <param name="exportConfiguration">The export configuration.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,Kephas.Composition.Conventions.IImportConventionsBuilder})">
            <summary>
            Select which of the available constructors will be used to instantiate the part.
            </summary>
            <param name="constructorSelector">Filter that selects a single constructor.</param><param name="importConfiguration">Action configuring the parameters of the selected constructor.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Conventions.IPartConventionsBuilder.AllowMultiple(System.Boolean)">
            <summary>
            Indicates that this service allows multiple registrations.
            </summary>
            <param name="value">True if multiple service registrations are allowed, false otherwise.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="T:Kephas.Composition.ExportFactories.Export`1">
            <summary>
            An export.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="F:Kephas.Composition.ExportFactories.Export`1.lazyValue">
            <summary>
            The lazy value.
            </summary>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.Export`1.#ctor(System.Func{System.Tuple{`0,System.Action}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactories.Export`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactories.Export`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:Kephas.Composition.ExportFactories.Export`1.Kephas#Composition#IExport#Value">
            <summary>
            Gets the exported value.
            </summary>
            <value>
            The exported value.
            </value>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.Export`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="T:Kephas.Composition.ExportFactories.Export`2">
            <summary>
            An export with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.Export`2.#ctor(System.Func{System.Tuple{`0,System.Action}},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactories.Export`2"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactories.Export`2.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactories.ExportFactory`1">
            <summary>
            An export factory.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="F:Kephas.Composition.ExportFactories.ExportFactory`1.factory">
            <summary>
            The factory.
            </summary>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactories.ExportFactory`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactories.ExportFactory`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.Kephas#Composition#IExportFactory{TService}#CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>
            A handle allowing the created part to be accessed then released.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>
            A handle allowing the created part to be accessed then released.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.Kephas#Composition#IExportFactory#CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>A handle allowing the created part to be accessed then released.</returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Composition.ExportFactories.ExportFactory`2">
            <summary>
            An export factory with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="F:Kephas.Composition.ExportFactories.ExportFactory`2.factory">
            <summary>
            The factory.
            </summary>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`2.#ctor(System.Func{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactories.ExportFactory`2"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactories.ExportFactory`2.Metadata">
            <summary>
            Gets or sets the metadata associated with the export.
            </summary>
            <value>
            The metadata associated with the export.
            </value>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`2.Kephas#Composition#IExportFactory{TService}#CreateExport">
            <summary>
            Creates the export.
            </summary>
            <returns>
            The new export.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`2.CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>
            A handle allowing the created part to be accessed then released.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`2.Kephas#Composition#IExportFactory#CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>A handle allowing the created part to be accessed then released.</returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactories.ExportFactory`2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`2">
            <summary>
            Service importing a collection of export factories with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`2.#ctor(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`2"/> class.
            </summary>
            <param name="exportFactories">The export factories.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`2.Kephas#Composition#ExportFactoryImporters#ICollectionExportFactoryImporter#ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <remarks>
            The invocation of ToList() allows importing of <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>, <seealso cref="T:System.Collections.Generic.ICollection`1"/>, <seealso cref="T:System.Collections.Generic.IList`1"/>, and <seealso cref="T:System.Collections.Generic.List`1"/>.
            </remarks>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`2.ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <value>
            The export factories.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`1">
            <summary>
            Service importing a collection of export factories.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`1.#ctor(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`1"/> class.
            </summary>
            <param name="exportFactories">The export factories.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`1.Kephas#Composition#ExportFactoryImporters#ICollectionExportFactoryImporter#ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <remarks>
            The invocation of ToList() allows importing of <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>, <seealso cref="T:System.Collections.Generic.ICollection`1"/>, <seealso cref="T:System.Collections.Generic.IList`1"/>, and <seealso cref="T:System.Collections.Generic.List`1"/>.
            </remarks>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.CollectionExportFactoryImporter`1.ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <value>
            The export factories.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`2">
            <summary>
            Service importing an export factory with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`2.#ctor(Kephas.Composition.IExportFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`2"/> class.
            </summary>
            <param name="exportFactory">The export factory.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`2.ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
            <value>
            The export factory.
            </value>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`2.Kephas#Composition#ExportFactoryImporters#IExportFactoryImporter#ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`1">
            <summary>
            Service importing an export factory.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`1.#ctor(Kephas.Composition.IExportFactory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`1"/> class.
            </summary>
            <param name="exportFactory">The export factory.</param>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`1.ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
            <value>
            The export factory.
            </value>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ExportFactoryImporter`1.Kephas#Composition#ExportFactoryImporters#IExportFactoryImporter#ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter">
            <summary>
            Interface for importers of a collection of export factories.
            </summary>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter.ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <value>
            The export factories.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter`1">
            <summary>
            Generic service contract for importers of a collection of export factories.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter`1.ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <value>
            The export factories.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter`2">
            <summary>
            Generic service contract for importers of a collection of export factories with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.ICollectionExportFactoryImporter`2.ExportFactories">
            <summary>
            Gets the export factories.
            </summary>
            <value>
            The export factories.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter">
            <summary>
            Interface for importers of an export factory.
            </summary>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter.ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
            <value>
            The export factory.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter`1">
            <summary>
            Generic service contract for importers of an export factory with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter`1.ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
            <value>
            The export factory.
            </value>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter`2">
            <summary>
            Generic service contract for importers of an export factory with metadata.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="P:Kephas.Composition.ExportFactoryImporters.IExportFactoryImporter`2.ExportFactory">
            <summary>
            Gets the export factory.
            </summary>
            <value>
            The export factory.
            </value>
        </member>
        <member name="T:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1">
            <summary>
            Base class for composition container builders.
            </summary>
            <typeparam name="TBuilder">The type of the builder.</typeparam>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.#ctor(Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.LogManager">
            <summary>
            Gets the log manager.
            </summary>
            <value>
            The log manager.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
            <value>
            The type loader.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.AppRuntime">
            <summary>
            Gets the application runtime.
            </summary>
            <value>
            The application runtime.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.ConventionsBuilder">
            <summary>
            Gets the conventions builder.
            </summary>
            <value>
            The conventions builder.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.CompositionParts">
            <summary>
            Gets the composition parts.
            </summary>
            <value>
            The composition parts.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.Registry">
            <summary>
            Gets the <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/> serviceRegistry.
            </summary>
            <value>
            The serviceRegistry.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.RegistrationContext">
            <summary>
            Gets the registration context.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithConventionAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds the assemblies containing the conventions.
            </summary>
            <param name="assemblies">The convention assemblies.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided assemblies are added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithConventionAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the assembly containing the conventions.
            </summary>
            <param name="assembly">The convention assembly.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided assembly is added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithConventions(Kephas.Composition.Conventions.IConventionsBuilder)">
            <summary>
            Sets the composition conventions.
            </summary>
            <param name="conventions">The conventions.</param>
            <returns>This builder.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds the assemblies containing the composition parts.
            </summary>
            <param name="assemblies">The composition assemblies.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided assemblies are added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the assembly containing the composition parts.
            </summary>
            <param name="assembly">The composition assembly.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided assembly is added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithParts(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the composition parts.
            </summary>
            <param name="parts">The parts.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided parts are added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithPart(System.Type)">
            <summary>
            Adds the composition parts.
            </summary>
            <param name="part">The composition part.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the provided part is added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithFactory``1(System.Func{``0},System.Boolean,System.Boolean)">
            <summary>
            Adds the factory export.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="factory">The factory.</param>
            <param name="isSingleton">If set to <c>true</c>, the factory returns a shared component, otherwise an instance component.</param>
            <param name="allowMultiple">Indicates whether multiple registrations are allowed.</param>
            <returns>
            This builder.
            </returns>
            <remarks>
            Can be used multiple times, the factories are added to the existing ones.
            </remarks>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithRegistration(Kephas.Services.Reflection.IAppServiceInfo[])">
            <summary>
            Adds the registrations.
            </summary>
            <param name="registrations">A variable-length parameters list containing registrations.</param>
            <returns>
            A TBuilder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WithConventionsRegistrar(Kephas.Composition.Conventions.IConventionsRegistrar)">
            <summary>
            Adds the export provider.
            </summary>
            <remarks>
            Can be used multiple times, the factories are added to the existing ones.
            </remarks>
            <param name="conventionsRegistrar">The conventions registrar.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.CreateContainer">
            <summary>
            Creates the container with the provided configuration asynchronously.
            </summary>
            <returns>A new container with the provided configuration.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.CreateConventionsBuilder">
            <summary>
            Factory method for creating the conventions builder.
            </summary>
            <returns>A newly created conventions builder.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.CreateContainerCore(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new composition container based on the provided conventions and assembly parts.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="parts">The parts candidating for composition.</param>
            <returns>
            A new composition container.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetCompositionAssemblies">
            <summary>
            Gets the composition assemblies.
            </summary>
            <returns>An enumeration of assemblies used for composition.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetConventionAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the convention assemblies.
            </summary>
            <param name="fallbackAssemblies">The fallback assemblies, used if no convention assemblies are provided.</param>
            <returns>An enumeration of assemblies used for conventions.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetConventions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Collections.Generic.IList{System.Type})">
            <summary>
            Gets the convention builder.
            </summary>
            <param name="assemblies">The assemblies containing the conventions.</param>
            <param name="parts">The parts.</param>
            <returns>
            The convention builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.AssertRequiredService``1(``0)">
            <summary>
            Asserts the required service is not missing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="service">The service.</param>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetSettings">
            <summary>
            Gets the composition settings.
            </summary>
            <returns>
            The composition settings.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetAssemblies(System.String)">
            <summary>
            Gets the assemblies.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The assemblies.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.WhereNotSystemAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Filters out the system assemblies from the provided assemblies.
            </summary>
            <param name="assemblies">The convention assemblies.</param>
            <returns>
            An enumerator that allows foreach to be used to process where not system assemblies in this
            collection.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.CreateContainerWithConventions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates the container with the registered conventions.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns>The composition container.</returns>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.GetCompositionParts(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the composition parts.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns>The composition parts.</returns>
        </member>
        <member name="T:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.AppServiceInfoRegistry">
            <summary>
            An application service information serviceRegistry.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.AppServiceInfoRegistry.Add(Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Adds an <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/>.
            </summary>
            <param name="appServiceInfo">The Application service Information to add.</param>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionContainerBuilderBase`1.AppServiceInfoRegistry.GetAppServiceInfos(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets an enumeration of application service information objects.
            </summary>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            An enumeration of application service information objects and their associated contract type.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Hosting.CompositionRegistrationContext">
            <summary>
            A composition container builder context.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Hosting.CompositionRegistrationContext.#ctor(Kephas.IAmbientServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Hosting.CompositionRegistrationContext"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionRegistrationContext.Parts">
            <summary>
            Gets or sets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionRegistrationContext.Registrars">
            <summary>
            Gets or sets the registrars.
            </summary>
            <value>
            The registrars.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.CompositionRegistrationContext.AppServiceInfoProviders">
            <summary>
            Gets or sets the application service information providers.
            </summary>
            <value>
            The application service information providers.
            </value>
        </member>
        <member name="T:Kephas.Composition.Hosting.ICompositionContainerBuilder">
            <summary>
            Contract for composition container builders.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Hosting.ICompositionContainerBuilder.CreateContainer">
            <summary>
            Creates the container with the provided configuration asynchronously.
            </summary>
            <returns>A new container with the provided configuration.</returns>
        </member>
        <member name="T:Kephas.Composition.Hosting.ICompositionRegistrationContext">
            <summary>
            Contract interface for composition container builder contexts.
            </summary>
        </member>
        <member name="P:Kephas.Composition.Hosting.ICompositionRegistrationContext.Parts">
            <summary>
            Gets or sets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.ICompositionRegistrationContext.Registrars">
            <summary>
            Gets or sets the registrars.
            </summary>
            <value>
            The registrars.
            </value>
        </member>
        <member name="P:Kephas.Composition.Hosting.ICompositionRegistrationContext.AppServiceInfoProviders">
            <summary>
            Gets or sets the application service information providers.
            </summary>
            <value>
            The application service information providers.
            </value>
        </member>
        <member name="T:Kephas.Composition.ICompositionContext">
            <summary>
            Public interface for the composition context.
            </summary>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.GetExport(System.Type,System.String)">
            <summary>
            Resolves the specified contract type.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceName">The service name.</param>
            <returns>An object implementing <paramref name="contractType"/>.</returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.GetExports(System.Type)">
            <summary>
            Resolves the specified contract type returning multiple instances.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <returns>An enumeration of objects implementing <paramref name="contractType"/>.</returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.GetExport``1(System.String)">
            <summary>
            Resolves the specified contract type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.GetExports``1">
            <summary>
            Resolves the specified contract type returning multiple instances.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <returns>
            An enumeration of objects implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.TryGetExport(System.Type,System.String)">
            <summary>
            Tries to resolve the specified contract type.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceName">The service name.</param>
            <returns>An object implementing <paramref name="contractType"/>, or <c>null</c> if a service with the provided contract was not found.</returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.TryGetExport``1(System.String)">
            <summary>
            Tries to resolve the specified contract type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <typeparamref name="T" />, or <c>null</c> if a service with the provided contract was not found.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ICompositionContext.CreateScopedContext">
            <summary>
            Creates a new scoped composition context.
            </summary>
            <returns>
            The new scoped context.
            </returns>
        </member>
        <member name="T:Kephas.Composition.CompositionContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Composition.ICompositionContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Kephas.Composition.CompositionContextExtensions"/> class.
            </summary>
        </member>
        <member name="P:Kephas.Composition.CompositionContextExtensions.GetExportFactory1Method">
            <summary>
            Gets the <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``1(Kephas.Composition.ICompositionContext)"/> method.
            </summary>
            <value>
            The <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``1(Kephas.Composition.ICompositionContext)"/> method.
            </value>
        </member>
        <member name="P:Kephas.Composition.CompositionContextExtensions.GetExportFactory2Method">
            <summary>
            Gets the <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``2(Kephas.Composition.ICompositionContext)"/> method.
            </summary>
            <value>
            The <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``2(Kephas.Composition.ICompositionContext)"/> method.
            </value>
        </member>
        <member name="P:Kephas.Composition.CompositionContextExtensions.GetExportFactories1Method">
            <summary>
            Gets the <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``1(Kephas.Composition.ICompositionContext)"/> method.
            </summary>
            <value>
            The <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``1(Kephas.Composition.ICompositionContext)"/> method.
            </value>
        </member>
        <member name="P:Kephas.Composition.CompositionContextExtensions.GetExportFactories2Method">
            <summary>
            Gets the <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``2(Kephas.Composition.ICompositionContext)"/> method.
            </summary>
            <value>
            The <see cref="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``2(Kephas.Composition.ICompositionContext)"/> method.
            </value>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetLogger(Kephas.Composition.ICompositionContext,System.String)">
            <summary>
            Gets the logger with the provided name.
            </summary>
            <param name="compositionContext">The composition context to act on.</param>
            <param name="loggerName">Name of the logger.</param>
            <returns>
            A logger for the provided name.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetLogger(Kephas.Composition.ICompositionContext,System.Type)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <param name="compositionContext">The composition context to act on.</param>
            <param name="type">The type.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetLogger``1(Kephas.Composition.ICompositionContext)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <typeparam name="T">The type for which a logger should be created.</typeparam>
            <param name="compositionContext">The composition context to act on.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.ToServiceProvider(Kephas.Composition.ICompositionContext)">
            <summary>
            Converts a <see cref="T:Kephas.Composition.ICompositionContext"/> to a <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="compositionContext">The composition context to act on.</param>
            <returns>
            The composition context as an <see cref="T:System.IServiceProvider"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.ToCompositionContext(System.IServiceProvider)">
            <summary>
            Converts a <see cref="T:System.IServiceProvider"/> to a <see cref="T:Kephas.Composition.ICompositionContext"/>.
            </summary>
            <param name="serviceProvider">The service provider to act on.</param>
            <returns>
            The service provider as an <see cref="T:Kephas.Composition.ICompositionContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``1(Kephas.Composition.ICompositionContext)">
            <summary>
            Resolves the specified contract type as an export factory.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory``2(Kephas.Composition.ICompositionContext)">
            <summary>
            Resolves the specified contract type as an export factory with metadata.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <typeparam name="TMetadata">The metadata type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``1(Kephas.Composition.ICompositionContext)">
            <summary>
            Resolves the specified contract type as an enumeration of export factories.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories``2(Kephas.Composition.ICompositionContext)">
            <summary>
            Resolves the specified contract type as an enumeration of export factories with metadata.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <typeparam name="TMetadata">The metadata type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.TryGetExportFactory``1(Kephas.Composition.ICompositionContext)">
            <summary>
            Tries to resolve the specified contract type as an export factory.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.TryGetExportFactory``2(Kephas.Composition.ICompositionContext)">
            <summary>
            Tries to esolve the specified contract type as an export factory with metadata.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <typeparam name="TMetadata">The metadata type.</typeparam>
            <param name="compositionContext">The compositionContext to act on.</param>
            <returns>
            An object implementing <typeparamref name="T" />, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory(Kephas.Composition.ICompositionContext,System.Type)">
            <summary>
            Resolves the specified contract type as an export factory.
            </summary>
            <param name="compositionContext">The compositionContext to act on.</param>
            <param name="contractType">Type of the contract.</param>
            <returns>
            A export factory of an object implementing <paramref name="contractType"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactory(Kephas.Composition.ICompositionContext,System.Type,System.Type)">
            <summary>
            Resolves the specified contract type as an export factory with metadata.
            </summary>
            <param name="compositionContext">The compositionContext to act on.</param>
            <param name="contractType">Type of the contract.</param>
            <param name="metadataType">Type of the metadata.</param>
            <returns>
            A export factory of an object implementing <paramref name="contractType"/> with <paramref name="metadataType"/> metadata.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories(Kephas.Composition.ICompositionContext,System.Type)">
            <summary>
            Resolves the specified contract type as an enumeration of export factories.
            </summary>
            <param name="compositionContext">The compositionContext to act on.</param>
            <param name="contractType">Type of the contract.</param>
            <returns>
            An enumeration of export factories of an object implementing <paramref name="contractType"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.CompositionContextExtensions.GetExportFactories(Kephas.Composition.ICompositionContext,System.Type,System.Type)">
            <summary>
            Resolves the specified contract type as an enumeration of export factories with metadata.
            </summary>
            <param name="compositionContext">The compositionContext to act on.</param>
            <param name="contractType">Type of the contract.</param>
            <param name="metadataType">Type of the metadata.</param>
            <returns>
            An enumeration of export factories of an object implementing <paramref name="contractType"/> with <paramref name="metadataType"/> metadata.
            </returns>
        </member>
        <member name="T:Kephas.Composition.IExport">
            <summary>
            Non-generic contract for a handle allowing the graph of parts associated with an exported instance
            to be released.
            </summary>
        </member>
        <member name="P:Kephas.Composition.IExport.Value">
            <summary>
            Gets the exported value.
            </summary>
            <value>
            The exported value.
            </value>
        </member>
        <member name="T:Kephas.Composition.IExport`1">
            <summary>
            Contract for a handle allowing the graph of parts associated with an exported instance
            to be released.
            </summary>
            <typeparam name="T">The contract type of the created parts.</typeparam>
        </member>
        <member name="P:Kephas.Composition.IExport`1.Value">
            <summary>
            Gets the exported value.
            </summary>
            <value>
            The exported value.
            </value>
        </member>
        <member name="T:Kephas.Composition.IExport`2">
            <summary>
            Contract for a handle allowing the graph of parts associated with an exported instance to be
            released.
            </summary>
            <typeparam name="T">The contract type of the created parts.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
        </member>
        <member name="P:Kephas.Composition.IExport`2.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="T:Kephas.Composition.IExportFactory">
            <summary>
            Non-generic contract used to import parts that wish to dynamically create instances of other parts.
            </summary>
        </member>
        <member name="M:Kephas.Composition.IExportFactory.CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>A handle allowing the created part to be accessed then released.</returns>
        </member>
        <member name="T:Kephas.Composition.IExportFactory`1">
            <summary>
            Contract used to import parts that wish to dynamically create instances of other parts.
            </summary>
            <typeparam name="T">The contract type of the created parts.</typeparam>
        </member>
        <member name="M:Kephas.Composition.IExportFactory`1.CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>A handle allowing the created part to be accessed then released.</returns>
        </member>
        <member name="T:Kephas.Composition.IExportFactory`2">
            <summary>
            A contract for an export factory that provides metadata describing the created exports.
            </summary>
            <typeparam name="T">The contract type being created.</typeparam>
            <typeparam name="TMetadata">The metadata required from the export.</typeparam>
        </member>
        <member name="P:Kephas.Composition.IExportFactory`2.Metadata">
            <summary>
            Gets the metadata associated with the export.
            </summary>
            <value>
            The metadata associated with the export.
            </value>
        </member>
        <member name="M:Kephas.Composition.IExportFactory`2.CreateExport">
            <summary>
            Create an instance of the exported part.
            </summary>
            <returns>A handle allowing the created part to be accessed then released.</returns>
        </member>
        <member name="T:Kephas.Composition.ExportFactoryExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Composition.IExportFactory`1"/>.
            </summary>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryExtensions.CreateExportedValue``1(Kephas.Composition.IExportFactory{``0})">
            <summary>
            Convenience method that creates the exported value.
            </summary>
            <typeparam name="T">The exported value type.</typeparam>
            <param name="exportFactory">The export factory.</param>
            <returns>
            The exported value.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryExtensions.CreateInitializedValue``1(Kephas.Composition.IExportFactory{``0},Kephas.Services.IContext)">
            <summary>
            Convenience method that creates the exported value and initializes it.
            </summary>
            <typeparam name="T">The exported value type.</typeparam>
            <param name="exportFactory">The export factory.</param>
            <param name="context">The context.</param>
            <returns>
            The exported value.
            </returns>
        </member>
        <member name="M:Kephas.Composition.ExportFactoryExtensions.CreateInitializedValueAsync``1(Kephas.Composition.IExportFactory{``0},Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Convenience method that creates the exported value and initializes it asynchronously.
            </summary>
            <typeparam name="T">The exported value type.</typeparam>
            <param name="exportFactory">The export factory.</param>
            <param name="context">The context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The exported value.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Internal.CompositionContextAdapter">
            <summary>
            A composition context adapter.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Internal.CompositionContextAdapter"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.GetExport(System.Type,System.String)">
            <summary>
            Resolves the specified contract type.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <paramref name="contractType"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.GetExports(System.Type)">
            <summary>
            Resolves the specified contract type returning multiple instances.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <returns>
            An enumeration of objects implementing <paramref name="contractType"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.GetExport``1(System.String)">
            <summary>
            Resolves the specified contract type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.GetExports``1">
            <summary>
            Resolves the specified contract type returning multiple instances.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <returns>
            An enumeration of objects implementing <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.TryGetExport(System.Type,System.String)">
            <summary>
            Tries to resolve the specified contract type.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <paramref name="contractType"/>, or <c>null</c> if a service with the
            provided contract was not found.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.TryGetExport``1(System.String)">
            <summary>
            Tries to resolve the specified contract type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="serviceName">The service name.</param>
            <returns>
            An object implementing <typeparamref name="T" />, or <c>null</c> if a service with the
            provided contract was not found.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.Kephas#Composition#ICompositionContext#CreateScopedContext">
            <summary>
            Creates a new scoped composition context.
            </summary>
            <returns>
            The new scoped context.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Internal.CompositionContextAdapter.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="T:Kephas.Composition.Internal.ServiceProviderAdapter">
            <summary>
            Adapter for <see cref="T:System.IServiceProvider"/> based on a composition context.
            </summary>
        </member>
        <member name="F:Kephas.Composition.Internal.ServiceProviderAdapter.compositionContext">
            <summary>
            Context for the composition.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Internal.ServiceProviderAdapter.#ctor(Kephas.Composition.ICompositionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Internal.ServiceProviderAdapter"/>
            class.
            </summary>
            <param name="compositionContext">Context for the composition.</param>
        </member>
        <member name="M:Kephas.Composition.Internal.ServiceProviderAdapter.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service
            object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder">
            <summary>
            A lightweight conventions builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.#ctor(Kephas.IAmbientServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.ForInstance(System.Type,System.Object)">
            <summary>
            Defines a registration for the specified type and its singleton instance.
            </summary>
            <param name="type">The registered service type.</param>
            <param name="instance">The instance.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartBuilder"/> to further configure the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.ForInstanceFactory(System.Type,System.Func{Kephas.Composition.ICompositionContext,System.Object})">
            <summary>
            Defines a registration for the specified type and its instance factory.
            </summary>
            <param name="type">The registered service type.</param>
            <param name="factory">The service factory.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartBuilder"/> to further configure the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.ForType(System.Type)">
            <summary>
            Define a rule that will apply to the specified type.
            </summary>
            <param name="type">The type from which matching types derive.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder"/> that must be used to specify the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.ForTypesDerivedFrom(System.Type)">
            <summary>
            Define a rule that will apply to all types that derive from (or implement) the specified type.
            </summary>
            <param name="type">The type from which matching types derive.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder"/> that must be used to specify the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.ForTypesMatching(System.Predicate{System.Type})">
            <summary>
            Define a rule that will apply to all types that derive from (or implement) the specified type.
            </summary>
            <param name="typePredicate">The type predicate.</param>
            <returns>
            A <see cref="T:Kephas.Composition.Conventions.IPartConventionsBuilder" /> that must be used to specify the rule.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteConventionsBuilder.Build(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Builds the container using the given parts.
            </summary>
            <param name="parts">The parts.</param>
        </member>
        <member name="T:Kephas.Composition.Lite.Conventions.LitePartBuilder">
            <summary>
            A lightweight part builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartBuilder.#ctor(Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Conventions.LitePartBuilder"/> class.
            </summary>
            <param name="descriptorBuilder">The descriptor builder.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartBuilder.Singleton">
            <summary>
            Mark the part as being shared within the entire composition.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartBuilder.Scoped">
            <summary>
            Mark the part as being shared within the scope.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartBuilder.AllowMultiple(System.Boolean)">
            <summary>
            Indicates that this service allows multiple registrations.
            </summary>
            <param name="value">True if multiple service registrations are allowed, false otherwise.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder">
            <summary>
            A lightweight part conventions builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.#ctor(Kephas.Logging.ILogManager,Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder"/> class.
            </summary>
            <param name="logManager">Manager for log.</param>
            <param name="descriptorBuilder">The descriptor builder.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.AsServiceType(System.Type)">
            <summary>
            Indicates the declared service type. Typically this is the same as the contract type, but
            this may get overwritten, for example when declaring generic type services for collecting
            metadata.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.Singleton">
            <summary>
            Mark the part as being shared within the entire composition.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.Scoped">
            <summary>
            Mark the part as being shared within the scope.
            </summary>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.Export(System.Action{Kephas.Composition.Conventions.IExportConventionsBuilder})">
            <summary>
            Exports the part using the specified conventions builder.
            </summary>
            <param name="conventionsBuilder">Optional. The conventions builder.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.ExportInterface(System.Type,System.Action{System.Type,Kephas.Composition.Conventions.IExportConventionsBuilder})">
            <summary>
            Select the interface on the part type that will be exported.
            </summary>
            <param name="exportInterface">The interface to export.</param>
            <param name="exportConfiguration">Optional. The export configuration.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.SelectConstructor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo},System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,Kephas.Composition.Conventions.IImportConventionsBuilder})">
            <summary>
            Select which of the available constructors will be used to instantiate the part.
            </summary>
            <param name="constructorSelector">Filter that selects a single constructor.</param>
            <param name="importConfiguration">Optional. Action configuring the parameters of the selected
                                              constructor.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LitePartConventionsBuilder.AllowMultiple(System.Boolean)">
            <summary>
            Indicates that this service allows multiple registrations.
            </summary>
            <param name="value">True if multiple service registrations are allowed, false otherwise.</param>
            <returns>
            A part builder allowing further configuration of the part.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder">
            <summary>
            A lightweight registration builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.#ctor(Kephas.IAmbientServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ContractType">
            <summary>
            Gets or sets the type of the contract.
            </summary>
            <value>
            The type of the contract.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.Instance">
            <summary>
            Gets or sets the service instance.
            </summary>
            <value>
            The service instance.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.Factory">
            <summary>
            Gets or sets the factory.
            </summary>
            <value>
            A function delegate that yields an object.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ImplementationType">
            <summary>
            Gets or sets the type of the implementation.
            </summary>
            <value>
            The type of the implementation.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ImplementationTypePredicate">
            <summary>
            Gets or sets the implementation type predicate.
            </summary>
            <value>
            The implementation type predicate.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>
            The lifetime.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ExportConfiguration">
            <summary>
            Gets or sets the export configuration.
            </summary>
            <value>
            The export configuration.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether we allow multiple.
            </summary>
            <value>
            True if allow multiple, false if not.
            </value>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.AddMetadata(System.String,System.Object)">
            <summary>
            Add export metadata to the export.
            </summary>
            <param name="name">The name of the metadata item.</param>
            <param name="value">The metadata value.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
            <summary>
            Add export metadata to the export.
            </summary>
            <param name="name">The name of the metadata item.</param>
            <param name="getValueFromPartType">A function that calculates the metadata value based on
                                               the type.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.AsContractType(System.Type)">
            <summary>
            Specify the contract type for the export.
            </summary>
            <param name="contractType">The contract type.</param>
            <returns>
            An export builder allowing further configuration.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Conventions.LiteRegistrationBuilder.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder">
            <summary>
            A lightweight composition container builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder.#ctor(Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder.CreateContainerCore(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new composition container based on the provided conventions and assembly parts.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="parts">The parts candidating for composition.</param>
            <returns>
            A new composition container.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Hosting.LiteCompositionContainerBuilder.CreateConventionsBuilder">
            <summary>
            Factory method for creating the conventions builder.
            </summary>
            <returns>
            A newly created conventions builder.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.EnumerableServiceSource">
            <summary>
            An enumerable service source.
            </summary>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.IServiceInfo">
            <summary>
            Interface for service information.
            </summary>
        </member>
        <member name="P:Kephas.Composition.Lite.Internal.IServiceInfo.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Internal.IServiceInfo.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceInfo.MakeGenericServiceInfo(Kephas.IAmbientServices,System.Type[])">
            <summary>
            Makes a generic service information with closed generic types.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="genericArgs">The generic arguments.</param>
            <returns>
            An IServiceInfo.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceInfo.GetService(Kephas.IAmbientServices)">
            <summary>
            Gets a service.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            The service.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.IServiceRegistry">
            <summary>
            Interface for service serviceRegistry.
            </summary>
        </member>
        <member name="P:Kephas.Composition.Lite.Internal.IServiceRegistry.Sources">
            <summary>
            Gets the registration sources.
            </summary>
            <value>
            The  registration sources.
            </value>
        </member>
        <member name="P:Kephas.Composition.Lite.Internal.IServiceRegistry.Item(System.Type)">
            <summary>
            Indexer to get items within this collection using array index syntax.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <returns>
            The indexed item.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceRegistry.TryGet(System.Type,Kephas.Composition.Lite.Internal.IServiceInfo@)">
            <summary>
            Attempts to get value from the given data.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInfo">[out] Information describing the service.</param>
            <returns>
            True if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceRegistry.GetOrRegister(System.Type,System.Func{System.Type,Kephas.Composition.Lite.Internal.IServiceInfo})">
            <summary>
            Gets or registers a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInfoGetter">The service info getter.</param>
            <returns>
            The existing or the registered service info.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceRegistry.IsRegistered(System.Type)">
            <summary>
            Gets a value indicating whether the service with the provided contract is registered.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            <c>true</c> if the service is registered, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceRegistry.RegisterService(Kephas.Composition.Lite.Internal.IServiceInfo)">
            <summary>
            Registers the service described by serviceInfo.
            </summary>
            <param name="serviceInfo">Information describing the service.</param>
            <returns>
            This service serviceRegistry.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceRegistry.RegisterSource(Kephas.Composition.Lite.Internal.IServiceSource)">
            <summary>
            Registers the source described by serviceSource.
            </summary>
            <param name="serviceSource">The service source.</param>
            <returns>
            This service serviceRegistry.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.IServiceSource">
            <summary>
            Interface for service source.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceSource.IsMatch(System.Type)">
            <summary>
            Query if the contract type matches the source.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <returns>
            True if match, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceSource.GetService(Kephas.IAmbientServices,System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="parent">The parent.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The service.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.IServiceSource.GetServiceDescriptors(Kephas.IAmbientServices,System.Type)">
            <summary>
            Gets the service descriptors.
            </summary>
            <param name="parent">The parent.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            An enumerator that allows foreach to be used to process the service descriptors in this
            collection.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.ListServiceSource">
            <summary>
            A list service source.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.MultiServiceInfo.#ctor(Kephas.Composition.Lite.Internal.ServiceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.MultiServiceInfo"/> class.
            </summary>
            <param name="serviceInfo">Information describing the service.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.MultiServiceInfo.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.MultiServiceInfo"/> class.
            This registration is for the case of multiple services without any implementation.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.MultiServiceInfo.#ctor(System.Type,System.Type,System.Collections.Generic.IEnumerable{Kephas.Composition.Lite.Internal.ServiceInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.MultiServiceInfo"/> class.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInfos">The service infos.</param>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.ResolverEngine">
            <summary>
            A resolver engine.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ResolverEngine.#ctor(Kephas.IAmbientServices,Kephas.Composition.Lite.Internal.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.ResolverEngine"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="registry">The serviceRegistry.</param>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.ServiceInfo">
            <summary>
            Information about the service.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceInfo.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.ServiceInfo"/> class.
            </summary>
            <param name="contractType">Type of the contract.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceInfo.#ctor(Kephas.IAmbientServices,System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.ServiceInfo"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="contractType">Type of the contract.</param>
            <param name="instanceType">Type of the instance.</param>
            <param name="isSingleton">True if is singleton, false if not.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceInfo.#ctor(Kephas.IAmbientServices,System.Type,System.Func{Kephas.Composition.ICompositionContext,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.Internal.ServiceInfo"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="contractType">Type of the contract.</param>
            <param name="serviceFactory">The service factory.</param>
            <param name="isSingleton">True if is singleton, false if not.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceInfo.MakeGenericServiceInfo(Kephas.IAmbientServices,System.Type[])">
            <summary>
            Makes a generic service information with closed generic types.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            <param name="ambientServices">The ambient services.</param>
            <param name="genericArgs">The generic arguments.</param>
            <returns>
            An IServiceInfo.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.Internal.ServiceRegistry">
            <summary>
            A service serviceRegistry.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.IsRegistered(System.Type)">
            <summary>
            Gets a value indicating whether the service with the provided contract is registered.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            <c>true</c> if the service is registered, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.RegisterService(Kephas.Composition.Lite.Internal.IServiceInfo)">
            <summary>
            Registers the service described by serviceInfo.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="serviceInfo">Information describing the service.</param>
            <returns>
            This service serviceRegistry.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.GetOrRegister(System.Type,System.Func{System.Type,Kephas.Composition.Lite.Internal.IServiceInfo})">
            <summary>
            Gets or registers a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInfoGetter">The service info getter.</param>
            <returns>
            The existing or the registered service info.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.Internal.ServiceRegistry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="T:Kephas.Composition.Lite.IServiceRegistrationBuilder">
            <summary>
            Interface for service registration builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.Keyed(System.Type)">
            <summary>
            Sets the registration key to a super type of the service type.
            </summary>
            <remarks>
            The registration type is the key to find the service.
            The registered service type is a subtype providing additional information, typically metadata.
            </remarks>
            <param name="contractType">Type of the contract.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.AsSingleton">
            <summary>
            Registers the service as a singleton.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.AsTransient">
            <summary>
            Registers the service as transient.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.AllowMultiple">
            <summary>
            Registers the service with multiple instances.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.WithInstance(System.Object)">
            <summary>
            Registers the service with the provided instance.
            </summary>
            <param name="instance">The service instance.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.WithFactory(System.Func{Kephas.Composition.ICompositionContext,System.Object})">
            <summary>
            Registers the service with the provided factory.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.WithType(System.Type)">
            <summary>
            Registers the service with the provided implementation type.
            </summary>
            <param name="implementationType">The implementation type.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.AddMetadata(System.String,System.Object)">
            <summary>
            Adds metadata in form of (key, value) pairs.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.IServiceRegistrationBuilder.ExternallyOwned(System.Boolean)">
            <summary>
            Indicates whether the created instances are disposed by an external owner.
            </summary>
            <param name="value">True if externally owned, false otherwise.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.ServiceRegistrationBuilder">
            <summary>
            A service registration builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.#ctor(Kephas.IAmbientServices,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Lite.ServiceRegistrationBuilder"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.Build">
            <summary>
            Builds the configured information into a <see cref="T:Kephas.Composition.Lite.Internal.IServiceInfo"/> and returns it.
            </summary>
            <returns>
            An <see cref="T:Kephas.Composition.Lite.Internal.IServiceInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.Keyed(System.Type)">
            <summary>
            Sets the registration key to a super type of the service type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="contractType">Type of the contract.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.AsSingleton">
            <summary>
            Registers the service as a singleton.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.AsTransient">
            <summary>
            Registers the service as transient.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.AllowMultiple">
            <summary>
            Registers the service with multiple instances.
            </summary>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.WithInstance(System.Object)">
            <summary>
            Registers the service with the provided instance.
            </summary>
            <param name="instance">The service instance.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.WithFactory(System.Func{Kephas.Composition.ICompositionContext,System.Object})">
            <summary>
            Registers the service with the provided factory.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.WithType(System.Type)">
            <summary>
            Registers the service with the provided implementation type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="implementationType">The implementation type.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.AddMetadata(System.String,System.Object)">
            <summary>
            Adds metadata in form of (key, value) pairs.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilder.ExternallyOwned(System.Boolean)">
            <summary>
            Indicates whether the created instances are disposed by an external owner.
            </summary>
            <param name="value">True if externally owned, false otherwise.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Lite.ServiceRegistrationBuilderExtensions">
            <summary>
            Extensions for the service registration builder.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilderExtensions.WithFactory(Kephas.Composition.Lite.IServiceRegistrationBuilder,System.Func{System.Object})">
            <summary>
            Registers the service with the provided factory.
            </summary>
            <param name="builder">The builder to act on.</param>
            <param name="factory">The factory.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilderExtensions.WithType``1(Kephas.Composition.Lite.IServiceRegistrationBuilder)">
            <summary>
            Registers the service with the provided implementation type.
            </summary>
            <typeparam name="TImplementation">Type of the implementation.</typeparam>
            <param name="builder">The builder to act on.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Composition.Lite.ServiceRegistrationBuilderExtensions.Keyed``1(Kephas.Composition.Lite.IServiceRegistrationBuilder)">
            <summary>
            Sets the registration key to a super type of the service type.
            </summary>
            <remarks>
            The registration type is the key to find the service. The registered service type is a
            subtype providing additional information, typically metadata.
            </remarks>
            <typeparam name="TContract">The type of registration.</typeparam>
            <param name="builder">The builder to act on.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="T:Kephas.Composition.Metadata.ExportMetadataBase">
            <summary>
            Base class for export metadata.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Metadata.ExportMetadataBase.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Composition.Metadata.ExportMetadataBase"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Kephas.Composition.Metadata.IMetadataValue">
            <summary>
            Non-typed contract for metadata values.
            </summary>
        </member>
        <member name="P:Kephas.Composition.Metadata.IMetadataValue.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Composition.Metadata.IMetadataValue`1">
            <summary>
            Contract for metadata values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Kephas.Composition.Metadata.IMetadataValue`1.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Composition.Metadata.MetadataExtensions">
            <summary>
            Helper extension methods for metadata.
            </summary>
        </member>
        <member name="M:Kephas.Composition.Metadata.MetadataExtensions.ExtractMetadataValue``2(System.Type,System.Func{``0,``1},``1)">
            <summary>
            Extracts the metadata value from the attribute with the provided type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="type">The type.</param>
            <param name="valueExtractor">The value extractor.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="M:Kephas.Composition.Metadata.MetadataExtensions.ExtractMetadataValue``2(System.Type,``1)">
            <summary>
            Extracts the metadata value from the attribute with the provided type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="type">The type.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="T:Kephas.Configuration.Configuration`1">
            <summary>
            Provides the configuration for the settings type indicated as the generic parameter type.
            </summary>
            <remarks>
            Being an <see cref="T:Kephas.Dynamic.Expando"/>, various values may be added at runtime to this configuration.
            </remarks>
            <typeparam name="TSettings">Type of the settings.</typeparam>
        </member>
        <member name="M:Kephas.Configuration.Configuration`1.#ctor(Kephas.Configuration.Providers.ISettingsProviderSelector,Kephas.Application.IAppRuntime,System.Lazy{Kephas.Interaction.IEventHub},Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Configuration`1"/> class.
            </summary>
            <param name="settingsProviderSelector">The settings provider selector.</param>
            <param name="appRuntime">Gets the application runtime.</param>
            <param name="lazyEventHub">The lazy event hub.</param>
        </member>
        <member name="P:Kephas.Configuration.Configuration`1.Settings">
            <summary>
            Gets the settings associated to this configuration.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Kephas.Configuration.Configuration`1.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Configuration`1.UpdateSettingsAsync(`0,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Updates the settings in the configuration store.
            </summary>
            <param name="settings">Optional. The settings to be updated. If no settings are provided, the current settings are used for the update.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation yielding an operation result
            with a true value in case of successful update and a false value if the settings could not be updated.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Configuration`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kephas.Configuration.ConfigurationStoreBase">
            <summary>
            Abstract base class for configuration stores.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.#ctor(Kephas.Dynamic.IIndexable,Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.ConfigurationStoreBase"/> class.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="P:Kephas.Configuration.ConfigurationStoreBase.InternalStore">
            <summary>
            Gets the internal store.
            </summary>
            <value>
            The internal store.
            </value>
        </member>
        <member name="P:Kephas.Configuration.ConfigurationStoreBase.TypeRegistry">
            <summary>
            Gets the type registry.
            </summary>
        </member>
        <member name="P:Kephas.Configuration.ConfigurationStoreBase.Item(System.String)">
            <summary>
            Indexer to get or set items within this collection using array index syntax.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The indexed item.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.Configure``1(System.Action{``0})">
            <summary>
            Configures the settings.
            </summary>
            <typeparam name="TSettings">Type of the settings.</typeparam>
            <param name="optionsConfig">The options configuration.</param>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.TryGetSettings(System.Type)">
            <summary>
            Tries to get the indicated settings.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The required settings or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.UpdateSettings(System.Object)">
            <summary>
            Updates the settings.
            </summary>
            <param name="settings">The settings to be updated.</param>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.TryGetOrAddSettings(System.Type,System.Func{System.Object})">
            <summary>
            Tries to get the indicated settings and, if not found, add a new instance.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <param name="ctor">The constructor used to create the settings, if not found.</param>
            <returns>
            The required settings or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.TryAddOrUpdateSettings(System.Type,System.Object)">
            <summary>
            Tries to get the indicated settings and, if not found, add a new instance.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <param name="settings">The settings.</param>
            <returns>
            True if the add or update was successful, false otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.CreateSettings(System.Type)">
            <summary>
            Creates the settings of the provided type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The new settings.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.GetValue(System.String)">
            <summary>
            Gets the aggregated value.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The aggregated value.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.ConfigurationStoreBase.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets a flattened value, indicating whether to synchronize the settings map.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="syncSettingsMap">True to synchronise the settings map.</param>
        </member>
        <member name="T:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior">
            <summary>
            Core configuration application lifecycle behavior.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior.#ctor(Kephas.Configuration.IConfiguration{Kephas.CoreSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior"/> class.
            </summary>
            <param name="coreConfiguration">The core configuration.</param>
        </member>
        <member name="M:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior.BeforeAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior.AfterAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior.BeforeAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.CoreConfigurationAppLifecycleBehavior.AfterAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.DefaultConfigurationStore">
            <summary>
            A default configuration store.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.DefaultConfigurationStore.#ctor(Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.DefaultConfigurationStore"/> class.
            </summary>
            <param name="typeRegistry">The type registry.</param>
        </member>
        <member name="T:Kephas.Configuration.IConfiguration`1">
            <summary>
            Singleton service contract for getting.
            </summary>
            <typeparam name="TSettings">Type of the settings.</typeparam>
        </member>
        <member name="P:Kephas.Configuration.IConfiguration`1.Settings">
            <summary>
            Gets the settings associated to this configuration.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:Kephas.Configuration.IConfiguration`1.UpdateSettingsAsync(`0,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Updates the settings in the configuration store.
            </summary>
            <param name="settings">Optional. The settings to be updated. If no settings are provided, the current settings are used for the update.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation yielding an operation result
            with a true value in case of successful update and a false value if the settings could not be updated.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.IConfigurationStore">
            <summary>
            Contract interface for the configuration store.
            </summary>
            <remarks>
            The configuration store is used to store configuration values based on keys.
            </remarks>
        </member>
        <member name="M:Kephas.Configuration.IConfigurationStore.Configure``1(System.Action{``0})">
            <summary>
            Configures the settings.
            </summary>
            <typeparam name="TSettings">Type of the settings.</typeparam>
            <param name="optionsConfig">The options configuration.</param>
        </member>
        <member name="M:Kephas.Configuration.IConfigurationStore.TryGetSettings(System.Type)">
            <summary>
            Tries to get the indicated settings.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The required settings or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.IConfigurationStore.UpdateSettings(System.Object)">
            <summary>
            Updates the settings.
            </summary>
            <param name="settings">The settings to be updated.</param>
        </member>
        <member name="T:Kephas.Configuration.Interaction.ConfigurationChangedSignal">
            <summary>
            Signal for configuration change.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Interaction.ConfigurationChangedSignal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Interaction.ConfigurationChangedSignal"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Interaction.ConfigurationChangedSignal.#ctor(System.String,Kephas.ExceptionHandling.SeverityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Interaction.ConfigurationChangedSignal"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="severity">Optional. The severity.</param>
        </member>
        <member name="P:Kephas.Configuration.Interaction.ConfigurationChangedSignal.SettingsType">
            <summary>
            Gets or sets the settings type.
            </summary>
        </member>
        <member name="P:Kephas.Configuration.Interaction.ConfigurationChangedSignal.SourceAppInstanceId">
            <summary>
            Gets or sets the app instance ID which is source for the change.
            </summary>
        </member>
        <member name="T:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata">
            <summary>
            A settings provider metadata.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata"/> class.
            </summary>
            <param name="settingsType">The type of the settings.</param>
            <param name="processingPriority">Optional. The processing priority.</param>
            <param name="overridePriority">Optional. The override priority.</param>
        </member>
        <member name="P:Kephas.Configuration.Providers.Composition.SettingsProviderMetadata.SettingsType">
            <summary>
            Gets the type of the settings.
            </summary>
            <value>
            The type of the settings.
            </value>
        </member>
        <member name="T:Kephas.Configuration.Providers.ConfigurationStoreSettingsProvider">
            <summary>
            A configuration store settings provider.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.ConfigurationStoreSettingsProvider.#ctor(Kephas.Configuration.IConfigurationStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.ConfigurationStoreSettingsProvider"/> class.
            </summary>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:Kephas.Configuration.Providers.ConfigurationStoreSettingsProvider.GetSettings(System.Type)">
            <summary>
            Gets the settings with the provided type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The settings.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.ConfigurationStoreSettingsProvider.UpdateSettingsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the settings asynchronously.
            </summary>
            <param name="settings">The settings to be updated.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.DefaultSettingsProviderSelector">
            <summary>
            A default settings provider selector.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.DefaultSettingsProviderSelector.#ctor(System.Collections.Generic.ICollection{Kephas.Composition.IExportFactory{Kephas.Configuration.Providers.ISettingsProvider,Kephas.Configuration.Providers.Composition.SettingsProviderMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.DefaultSettingsProviderSelector"/> class.
            </summary>
            <param name="providerFactories">The provider factories.</param>
        </member>
        <member name="M:Kephas.Configuration.Providers.DefaultSettingsProviderSelector.TryGetProviders(System.Type)">
            <summary>
            Gets the provider handling a specific settings type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The provider.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.DefaultSettingsProviderSelector.ComputeConfigurationProviders(System.Type)">
            <summary>
            Calculates the settings providers.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The calculated settings provider.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.FileSettingsProvider">
            <summary>
            A file settings provider.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.#ctor(Kephas.Application.IAppRuntime,Kephas.Serialization.ISerializationService,System.Collections.Generic.ICollection{System.Lazy{Kephas.Net.Mime.IMediaType,Kephas.Net.Mime.Composition.MediaTypeMetadata}},Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.FileSettingsProvider"/> class.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <param name="serializationService">The serialization service.</param>
            <param name="mediaTypes">List of supported media types.</param>
            <param name="logManager">Optional. Manager for log.</param>
        </member>
        <member name="P:Kephas.Configuration.Providers.FileSettingsProvider.AppRuntime">
            <summary>
            Gets the application runtime.
            </summary>
            <value>
            The application runtime.
            </value>
        </member>
        <member name="P:Kephas.Configuration.Providers.FileSettingsProvider.SerializationService">
            <summary>
            Gets the serialization service.
            </summary>
            <value>
            The serialization service.
            </value>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.GetSettings(System.Type)">
            <summary>
            Gets the settings with the provided type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>The settings.</returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.UpdateSettingsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the settings asynchronously.
            </summary>
            <param name="settings">The settings to be updated.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.GetSettingsFileInfo(System.Type)">
            <summary>
            Gets the settings file information.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The settings file path.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.GetProbingFolders">
            <summary>
            Gets the probing folders for configuration files.
            </summary>
            <returns>
            An enumerator that allows foreach to be used to process the probing folders in this
            collection.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.FileSettingsProvider.TryGetFilePath(System.String,System.String)">
            <summary>
            Try to get the file path under a specified root location.
            </summary>
            <remarks>
            This method will search also in the plugin folders.
            </remarks>
            <param name="rootLocation">The root location.</param>
            <param name="fileName">Filename of the file.</param>
            <returns>
            The file path.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.ISettingsProvider">
            <summary>
            Interface for configuration provider.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.ISettingsProvider.GetSettings(System.Type)">
            <summary>
            Gets the settings with the provided type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            The settings.
            </returns>
        </member>
        <member name="M:Kephas.Configuration.Providers.ISettingsProvider.UpdateSettingsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Updates the settings asynchronously.
            </summary>
            <param name="settings">The settings to be updated.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.ConfigurationProviderExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Configuration.Providers.ISettingsProvider"/>.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.ConfigurationProviderExtensions.GetSettings``1(Kephas.Configuration.Providers.ISettingsProvider)">
            <summary>
            Gets the settings with the provided type.
            </summary>
            <typeparam name="T">Type of the settings.</typeparam>
            <param name="configurationProvider">The configurationProvider to act on.</param>
            <returns>
            The settings.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.ISettingsProviderSelector">
            <summary>
            Application service contract for the singleton settings provider selector.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.ISettingsProviderSelector.TryGetProviders(System.Type)">
            <summary>
            Tries to get the providers handling a specific settings type.
            </summary>
            <param name="settingsType">Type of the settings.</param>
            <returns>
            An enumeration of providers.
            </returns>
        </member>
        <member name="T:Kephas.Configuration.Providers.SettingsTypeAttribute">
            <summary>
            Attribute for settings type.
            </summary>
        </member>
        <member name="M:Kephas.Configuration.Providers.SettingsTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Configuration.Providers.SettingsTypeAttribute"/> class.
            </summary>
            <param name="value">The metadata value.</param>
        </member>
        <member name="P:Kephas.Configuration.Providers.SettingsTypeAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="P:Kephas.Configuration.Providers.SettingsTypeAttribute.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.CoreSettings">
            <summary>
            The Kephas core settings.
            </summary>
        </member>
        <member name="P:Kephas.CoreSettings.Task">
            <summary>
            Gets or sets the task settings.
            </summary>
            <value>
            The task settings.
            </value>
        </member>
        <member name="T:Kephas.Cryptography.AesEncryptionService">
            <summary>
            The AES encryption service.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.AesEncryptionService.#ctor(Kephas.Services.IContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.AesEncryptionService"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
        </member>
        <member name="M:Kephas.Cryptography.AesEncryptionService.#ctor(System.Func{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.AesEncryptionService"/> class.
            </summary>
            <param name="contextCtor">The context constructor.</param>
        </member>
        <member name="T:Kephas.Cryptography.EncryptedAttribute">
            <summary>
            Attributed marking an entity (class, property, so on) to indicate that it is encrypted.
            </summary>
        </member>
        <member name="T:Kephas.Cryptography.EncryptionContext">
            <summary>
            An encryption context.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionContext.#ctor(Kephas.Composition.ICompositionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.EncryptionContext"/> class.
            </summary>
            <param name="compositionContext">The composition context.</param>
        </member>
        <member name="P:Kephas.Cryptography.EncryptionContext.Key">
            <summary>
            Gets or sets the key for encryption/decryption.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Kephas.Cryptography.EncryptionContext.KeySize">
            <summary>
            Gets or sets the size of the key.
            </summary>
            <value>
            The size of the key.
            </value>
        </member>
        <member name="T:Kephas.Cryptography.HashingContext">
            <summary>
            A hashing context.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.HashingContext.#ctor(Kephas.Composition.ICompositionContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.HashingContext"/> class.
            </summary>
            <param name="compositionContext">Optional. Context for the composition.</param>
            <param name="isThreadSafe">Optional. True if this object is thread safe.</param>
        </member>
        <member name="P:Kephas.Cryptography.HashingContext.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>
            The salt.
            </value>
        </member>
        <member name="P:Kephas.Cryptography.HashingContext.UseDefaultSalt">
            <summary>
            Gets or sets a value indicating whether the service should use the default salt.
            </summary>
            <value>
            True if use the default salt, false if not.
            </value>
        </member>
        <member name="T:Kephas.Cryptography.HashingServiceBase">
            <summary>
            A hashing service base.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceBase.#ctor(Kephas.Services.IContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.HashingServiceBase"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceBase.Hash(System.Byte[],System.Action{Kephas.Cryptography.IHashingContext})">
            <summary>
            Hashes the value with the optionally provided string.
            </summary>
            <param name="value">The value to be hashed.</param>
            <param name="optionsConfig">Optional. Function for hashing options configuration.</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceBase.GetHashingContext(System.Action{Kephas.Cryptography.IHashingContext})">
            <summary>
            Gets the hashing context.
            </summary>
            <remarks>
            If a configuration is provided, a new <see cref="T:Kephas.Cryptography.HashingContext"/> is created and the configuration applied,
            otherwise <c>null</c> is returned.
            </remarks>
            <param name="optionsConfig">Function for hashing options configuration.</param>
            <returns>
            The hashing context.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceBase.CreateHashAlgorithm(Kephas.Cryptography.IHashingContext)">
            <summary>
            Creates the hash algorithm.
            </summary>
            <param name="context">The hashing context.</param>
            <returns>
            The new hash algorithm.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceBase.GetSaltedValue(System.Byte[],System.Byte[])">
            <summary>
            Gets salted value.
            </summary>
            <param name="value">The value to be hashed.</param>
            <param name="saltBytes">The salt bytes (optional).</param>
            <returns>
            The salted value.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.IEncryptionContext">
            <summary>
            Interface for encryption context.
            </summary>
        </member>
        <member name="P:Kephas.Cryptography.IEncryptionContext.Key">
            <summary>
            Gets or sets the key for encryption/decryption.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Kephas.Cryptography.IEncryptionContext.KeySize">
            <summary>
            Gets or sets the size of the key.
            </summary>
            <value>
            The size of the key.
            </value>
        </member>
        <member name="T:Kephas.Cryptography.EncryptionContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Cryptography.IEncryptionContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionContextExtensions.Key``1(``0,System.Byte[])">
            <summary>
            Sets the key.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The encryption context.</param>
            <param name="key">The key.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionContextExtensions.KeySize``1(``0,System.Nullable{System.Int32})">
            <summary>
            Sets the key size.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The encryption context.</param>
            <param name="keySize">Size of the key.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.IEncryptionService">
            <summary>
            Application service contract for encryption.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.IEncryptionService.GenerateKey(System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Generates a key.
            </summary>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            An array of byte.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.IEncryptionService.EncryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.IEncryptionService.DecryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.ISyncEncryptionService">
            <summary>
            Application service contract for synchronous encryption.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.ISyncEncryptionService.Encrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.ISyncEncryptionService.Decrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="T:Kephas.Cryptography.EncryptionServiceExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Cryptography.IEncryptionService"/>.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Encrypt(Kephas.Cryptography.IEncryptionService,System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="encryptionService">The encryption service.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Decrypt(Kephas.Cryptography.IEncryptionService,System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="encryptionService">The encryption service.</param>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.EncryptAsync(Kephas.Cryptography.IEncryptionService,System.String,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Encrypts the input string and returns a promise of the encrypted string (Base64 encoded).
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input string.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A promise of the encrypted bytes (Base64 encoded).
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.EncryptAsync(Kephas.Cryptography.IEncryptionService,System.Byte[],System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Encrypts the input bytes and returns a promise of the encrypted bytes.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input bytes.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A promise of the encrypted bytes.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Encrypt(Kephas.Cryptography.IEncryptionService,System.String,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input string and returns the encrypted string (Base64 encoded).
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input string.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The Base64 encoded encrypted bytes.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Encrypt(Kephas.Cryptography.IEncryptionService,System.Byte[],System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input bytes and returns the encrypted bytes.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input bytes.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The encrypted bytes.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.DecryptAsync(Kephas.Cryptography.IEncryptionService,System.String,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Decrypts the input Base64 encoded string and returns a promise of the decrypted string.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The Base64 encoded input string.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A promise of a decrypted string.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.DecryptAsync(Kephas.Cryptography.IEncryptionService,System.Byte[],System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Decrypts the input bytes and returns a promise of the decrypted bytes.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input bytes.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A promise of a decrypted bytes.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Decrypt(Kephas.Cryptography.IEncryptionService,System.String,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input string and returns the decrypted string.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The Base64 encoded input string.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            A promise of the decrypted string.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.EncryptionServiceExtensions.Decrypt(Kephas.Cryptography.IEncryptionService,System.Byte[],System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input bytes and returns the decrypted bytes.
            </summary>
            <param name="encryptionService">The encryption service to act on.</param>
            <param name="input">The input bytes.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The decrypted bytes.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.IHashingContext">
            <summary>
            Interface for hashing context.
            </summary>
        </member>
        <member name="P:Kephas.Cryptography.IHashingContext.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>
            The salt.
            </value>
        </member>
        <member name="P:Kephas.Cryptography.IHashingContext.UseDefaultSalt">
            <summary>
            Gets or sets a value indicating whether the service should use the default salt.
            </summary>
            <value>
            True if use the default salt, false if not.
            </value>
        </member>
        <member name="T:Kephas.Cryptography.HashingContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Cryptography.IHashingContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.HashingContextExtensions.Salt``1(``0,System.Byte[])">
            <summary>
            Sets the salt.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="hashingContext">The hashing context.</param>
            <param name="salt">The salt.</param>
            <returns>
            This <paramref name="hashingContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingContextExtensions.UseDefaultSalt``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to use the default salt.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="hashingContext">The hashing context.</param>
            <param name="value">True to use the default salt, false otherwise.</param>
            <returns>
            This <paramref name="hashingContext"/>.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.IHashingService">
            <summary>
            Application service contract for hashing.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.IHashingService.Hash(System.Byte[],System.Action{Kephas.Cryptography.IHashingContext})">
            <summary>
            Hashes the value with the optionally provided string.
            </summary>
            <param name="value">The value to be hashed.</param>
            <param name="optionsConfig">Optional. Function for hashing options configuration.</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.HashingServiceExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Cryptography.IHashingService"/>.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceExtensions.Hash(Kephas.Cryptography.IHashingService,System.String,System.Action{Kephas.Cryptography.IHashingContext})">
            <summary>
            Hashes the value with the optionally provided string.
            </summary>
            <param name="hashingService">The hashing service.</param>
            <param name="value">The value to be hashed.</param>
            <param name="optionsConfig">Optional. Function for hashing options configuration.</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceExtensions.Hash(Kephas.Cryptography.IHashingService,System.String,System.Byte[])">
            <summary>
            Hashes the value with the optionally provided string.
            </summary>
            <param name="hashingService">The hashing service.</param>
            <param name="value">The value to be hashed.</param>
            <param name="salt">The hashing salt.</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.HashingServiceExtensions.Hash(Kephas.Cryptography.IHashingService,System.Byte[],System.Byte[])">
            <summary>
            Hashes the value with the optionally provided string.
            </summary>
            <param name="hashingService">The hashing service.</param>
            <param name="value">The value to be hashed.</param>
            <param name="salt">The hashing salt.</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.NullEncryptionService">
            <summary>
            A null encryption service.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.GenerateKey(System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Generates a key.
            </summary>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            An array of bytes.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.EncryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.DecryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.Encrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.Decrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.ReverseStreamAsync(System.IO.Stream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Reverse stream asynchronously.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="cancellationToken">The cancellation token (optional).</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.NullEncryptionService.ReverseStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reverse stream asynchronously.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="T:Kephas.Cryptography.Sha256HashingService">
            <summary>
            A SHA-256 hashing service.
            </summary>
        </member>
        <member name="M:Kephas.Cryptography.Sha256HashingService.#ctor(Kephas.Services.IContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.Sha256HashingService"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
        </member>
        <member name="M:Kephas.Cryptography.Sha256HashingService.CreateHashAlgorithm(Kephas.Cryptography.IHashingContext)">
            <summary>
            Creates the hash algorithm.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The new hash algorithm.
            </returns>
        </member>
        <member name="T:Kephas.Cryptography.SymmetricEncryptionServiceBase`1">
            <summary>
            A symmetric encryption service base.
            </summary>
            <typeparam name="TAlgorithm">Type of the algorithm.</typeparam>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.#ctor(System.Func{Kephas.Cryptography.IEncryptionContext},System.Func{Kephas.Cryptography.IEncryptionContext,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Cryptography.SymmetricEncryptionServiceBase`1"/>
            class.
            </summary>
            <param name="contextCtor">The context constructor.</param>
            <param name="algorithmCtor">The algorithm constructor.</param>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.GenerateKey(System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Generates a key.
            </summary>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            An array of byte.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.EncryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.DecryptAsync(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext},System.Threading.CancellationToken)">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.Encrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Encrypts the input stream and writes the encrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.Decrypt(System.IO.Stream,System.IO.Stream,System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Decrypts the input stream and writes the decrypted content into the output stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.CreateEncryptionContext(System.Action{Kephas.Cryptography.IEncryptionContext})">
            <summary>
            Creates an encryption context.
            </summary>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The new encryption context.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.Encrypt(System.IO.Stream,System.IO.Stream,`0,Kephas.Cryptography.IEncryptionContext)">
            <summary>
            Encrypts the stream content.
            </summary>
            <param name="input">The input stream to encrypt.</param>
            <param name="output">The output stream.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptionContext">Context for the encryption.</param>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.EncryptAsync(System.IO.Stream,System.IO.Stream,`0,Kephas.Cryptography.IEncryptionContext,System.Threading.CancellationToken)">
            <summary>
            Encrypts the stream content asynchronously.
            </summary>
            <param name="input">The input stream to encrypt.</param>
            <param name="output">The output stream.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptionContext">Context for the encryption.</param>
            <param name="cancellationToken">The cancellation token (optional).</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.Decrypt(System.IO.Stream,System.IO.Stream,`0,Kephas.Cryptography.IEncryptionContext)">
            <summary>
            Decrypts the stream content.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptionContext">Context for the encryption.</param>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.DecryptAsync(System.IO.Stream,System.IO.Stream,`0,Kephas.Cryptography.IEncryptionContext,System.Threading.CancellationToken)">
            <summary>
            Decrypts the stream content asynchronously.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="algorithm">The algorithm.</param>
            <param name="encryptionContext">Context for the encryption.</param>
            <param name="cancellationToken">The cancellation token (optional).</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.GetKeySize(Kephas.Cryptography.IEncryptionContext)">
            <summary>
            Gets the key size.
            </summary>
            <param name="encryptionContext">Context for the encryption.</param>
            <returns>
            The key size.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.GetKey(Kephas.Cryptography.IEncryptionContext)">
            <summary>
            Gets the encryption/decryption key.
            </summary>
            <param name="encryptionContext">Context for the encryption.</param>
            <returns>
            An array of byte.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.CreateSymmetricAlgorithm(Kephas.Cryptography.IEncryptionContext)">
            <summary>
            Creates the symmetric algorithm.
            </summary>
            <param name="encryptionContext">Context for the encryption.</param>
            <returns>
            The new symmetric algorithm.
            </returns>
        </member>
        <member name="M:Kephas.Cryptography.SymmetricEncryptionServiceBase`1.GetMismatchedKeySizeEncryptionException(System.Security.Cryptography.SymmetricAlgorithm,System.Int32)">
            <summary>
            Gets mismatched key size encryption exception.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="keySize">Size of the key.</param>
            <returns>
            The mismatched key size encryption exception.
            </returns>
        </member>
        <member name="T:Kephas.Data.DataException">
            <summary>
            Exception for signalling generic data errors.
            </summary>
        </member>
        <member name="M:Kephas.Data.DataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DataException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Data.DataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DataException"/>
             class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Kephas.Data.DataException.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="T:Kephas.Data.DefaultIdGenerator">
            <summary>
            The default implementation of an identifier generator.
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.settings">
            <summary>
            Options for controlling the operation.
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.maxRandom">
            <summary>
            The maximum random part = 2 ^ 7 (for the last 7 bits).
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.timestampShift">
            <summary>
            Bit shift value for the timestamp.
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.syncObject">
            <summary>
            The synchronize object.
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.lastGeneratedId">
            <summary>
            The last generated identifier.
            </summary>
        </member>
        <member name="F:Kephas.Data.DefaultIdGenerator.discriminatorCounter">
            <summary>
            The counter for discriminating values within one timestamp.
            </summary>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.#ctor(Kephas.Configuration.IConfiguration{Kephas.Data.IdGeneratorSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DefaultIdGenerator"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.#ctor(Kephas.Data.IdGeneratorSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DefaultIdGenerator"/> class.
            </summary>
            <param name="settings">Options for controlling the operation.</param>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GenerateId">
            <summary>
            Generates the 52-bit identifier.
            This is due to the fact that JavaScript can read accurately only integers up to 2^53,
            values greater than that will get truncated.
            See http://stackoverflow.com/questions/5353388/javascript-parsing-int64 for more info.
            </summary>
            <returns>
            The unique identifier.
            </returns>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GetTimestamp(System.Int64)">
            <summary>
              Gets timestamp from ID.
            </summary>
            <param name="id">The ID.</param>
            <returns>
              The <see cref="T:System.DateTimeOffset"/>.
            </returns>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GenerateDiscriminator(System.Int64@)">
            <summary>
              Generates the discriminator part for the relative timestamp.
            </summary>
            <param name="relativeTimestamp">The relative timestamp.</param>
            <remarks>The relative timestamp may be adjusted to avoid collisions.</remarks>
            <returns>
              The discriminator part of the ID.
            </returns>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GenerateIdCore">
            <summary>
            Generates the 52-bit identifier.
            </summary>
            <returns>
            The generated ID.
            </returns>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GetTimestampPart(System.Int64)">
            <summary>
              Gets the milliseconds part from identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>
              Milliseconds from the start epoch taken from the given ID.
            </returns>
        </member>
        <member name="M:Kephas.Data.DefaultIdGenerator.GenerateTimestamp">
            <summary>
              Gets the relative timestamp.
            </summary>
            <returns>
              The timestamp relative to the <see cref="P:Kephas.Data.IdGeneratorSettings.StartEpoch"/>.
            </returns>
        </member>
        <member name="T:Kephas.Data.DuplicateKeyException">
            <summary>
            Exception for signalling duplicate key errors.
            </summary>
        </member>
        <member name="M:Kephas.Data.DuplicateKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="keyName">The name of the key.</param>
        </member>
        <member name="M:Kephas.Data.DuplicateKeyException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DuplicateKeyException"/> class.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Data.DuplicateKeyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Data.DuplicateKeyException"/>
             class.
            </summary>
            <param name="keyName">The name of the key.</param>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="P:Kephas.Data.DuplicateKeyException.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
            <value>
            The name of the key.
            </value>
        </member>
        <member name="T:Kephas.Data.Id">
            <summary>
            Helper class for IDs.
            </summary>
        </member>
        <member name="F:Kephas.Data.Id.EmptyValues">
            <summary>
            Gets the list of unset values.
            </summary>
        </member>
        <member name="F:Kephas.Data.Id.isEmpty">
            <summary>
            The predicate for <see cref="P:Kephas.Data.Id.IsEmpty"/>.
            </summary>
        </member>
        <member name="F:Kephas.Data.Id.isTemporary">
            <summary>
            The predicate for <see cref="P:Kephas.Data.Id.IsTemporary"/>.
            </summary>
        </member>
        <member name="M:Kephas.Data.Id.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Kephas.Data.Id"/> class.
            </summary>
        </member>
        <member name="P:Kephas.Data.Id.IsTemporary">
            <summary>
            Gets or sets a function to determine whether a specified value is considered temporary.
            </summary>
            <remarks>
            A temporary value indicate that a proper id will be provided at a later time,
            for example when creating a new entity.
            </remarks>
        </member>
        <member name="P:Kephas.Data.Id.IsEmpty">
            <summary>
            Gets or sets a function to determine whether a specified value is considered empty.
            </summary>
        </member>
        <member name="M:Kephas.Data.Id.AddEmptyValue(System.Object)">
            <summary>
            Adds a value considered empty.
            </summary>
            <param name="value">The empty value.</param>
        </member>
        <member name="M:Kephas.Data.Id.RemoveEmptyValue(System.Object)">
            <summary>
            Removes a value considered empty.
            </summary>
            <param name="value">The empty value to be removed.</param>
            <returns>
            True if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="T:Kephas.Data.IdGeneratorSettings">
            <summary>
            Settings for the <see cref="T:Kephas.Data.DefaultIdGenerator"/>.
            </summary>
        </member>
        <member name="P:Kephas.Data.IdGeneratorSettings.StartEpoch">
            <summary>
            Gets or sets the start epoch for the timestamp part of an ID - 2015-06-01.
            </summary>
        </member>
        <member name="P:Kephas.Data.IdGeneratorSettings.NamespaceIdentifierBitLength">
            <summary>
            Gets or sets the length of the namespace identifier bits.
            </summary>
            <value>
            The length of the namespace identifier bits.
            </value>
        </member>
        <member name="P:Kephas.Data.IdGeneratorSettings.DiscriminatorBitLength">
            <summary>
            Gets or sets the length of the discriminator part bits.
            </summary>
            <value>
            The length of the discriminator part bits.
            </value>
        </member>
        <member name="P:Kephas.Data.IdGeneratorSettings.Namespace">
            <summary>
            Gets or sets the namespace integer value.
            </summary>
            <value>
            The namespace integer value.
            </value>
        </member>
        <member name="T:Kephas.Data.IIdentifiable">
            <summary>
            Mix-in for identifiable entities.
            </summary>
        </member>
        <member name="P:Kephas.Data.IIdentifiable.Id">
            <summary>
            Gets the identifier for this instance.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Kephas.Data.IIdGenerator">
            <summary>
            Contract for a shared application service generating ID values.
            </summary>
        </member>
        <member name="M:Kephas.Data.IIdGenerator.GenerateId">
            <summary>
            Generates a unique identifier.
            </summary>
            <returns>
            The unique identifier.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.Contracts.Requires">
            <summary>
            Provides contract checks.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNull``1(``0,System.String)">
            <summary>
            Requires that the argument is not null.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the required argument is null.</exception>
            <typeparam name="T">The argument type.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Requires that the argument is not null.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the required argument is null.</exception>
            <typeparam name="T">The argument type.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Requires that the argument is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the required argument is null or empty.</exception>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Requires that the argument is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the required argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the required argument is empty.</exception>
            <typeparam name="T">The array item type.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Requires that the argument is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the required argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the required argument is empty.</exception>
            <typeparam name="T">The array item type.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Contracts.Requires.NotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Requires that the argument is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the required argument is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the required argument is empty.</exception>
            <typeparam name="T">The argument type.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:Kephas.Diagnostics.IProcessStarter">
            <summary>
            Interface for process starter.
            </summary>
        </member>
        <member name="P:Kephas.Diagnostics.IProcessStarter.ProcessStartInfo">
            <summary>
            Gets information describing the process start.
            </summary>
            <value>
            Information describing the process start.
            </value>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarter.StartAsync(System.Action{System.Diagnostics.Process},System.Threading.CancellationToken)">
            <summary>
            Starts a process asynchronously.
            </summary>
            <param name="config">Optional. The configuration.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the start.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.IProcessStarterFactory">
            <summary>
            Interface for process starter factory.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithArguments(System.String[])">
            <summary>
            Sets the process arguments.
            </summary>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithEnvironmentVariable(System.String,System.String)">
            <summary>
            Sets an environment variable for the process.
            </summary>
            <param name="name">The variable name.</param>
            <param name="value">The variable value.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithManagedExecutable(System.String,System.String)">
            <summary>
            Sets the executable file as a managed process.
            </summary>
            <param name="executableFile">Full pathname of the executable file or the entry assembly.</param>
            <param name="runtime">Optional. The runtime executing the entry assembly.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithNativeExecutable(System.String)">
            <summary>
            Sets the executable file as an operating system native process.
            </summary>
            <param name="executableFile">Full pathname of the executable file.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithProcessStartInfoConfig(System.Action{System.Diagnostics.ProcessStartInfo})">
            <summary>
            Adds further configuration to the process information.
            </summary>
            <param name="config">The configuration.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithShell(System.Boolean)">
            <summary>
            Indicates whether the process should use the shell execution (for console display).
            </summary>
            <param name="useShell">Optional. True to use shell.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.WithWorkingDirectory(System.String)">
            <summary>
            Sets the process working directory.
            </summary>
            <param name="workingDirectory">Pathname of the working directory.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.CreateProcessStarter">
            <summary>
            Creates the process starter.
            </summary>
            <returns>
            The new <see cref="T:Kephas.Diagnostics.ProcessStarter"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.IProcessStarterFactory.GetProcessStartInfo">
            <summary>
            Gets the process start information.
            </summary>
            <returns>
            The process start information.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.Logging.AmbientServicesDebugLogExtensions">
            <summary>
            Extension methods for the <see cref="T:Kephas.IAmbientServices"/>.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.AmbientServicesDebugLogExtensions.WithDebugLogManager(Kephas.IAmbientServices,System.Action{System.String,System.String,System.Object,System.Object[],System.Exception},System.Boolean)">
            <summary>
            Sets the debug log manager to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="logCallback">Optional. The log callback.</param>
            <param name="replaceDefault">Optional. True to replace <see cref="P:Kephas.Logging.LoggingHelper.DefaultLogManager"/>.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.AmbientServicesDebugLogExtensions.WithDebugLogManager(Kephas.IAmbientServices,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Sets the debug log manager to the ambient services.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="stringBuilder">The string builder.</param>
            <param name="replaceDefault">Optional. True to replace <see cref="P:Kephas.Logging.LoggingHelper.DefaultLogManager"/>.</param>
            <returns>
            This <paramref name="ambientServices"/>.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.Logging.DebugLogManager">
            <summary>
            Log manager for debugging.
            </summary>
        </member>
        <member name="F:Kephas.Diagnostics.Logging.DebugLogManager.logCallback">
            <summary>
            The log callback.
            </summary>
        </member>
        <member name="F:Kephas.Diagnostics.Logging.DebugLogManager.loggers">
            <summary>
            The cached loggers.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.#ctor(System.Action{System.String,System.String,System.Object,System.Object[],System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.Logging.DebugLogManager"/> class.
            </summary>
            <param name="logCallback">optional. The log callback.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.Logging.DebugLogManager"/> class.
            </summary>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="P:Kephas.Diagnostics.Logging.DebugLogManager.MinimumLevel">
            <summary>
            Gets or sets the minimum level.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.GetLogger(System.String)">
            <summary>
            Gets the logger with the provided name.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <returns>
            A logger for the provided name.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.Logging.DebugLogManager.DebugLogger">
            <summary>
            The debug logger.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.DebugLogger.#ctor(System.String,System.Action{System.String,System.String,System.Object,System.Object[],System.Exception},System.Func{Kephas.Logging.LogLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.Logging.DebugLogManager.DebugLogger"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="logCallback">The log callback.</param>
            <param name="logLevelGetter">Getter function for the log level.</param>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.DebugLogger.IsEnabled(Kephas.Logging.LogLevel)">
            <summary>
            Indicates whether logging at the indicated level is enabled.
            </summary>
            <param name="level">The logging level.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Logging.DebugLogManager.DebugLogger.Log(Kephas.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the information at the provided level.
            </summary>
            <param name="level">The logging level.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.ProcessStarter">
            <summary>
            A process starter.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarter.#ctor(System.Diagnostics.ProcessStartInfo,Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.ProcessStarter"/> class.
            </summary>
            <param name="processStartInfo">Information describing the process start.</param>
            <param name="logManager">Optional. Manager for log.</param>
        </member>
        <member name="P:Kephas.Diagnostics.ProcessStarter.ProcessStartInfo">
            <summary>
            Gets information describing the process start.
            </summary>
            <value>
            Information describing the process start.
            </value>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarter.StartAsync(System.Action{System.Diagnostics.Process},System.Threading.CancellationToken)">
            <summary>
            Starts the process asynchronously.
            </summary>
            <exception cref="T:Kephas.Diagnostics.ProcessStartException">Thrown when the Process Start error condition occurs.</exception>
            <param name="config">Optional. Callback to configure the process before start.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.ProcessStarterFactory">
            <summary>
            Factory service for process starters.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.#ctor(Kephas.Application.IAppRuntime,Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.ProcessStarterFactory"/> class.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <param name="logManager">Optional. Manager for log.</param>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithEnvironmentVariable(System.String,System.String)">
            <summary>
            Sets an environment variable for the process.
            </summary>
            <param name="name">The variable name.</param>
            <param name="value">The variable value.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithNativeExecutable(System.String)">
            <summary>
            Sets the executable file as an operating system native process.
            </summary>
            <param name="executableFile">Full pathname of the executable file.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithManagedExecutable(System.String,System.String)">
            <summary>
            Sets the executable file as a managed process.
            </summary>
            <param name="executableFile">Full pathname of the executable file.</param>
            <param name="runtime">Optional. The runtime executing the entry assembly.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithArguments(System.String[])">
            <summary>
            Sets the process arguments.
            </summary>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithProcessStartInfoConfig(System.Action{System.Diagnostics.ProcessStartInfo})">
            <summary>
            With process information configuration.
            </summary>
            <param name="config">The configuration.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithWorkingDirectory(System.String)">
            <summary>
            Sets the process working directory.
            </summary>
            <param name="workingDirectory">Pathname of the working directory.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.WithShell(System.Boolean)">
            <summary>
            Indicates whether the process should use the shell execution (for console display).
            </summary>
            <param name="useShell">Optional. True to use shell.</param>
            <returns>
            This <see cref="T:Kephas.Diagnostics.IProcessStarterFactory"/>.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.GetProcessStartInfo">
            <summary>
            Gets the process start information.
            </summary>
            <returns>
            The process start information.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStarterFactory.CreateProcessStarter">
            <summary>
            Creates the process launcher.
            </summary>
            <returns>
            The new <see cref="T:Kephas.Diagnostics.ProcessStarter"/>.
            </returns>
        </member>
        <member name="T:Kephas.Diagnostics.ProcessStartException">
            <summary>
            Exception for signalling process start errors.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.ProcessStartException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.ProcessStartException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Diagnostics.ProcessStartResult">
            <summary>
            Encapsulates the result of the process start.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartResult.#ctor(System.Diagnostics.Process,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Diagnostics.ProcessStartResult"/> class.
            </summary>
            <param name="process">The process.</param>
            <param name="startException">The start exception (optional).</param>
        </member>
        <member name="P:Kephas.Diagnostics.ProcessStartResult.Process">
            <summary>
            Gets the process.
            </summary>
            <value>
            The process.
            </value>
        </member>
        <member name="P:Kephas.Diagnostics.ProcessStartResult.StartException">
            <summary>
            Gets the start exception.
            </summary>
            <value>
            The start exception.
            </value>
        </member>
        <member name="P:Kephas.Diagnostics.ProcessStartResult.ErrorData">
            <summary>
            Gets information describing the error.
            </summary>
            <value>
            Information describing the error.
            </value>
        </member>
        <member name="P:Kephas.Diagnostics.ProcessStartResult.OutputData">
            <summary>
            Gets or sets information describing the output.
            </summary>
            <value>
            Information describing the output.
            </value>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartResult.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartResult.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.ProcessStartResult.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            Tnsa.Foundation.Runtime.OperatingSystem.ProcessStartResult and optionally releases the
            managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Kephas.Diagnostics.Profiler">
            <summary>
            Provides operations for profiling the code.
            </summary>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithWarningStopwatch(System.Action,Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Warning"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithWarningStopwatch``1(System.Func{``0},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Warning"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithInfoStopwatch(System.Action,Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Info"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithInfoStopwatch``1(System.Func{``0},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Info"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithDebugStopwatch(System.Action,Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Debug"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithDebugStopwatch``1(System.Func{``0},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Debug"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithTraceStopwatch(System.Action,Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Trace"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithTraceStopwatch``1(System.Func{``0},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at <see cref="!:LogLevel.Trace"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithStopwatch(System.Action,Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at the indicated log level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="logLevel">The log level.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithStopwatch``1(System.Func{``0},Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String)">
            <summary>
            Executes the action with a stopwatch, optionally logging the elapsed time at the indicated
            log level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">Optional. The logger.</param>
            <param name="logLevel">Optional. The log level.</param>
            <param name="memberName">Optional. Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithWarningStopwatchAsync(System.Func{System.Threading.Tasks.Task},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Warning"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithWarningStopwatchAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Warning"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithInfoStopwatchAsync(System.Func{System.Threading.Tasks.Task},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Info"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithInfoStopwatchAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Info"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithDebugStopwatchAsync(System.Func{System.Threading.Tasks.Task},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Debug"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithDebugStopwatchAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Debug"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithTraceStopwatchAsync(System.Func{System.Threading.Tasks.Task},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Trace"/> level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithTraceStopwatchAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Kephas.Logging.ILogger,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at <see cref="!:LogLevel.Trace"/> level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithStopwatchAsync(System.Func{System.Threading.Tasks.Task},Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed time at the indicated log level.
            </summary>
            <param name="action">The action.</param>
            <param name="logger">The logger.</param>
            <param name="logLevel">The log level.</param>
            <param name="memberName">Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="M:Kephas.Diagnostics.Profiler.WithStopwatchAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String)">
            <summary>
            Executes the action with a stopwatch for asynchronous actions, optionally logging the elapsed
            time at the indicated log level.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <param name="action">The action.</param>
            <param name="logger">Optional. The logger.</param>
            <param name="logLevel">Optional. The log level.</param>
            <param name="memberName">Optional. Name of the member.</param>
            <returns>
            The elapsed time.
            </returns>
        </member>
        <member name="T:Kephas.DynamicObjectExtensions">
            <summary>
            Dynamic extension methods for objects.
            </summary>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Dynamically sets the property value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.TrySetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Dynamically sets the property value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value could be set; otherwise <c>false</c>.</returns>
            <remarks>If the object passed is <c>null</c>, then <c>false</c> is returned.</remarks>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Dynamically gets the property value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.TryGetPropertyValue(System.Object,System.String,System.Object@)">
            <summary>
            Dynamically gets the property value.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The property value.</param>
            <returns>
            A boolean value indicating whether the property is found.
            </returns>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.GetRuntimeTypeInfo(System.Object)">
            <summary>
            Gets a runtime type information out of the provided instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>A dynamic type information for the provided object.</returns>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.ToDynamic(System.Object)">
            <summary>
            Gets a dynamic object out of the provided instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>A dynamic object wrapping the provided object.</returns>
        </member>
        <member name="M:Kephas.DynamicObjectExtensions.ToExpando(System.Object)">
            <summary>
            Gets an <see cref="T:Kephas.Dynamic.IExpando"/> object out of the provided instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>An <see cref="T:Kephas.Dynamic.IExpando"/> wrapping the provided object. If the provided object is an expando, that object is returned.</returns>
        </member>
        <member name="T:Kephas.Dynamic.Expando">
            <summary>
            <para>
            Class that provides extensible properties and methods. This
            dynamic object stores 'extra' properties in a dictionary or
            checks the actual properties of the instance.
            This means you can subclass this expando and retrieve either
            native properties or properties from values in the dictionary.
            </para>
            <para>
            This type allows you three ways to access its properties:
            <list type="bullet">
            <item>
            <term>Directly</term>
            <description>any explicitly declared properties are accessible</description>
            </item>
            <item>
            <term>Dynamic</term>
            <description>dynamic cast allows access to dictionary and native properties/methods</description>
            </item>
            <item>
            <term>Dictionary</term>
            <description>Any of the extended properties are accessible via IDictionary interface</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.Expando.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.Expando"/> class. This constructor just works
            off the internal dictionary and any public properties of this object.
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.Expando.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.Expando"/> class. This constructor just works
            off the internal dictionary and any public properties of this object.
            </summary>
            <param name="isThreadSafe"><c>true</c> if this object is thread safe when working with the internal dictionary, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Kephas.Dynamic.Expando.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.Expando"/> class. This constructor just works
            off the internal dictionary and any public properties of this object.
            </summary>
            <param name="dictionary">The properties.</param>
        </member>
        <member name="M:Kephas.Dynamic.Expando.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.Expando"/> class. Allows passing in an existing
            instance variable to 'extend'.
            </summary>
            <remarks>
            You can pass in null here if you don't want to check native properties and only check the
            Dictionary!.
            </remarks>
            <param name="innerObject">The instance to be extended.</param>
            <param name="isThreadSafe"><c>true</c> if this object is thread safe when working with the internal dictionary, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Kephas.Dynamic.Expando.GetDictionary(System.Object,System.Boolean)">
            <summary>
            Gets a dictionary based on the <paramref name="isThreadSafe"/> flag.
            </summary>
            <param name="innerObject">The instance to be extended.</param>
            <param name="isThreadSafe"><c>true</c> if the internal dictionary should be thread safe,
                                       <c>false</c> otherwise.</param>
            <returns>
            The dictionary.
            </returns>
        </member>
        <member name="T:Kephas.Dynamic.ExpandoBase">
            <summary>
            <para>
            Class that provides extensible properties and methods. This
            dynamic object stores 'extra' properties in a dictionary or
            checks the actual properties of the instance.
            This means you can subclass this expando and retrieve either
            native properties or properties from values in the dictionary.
            </para>
            <para>
            This type allows you three ways to access its properties:
            <list type="bullet">
            <item>
            <term>Directly</term>
            <description>any explicitly declared properties are accessible</description>
            </item>
            <item>
            <term>Dynamic</term>
            <description>dynamic cast allows access to dictionary and native properties/methods</description>
            </item>
            <item>
            <term>Dictionary</term>
            <description>Any of the extended properties are accessible via IDictionary interface</description>
            </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.ExpandoBase"/> class.
            This constructor just works off the internal dictionary.
            </summary>
            <param name="innerDictionary">
            The inner dictionary for holding dynamic values (optional).
            If not provided, a new dictionary will be created.
            </param>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.#ctor(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.ExpandoBase"/> class. Allows passing in an
            existing instance variable to 'extend'.
            </summary>
            <param name="innerObject">The instance to be extended.</param>
            <param name="innerDictionary">
            Optional. The inner dictionary for holding dynamic values.
            If not provided, a new dictionary will be created.
            </param>
        </member>
        <member name="P:Kephas.Dynamic.ExpandoBase.InnerDictionary">
            <summary>
            Gets the inner dictionary.
            </summary>
        </member>
        <member name="P:Kephas.Dynamic.ExpandoBase.Item(System.String)">
            <summary>
            Convenience method that provides a string Indexer to the Properties collection AND the
            strongly typed properties of the object by name. // dynamic exp["Address"] = "112 nowhere
            lane";
            // strong var name = exp["StronglyTypedProperty"] as string;.
            </summary>
            <remarks>
            The getter checks the Properties dictionary first then looks in PropertyInfo for properties.
            The setter checks the instance properties before checking the Properties dictionary.
            </remarks>
            <param name="key">The key.</param>
            <returns>The <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.HasDynamicMember(System.String)">
            <summary>
            Indicates whether the <paramref name="memberName"/> is defined in the expando.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns>
            True if defined, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Try to retrieve a member by name first from instance properties
            followed by the collection entries.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Property setter implementation tries to retrieve value from instance
            first then into this object.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Dynamic invocation method. Currently allows only for Reflection based
            operation (no ability to add methods dynamically).
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args" />[0] is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.ToDictionary(System.Func{System.String,System.String},System.Func{System.Object,System.Object})">
            <summary>
            Converts the expando to a dictionary having as keys the property names and as values the
            respective properties' values.
            </summary>
            <param name="keyFunc">The key transformation function (optional).</param>
            <param name="valueFunc">The value transformation function (optional).</param>
            <returns>
            A dictionary of property values with their associated names.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TryGetValue(System.String,System.Object@)">
            <summary>
            Attempts to get the dynamic value with the given key.
            </summary>
            <remarks>
            First of all, it is tried to get a property value from the inner object, if one is set.
            The next try is to retrieve the property value from the expando object itself.
            Lastly, if still a property by the provided name cannot be found, the inner dictionary is searched by the provided key.
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value to get.</param>
            <returns>
            <c>true</c> if a value is found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TrySetValue(System.String,System.Object)">
            <summary>
            Attempts to set the value with the given key.
            </summary>
            <remarks>
            First of all, it is tried to set the property value to the inner object, if one is set.
            The next try is to set the property value to the expando object itself.
            Lastly, if still a property by the provided name cannot be found, the inner dictionary is used to set the value with the provided key.
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value to set.</param>
            <returns>
            <c>true</c> if the value could be set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TryGetMethodInfo(System.Type,System.String,System.Nullable{System.Boolean})">
            <summary>
            Tries to get the MethodInfo for the provided type and key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key, typically the property name.</param>
            <param name="ignoreCase">
            Optional. Indicates whether case insensitive matching should be used.
            If not set, the default value inferred from the inner dictionary is used.
            </param>
            <returns>A MethodInfo or <c>null</c>.</returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.TryGetPropertyInfo(System.Type,System.String,System.Nullable{System.Boolean})">
            <summary>
            Tries to get the PropertyInfo for the provided type and key.
            </summary>
            <param name="type">The type.</param>
            <param name="key">The key, typically the property name.</param>
            <param name="ignoreCase">
            Optional. Indicates whether case insensitive matching should be used.
            If not set, the default value inferred from the inner dictionary is used.
            </param>
            <returns>A PropertyInfo or <c>null</c>.</returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.InitializeExpando(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes the expando with the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="dictionary">The inner dictionary.</param>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.GetInnerObjectType">
            <summary>
            Gets the type of the inner object.
            </summary>
            <returns>
            The type of the inner object.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoBase.GetThisType">
            <summary>
            Gets the type of this expando object.
            </summary>
            <returns>
            The type of this expando object.
            </returns>
        </member>
        <member name="T:Kephas.Dynamic.IExpando">
            <summary>
            Contract for dynamic objects allowing getting or setting
            properties by their name through an indexer.
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.IExpando.HasDynamicMember(System.String)">
            <summary>
            Indicates whether the <paramref name="memberName"/> is defined in the expando.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns>
            True if defined, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.IExpando.ToDictionary(System.Func{System.String,System.String},System.Func{System.Object,System.Object})">
            <summary>
            Converts the expando to a dictionary having as keys the property names and as values the
            respective properties' values.
            </summary>
            <param name="keyFunc">The key transformation function (optional).</param>
            <param name="valueFunc">The value transformation function (optional).</param>
            <returns>
            A dictionary of property values with their associated names.
            </returns>
        </member>
        <member name="T:Kephas.Dynamic.ExpandoExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Dynamic.IExpando"/>.
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoExtensions.Merge``2(``0,System.Action{``1})">
            <summary>
            Merges the indicated options into the context.
            </summary>
            <typeparam name="T">Type of the context.</typeparam>
            <typeparam name="TContract">Type of the expando contract.</typeparam>
            <param name="expando">The expando.</param>
            <param name="optionsConfig">The options configuration.</param>
            <returns>
            This <paramref name="expando"/>.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoExtensions.Merge``1(``0,System.Object)">
            <summary>
            Merges the source object properties into the expando.
            </summary>
            <remarks>
            Collections of key-value pairs (including dictionaries) are merged by their keys, provided the key has the type of string.
            </remarks>
            <typeparam name="T">The expando type.</typeparam>
            <param name="expando">The expando.</param>
            <param name="source">Source object to be merged into the expando.</param>
            <returns>
            The target expando object.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.ExpandoExtensions.GetLaxValue``1(Kephas.Dynamic.IIndexable,System.String,``0)">
            <summary>
            An IExpando extension method that gets a member value using lax rules.
            </summary>
            <remarks>
            The member name may be either Pascal or camel case, and in case it is a string
            it is tried to be parsed.
            </remarks>
            <typeparam name="T">The value type.</typeparam>
            <param name="expando">The expando to act on.</param>
            <param name="member">The member.</param>
            <param name="defaultValue">Optional. The default value.</param>
            <returns>
            The lax value.
            </returns>
        </member>
        <member name="T:Kephas.Dynamic.IIndexable">
            <summary>
            Makes an object indexable by a key.
            </summary>
        </member>
        <member name="P:Kephas.Dynamic.IIndexable.Item(System.String)">
            <summary>
            Convenience method that provides a string Indexer
            to the Properties collection AND the strongly typed
            properties of the object by name.
            // dynamic
            exp["Address"] = "112 nowhere lane";
            // strong
            var name = exp["StronglyTypedProperty"] as string;.
            </summary>
            <value>
            The <see cref="T:System.Object" /> identified by the key.
            </value>
            <param name="key">The key.</param>
            <returns>The requested property value.</returns>
        </member>
        <member name="T:Kephas.Dynamic.LazyExpando">
            <summary>
            Expando class for evaluating the internal values on demand.
            </summary>
        </member>
        <member name="F:Kephas.Dynamic.LazyExpando.lockDictionary">
            <summary>
            The lock dictionary.
            </summary>
        </member>
        <member name="F:Kephas.Dynamic.LazyExpando.innerDictionary">
            <summary>
            The inner dictionary.
            </summary>
        </member>
        <member name="M:Kephas.Dynamic.LazyExpando.#ctor(System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.LazyExpando"/> class.
            </summary>
            <param name="valueResolver">The value resolver (optional).</param>
        </member>
        <member name="M:Kephas.Dynamic.LazyExpando.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Dynamic.LazyExpando"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="valueResolver">The value resolver (optional).</param>
        </member>
        <member name="P:Kephas.Dynamic.LazyExpando.ValueResolver">
            <summary>
            Gets or sets the value resolver.
            </summary>
            <value>
            The value resolver.
            </value>
        </member>
        <member name="M:Kephas.Dynamic.LazyExpando.TryGetValue(System.String,System.Object@)">
            <summary>Attempts to get the dynamic value with the given key.</summary>
            <remarks>
            First of all, it is tried to get a property value from the inner object, if one is set.
            The next try is to retrieve the property value from the expando object itself.
            Lastly, if still a property by the provided name cannot be found, the inner dictionary is searched by the provided key.
            </remarks>
            <param name="key">The key.</param>
            <param name="value">The value to get.</param>
            <returns>
            <c>true</c> if a value is found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Dynamic.LazyExpando.HandleCircularDependency(System.String,System.Object@)">
            <summary>
            Handles the circular dependency described by requested key.
            </summary>
            <param name="key">The key involved in the circular dependency.</param>
            <param name="value">The value to return.</param>
            <returns>
            <c>true</c> if a value is found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Kephas.ExceptionHandling.ExceptionData">
            <summary>
            An exception data.
            </summary>
        </member>
        <member name="M:Kephas.ExceptionHandling.ExceptionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.ExceptionHandling.ExceptionData"/> class.
            </summary>
        </member>
        <member name="M:Kephas.ExceptionHandling.ExceptionData.#ctor(System.Exception,System.Nullable{Kephas.ExceptionHandling.SeverityLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.ExceptionHandling.ExceptionData"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="severity">Optional. The severity level. If this value is set, it overwrites the severity level provided by the exception.</param>
        </member>
        <member name="P:Kephas.ExceptionHandling.ExceptionData.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>
            The type of the exception.
            </value>
        </member>
        <member name="P:Kephas.ExceptionHandling.ExceptionData.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.ExceptionHandling.ExceptionData.Severity">
            <summary>
            Gets or sets the severity level.
            </summary>
            <value>
            The severity level.
            </value>
        </member>
        <member name="M:Kephas.ExceptionHandling.ExceptionData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.ExceptionHandling.ISeverityQualifiedNotification">
            <summary>
            Interface for severity qualified notification.
            </summary>
        </member>
        <member name="P:Kephas.ExceptionHandling.ISeverityQualifiedNotification.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.ExceptionHandling.ISeverityQualifiedNotification.Severity">
            <summary>
            Gets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="T:Kephas.ExceptionHandling.SeverityLevel">
            <summary>
            Values that represent exception severities.
            </summary>
        </member>
        <member name="F:Kephas.ExceptionHandling.SeverityLevel.Fatal">
            <summary>
            An enum constant representing the fatal error option.
            </summary>
        </member>
        <member name="F:Kephas.ExceptionHandling.SeverityLevel.Error">
            <summary>
            An enum constant representing the error option.
            </summary>
        </member>
        <member name="F:Kephas.ExceptionHandling.SeverityLevel.Warning">
            <summary>
            An enum constant representing the warning option.
            </summary>
        </member>
        <member name="F:Kephas.ExceptionHandling.SeverityLevel.Info">
            <summary>
            An enum constant representing the information option.
            </summary>
        </member>
        <member name="T:Kephas.ExceptionHandling.SeverityLevelExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.ExceptionHandling.SeverityLevel"/>.
            </summary>
        </member>
        <member name="M:Kephas.ExceptionHandling.SeverityLevelExtensions.IsError(Kephas.ExceptionHandling.SeverityLevel)">
            <summary>
            Gets a value indicating whether the severity level indicates an error.
            </summary>
            <param name="severity">The severity level.</param>
            <returns>
            True if error, false if not.
            </returns>
        </member>
        <member name="T:Kephas.HashCodeGenerator">
            <summary>
            Hash code generator.
            </summary>
        </member>
        <member name="M:Kephas.HashCodeGenerator.#ctor(System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.HashCodeGenerator"/> class.
            </summary>
            <param name="seed">Optional. The seed for hash.</param>
        </member>
        <member name="P:Kephas.HashCodeGenerator.GeneratedHash">
            <summary>
            Gets the generated hash.
            </summary>
        </member>
        <member name="M:Kephas.HashCodeGenerator.Combine(System.Int32)">
            <summary>
            Combines the hashcode of the provided integer value.
            </summary>
            <param name="i">The integer value.</param>
            <returns>This <see cref="T:Kephas.HashCodeGenerator"/>.</returns>
        </member>
        <member name="M:Kephas.HashCodeGenerator.CombineStable(System.String)">
            <summary>
            Combines the hash code of the provided string value.
            </summary>
            <remarks>To make the hash code stable over successive runs uses a custom string hasher.</remarks>
            <param name="s">The string.</param>
            <returns>This <see cref="T:Kephas.HashCodeGenerator"/>.</returns>
        </member>
        <member name="M:Kephas.HashCodeGenerator.Combine``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Combines the value of the object's hash code provided by the equality comparer.
            </summary>
            <param name="o">The object.</param>
            <param name="comparer">The equality comparer.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>This <see cref="T:Kephas.HashCodeGenerator"/>.</returns>
        </member>
        <member name="M:Kephas.HashCodeGenerator.Combine``1(``0)">
            <summary>
            Combines the value of the object's hash code.
            </summary>
            <param name="o">The object.</param>
            <typeparam name="T">The value type.</typeparam>
            <returns>This <see cref="T:Kephas.HashCodeGenerator"/>.</returns>
        </member>
        <member name="M:Kephas.HashCodeGenerator.GetHashCode``2(``0,``1)">
            <summary>Create a unique hash code for the given set of items.</summary>
            <returns>The generated hash.</returns>
        </member>
        <member name="M:Kephas.HashCodeGenerator.GetHashCode``3(``0,``1,``2)">
            <summary>Create a unique hash code for the given set of items.</summary>
            <returns>The generated hash.</returns>
        </member>
        <member name="T:Kephas.IAmbientServices">
            <summary>
            Contract interface for ambient services.
            </summary>
        </member>
        <member name="P:Kephas.IAmbientServices.ConfigurationStore">
            <summary>
            Gets the configuration store.
            </summary>
            <value>
            The configuration store.
            </value>
        </member>
        <member name="P:Kephas.IAmbientServices.CompositionContainer">
            <summary>
            Gets the composition container.
            </summary>
            <value>
            The composition container.
            </value>
        </member>
        <member name="P:Kephas.IAmbientServices.AppRuntime">
            <summary>
            Gets the application runtime.
            </summary>
            <value>
            The application runtime.
            </value>
        </member>
        <member name="P:Kephas.IAmbientServices.TypeRegistry">
            <summary>
            Gets the runtime type serviceRegistry.
            </summary>
        </member>
        <member name="P:Kephas.IAmbientServices.TypeLoader">
            <summary>
            Gets the type loader.
            </summary>
            <value>
            The type loader.
            </value>
        </member>
        <member name="P:Kephas.IAmbientServices.LogManager">
            <summary>
            Gets the log manager.
            </summary>
            <value>
            The log manager.
            </value>
        </member>
        <member name="P:Kephas.IAmbientServices.LicensingManager">
            <summary>
            Gets the manager for licensing.
            </summary>
            <value>
            The licensing manager.
            </value>
        </member>
        <member name="M:Kephas.IAmbientServices.Register(System.Type,System.Action{Kephas.Composition.Lite.IServiceRegistrationBuilder})">
            <summary>
            Registers the provided service using a registration builder.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="builder">The builder.</param>
            <returns>
            The IAmbientServices.
            </returns>
        </member>
        <member name="M:Kephas.IAmbientServices.IsRegistered(System.Type)">
            <summary>
            Gets a value indicating whether the service with the provided contract is registered.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>
            <c>true</c> if the service is registered, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.IInstance">
            <summary>
            Contract for instances of classifiers.
            </summary>
        </member>
        <member name="M:Kephas.IInstance.GetTypeInfo">
            <summary>
            Gets the type information for this instance.
            </summary>
            <returns>
            The type information.
            </returns>
        </member>
        <member name="T:Kephas.IInstance`1">
            <summary>
            Generic contract for instances of classifiers.
            </summary>
            <typeparam name="T">The specific type info.</typeparam>
        </member>
        <member name="M:Kephas.IInstance`1.GetTypeInfo">
            <summary>
            Gets the type information for this instance.
            </summary>
            <returns>
            The type information.
            </returns>
        </member>
        <member name="T:Kephas.Interaction.DefaultEventHub">
            <summary>
            The default implementation of the <see cref="T:Kephas.Interaction.IEventHub"/> service.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Interaction.DefaultEventHub"/> class.
            </summary>
            <param name="logManager">Optional. Manager for log.</param>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.PublishAsync(System.Object,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Publishes the event asynchronously to its subscribers.
            </summary>
            <param name="event">The event.</param>
            <param name="context">The context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.Subscribe(System.Func{System.Object,System.Boolean},System.Func{System.Object,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the event(s) matching the criteria.
            </summary>
            <param name="match">Specifies the event match criteria.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.Subscribe(System.Type,System.Func{System.Object,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the event(s) matching the provided type.
            </summary>
            <param name="typeMatch">Specifies the type match criteria.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Kephas.Interaction.DefaultEventHub and
            optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to
                                    release only unmanaged resources.</param>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.GetEventContent(System.Object)">
            <summary>
            Gets the event content.
            </summary>
            <param name="event">The event.</param>
            <returns>
            The event content.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.GetTypeMatch(System.Type)">
            <summary>
            Gets the match for the provided event type.
            </summary>
            <param name="typeMatch">Specifies the type match criteria.</param>
            <returns>
            A function delegate that yields a bool.
            </returns>
        </member>
        <member name="T:Kephas.Interaction.DefaultEventHub.EventSubscription">
            <summary>
            An event subscription.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.EventSubscription.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Action{Kephas.Interaction.DefaultEventHub.EventSubscription})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Interaction.DefaultEventHub.EventSubscription"/> class.
            </summary>
            <param name="match">Specifies the event match.</param>
            <param name="callback">The callback.</param>
            <param name="onDispose">The on dispose.</param>
        </member>
        <member name="P:Kephas.Interaction.DefaultEventHub.EventSubscription.Match">
            <summary>
            Gets the event match.
            </summary>
            <value>
            The match.
            </value>
        </member>
        <member name="P:Kephas.Interaction.DefaultEventHub.EventSubscription.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.EventSubscription.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
            resources.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.DefaultEventHub.EventSubscription.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Kephas.Interaction.IEventHub">
            <summary>
            Contract for the singleton application service handling in-process event publishing/subscribing.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.IEventHub.PublishAsync(System.Object,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Publishes the event asynchronously to its subscribers.
            </summary>
            <param name="event">The event.</param>
            <param name="context">The context.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.IEventHub.Subscribe(System.Func{System.Object,System.Boolean},System.Func{System.Object,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the event(s) matching the criteria.
            </summary>
            <param name="match">Specifies the match criteria.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.IEventHub.Subscribe(System.Type,System.Func{System.Object,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the event(s) matching the provided type.
            </summary>
            <param name="typeMatch">Specifies the type match criteria.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="T:Kephas.Interaction.EventHubExtensions">
            <summary>
            Extensions for <see cref="T:Kephas.Interaction.IEventHub"/>.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.EventHubExtensions.Subscribe``1(Kephas.Interaction.IEventHub,System.Func{``0,Kephas.Services.IContext,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Subscribes to the event(s) matching the provided type.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="eventHub">The event hub to act on.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.EventHubExtensions.Subscribe``1(Kephas.Interaction.IEventHub,System.Action{``0,Kephas.Services.IContext})">
            <summary>
            Subscribes to the event(s) matching the provided type.
            </summary>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <param name="eventHub">The event hub to act on.</param>
            <param name="callback">The callback.</param>
            <returns>
            An IEventSubscription.
            </returns>
        </member>
        <member name="T:Kephas.Interaction.IEventSubscription">
            <summary>
            Interface for event subscription.
            </summary>
        </member>
        <member name="T:Kephas.Interaction.InteractionApplicationLifecycleBehavior">
            <summary>
            An interaction application lifecycle behavior.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.InteractionApplicationLifecycleBehavior.#ctor(Kephas.Interaction.IEventHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Interaction.InteractionApplicationLifecycleBehavior"/>
            class.
            </summary>
            <param name="eventHub">The event hub.</param>
        </member>
        <member name="M:Kephas.Interaction.InteractionApplicationLifecycleBehavior.BeforeAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.InteractionApplicationLifecycleBehavior.AfterAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.InteractionApplicationLifecycleBehavior.BeforeAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Interaction.InteractionApplicationLifecycleBehavior.AfterAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="T:Kephas.Interaction.ISignal">
            <summary>
            Marker interface for signals.
            </summary>
            <remarks>
            Signals may be implemented as a special kind of exceptions
            because, in some cases, they must interrupt the normal flow.
            </remarks>
        </member>
        <member name="T:Kephas.Interaction.SignalBase">
            <summary>
            Base class for signals.
            </summary>
        </member>
        <member name="M:Kephas.Interaction.SignalBase.#ctor(System.String,Kephas.ExceptionHandling.SeverityLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Interaction.SignalBase"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="severity">The severity.</param>
        </member>
        <member name="P:Kephas.Interaction.SignalBase.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.Interaction.SignalBase.Severity">
            <summary>
            Gets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="T:Kephas.IO.FileSystem">
            <summary>
            A file system.
            </summary>
        </member>
        <member name="M:Kephas.IO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies the directory.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the requested directory is not
                                                         present.</exception>
            <param name="sourceDirName">Pathname of the source directory.</param>
            <param name="destDirName">Pathname of the destination directory.</param>
            <param name="copySubDirs">Optional. True to copy sub directories.</param>
        </member>
        <member name="M:Kephas.IO.FileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory recursively, ensuring that the directory exists.
            </summary>
            <param name="directoryPath">Full pathname of the directory file.</param>
        </member>
        <member name="M:Kephas.IO.FileSystem.NormalizePath(System.String)">
            <summary>
            Normalizes the path, using proper path separator characters and expanding the environment variables if present.
            </summary>
            <param name="path">Full pathname of the file or directory.</param>
            <returns>
            The normalized path.
            </returns>
        </member>
        <member name="T:Kephas.IO.StreamExtensions">
            <summary>
            A stream extensions.
            </summary>
        </member>
        <member name="M:Kephas.IO.StreamExtensions.ReadAllString(System.IO.Stream)">
            <summary>
            A Stream extension method that reads the content as a string.
            </summary>
            <param name="input">The input to act on.</param>
            <returns>
            The content as string.
            </returns>
        </member>
        <member name="M:Kephas.IO.StreamExtensions.ReadAllStringAsync(System.IO.Stream)">
            <summary>
            A Stream extension method that reads the content as a string asynchronously.
            </summary>
            <param name="input">The input to act on.</param>
            <returns>
            The content as string.
            </returns>
        </member>
        <member name="M:Kephas.IO.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            A Stream extension method that reads all bytes.
            </summary>
            <param name="input">The input to act on.</param>
            <returns>
            An array of byte.
            </returns>
        </member>
        <member name="M:Kephas.IO.StreamExtensions.ReadAllBytesAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            A Stream extension method that reads all bytes asynchronously.
            </summary>
            <param name="input">The input to act on.</param>
            <param name="cancellationToken">Optional. the cancellation token.</param>
            <returns>
            An array of byte.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.DefaultLicensingManager">
            <summary>
            The default licensing manager.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.#ctor(Kephas.Application.IAppRuntime,Kephas.Cryptography.IEncryptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.DefaultLicensingManager"/> class.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <param name="encryptionService">The encryption service.</param>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.#ctor(Kephas.Licensing.ILicenseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.DefaultLicensingManager"/> class.
            </summary>
            <param name="licenseRepository">The license repository.</param>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.#ctor(System.Func{Kephas.Application.AppIdentity,Kephas.Licensing.LicenseData})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.DefaultLicensingManager"/> class.
            </summary>
            <param name="licenseDataGetter">The license data getter.</param>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.CheckLicense(Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Checks the license for the provided application identity.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license check result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.CheckLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Checks the license for the provided application identity asynchronously.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the check license result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.GetLicense(Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Gets the license for the provided application identity.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license data.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.GetLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Gets the license for the provided application identity asynchronously.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the license data.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.DefaultLicensingManager.GetLicenseData(Kephas.Application.AppIdentity)">
            <summary>
            Gets the license data. This is the main extensibility point
            when overriding the license retrieval.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <returns>
            The license data.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.ILicenseCheckResult">
            <summary>
            Interface for license check result.
            </summary>
        </member>
        <member name="P:Kephas.Licensing.ILicenseCheckResult.AppId">
            <summary>
            Gets the app identifier.
            </summary>
            <value>
            The app identifier.
            </value>
        </member>
        <member name="P:Kephas.Licensing.ILicenseCheckResult.IsLicensed">
            <summary>
            Gets a value indicating whether this app is licensed.
            </summary>
            <value>
            True if this app is licensed, false if not.
            </value>
        </member>
        <member name="T:Kephas.Licensing.ILicenseRepository">
            <summary>
            Interface for license repository.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.ILicenseRepository.GetLicenseData(Kephas.Application.AppIdentity)">
            <summary>
            Gets the license information from the store.
            </summary>
            <param name="appIdentity">The app identity requesting the license.</param>
            <returns>
            The license data or <c>null</c>, if a license could not be found for the requesting application.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.ILicenseRepository.StoreRawLicenseData(Kephas.Application.AppIdentity,System.String)">
            <summary>
            Stores the license data, making it persistable among multiple application runs.
            </summary>
            <param name="appIdentity">The app identity being associated the license.</param>
            <param name="rawLicenseData">Raw information describing the license.</param>
        </member>
        <member name="T:Kephas.Licensing.ILicensingManager">
            <summary>
            Interface for licensing manager.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.ILicensingManager.CheckLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Checks the license for the provided application identity asynchronously.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the license check result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.ILicensingManager.GetLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Gets the license for the provided application identity asynchronously.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the license data.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.ISyncLicensingManager">
            <summary>
            Interface for licensing manager.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.ISyncLicensingManager.CheckLicense(Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Checks the license for the provided application identity.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license check result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.ISyncLicensingManager.GetLicense(Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Gets the license for the provided application identity.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license data.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.LicensingManagerExtensions">
            <summary>
            A licensing manager extensions.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.LicensingManagerExtensions.CheckLicense(Kephas.Licensing.ILicensingManager,Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Checks the license for the provided application identity asynchronously.
            </summary>
            <param name="licensingManager">The licensing manager.</param>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license check result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.LicensingManagerExtensions.GetLicense(Kephas.Licensing.ILicensingManager,Kephas.Application.AppIdentity,Kephas.Services.IContext)">
            <summary>
            Gets the license for the provided application identity.
            </summary>
            <param name="licensingManager">The licensing manager.</param>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <returns>
            The license data.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.InvalidLicenseDataException">
            <summary>
            Exception for signalling invalid license data errors.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.InvalidLicenseDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.InvalidLicenseDataException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Licensing.InvalidLicenseDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.InvalidLicenseDataException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Kephas.Licensing.InvalidLicenseException">
            <summary>
            Exception for signalling invalid license errors.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.InvalidLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.InvalidLicenseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Licensing.InvalidLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.InvalidLicenseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Kephas.Licensing.LicenseCheckResult">
            <summary>
            A license check result.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.LicenseCheckResult.#ctor(Kephas.Application.AppIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.LicenseCheckResult"/> class.
            </summary>
            <param name="appId">The app identity.</param>
        </member>
        <member name="M:Kephas.Licensing.LicenseCheckResult.#ctor(Kephas.Application.AppIdentity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.LicenseCheckResult"/> class.
            </summary>
            <param name="appId">The app identity.</param>
            <param name="isLicensed">True if the app is licensed, false if not.</param>
        </member>
        <member name="P:Kephas.Licensing.LicenseCheckResult.AppId">
            <summary>
            Gets the app identity.
            </summary>
            <value>
            The app identity.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseCheckResult.IsLicensed">
            <summary>
            Gets a value indicating whether this app is licensed.
            </summary>
            <value>
            True if this app is licensed, false if not.
            </value>
        </member>
        <member name="T:Kephas.Licensing.LicenseData">
            <summary>
            Class storing license data.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.LicenseData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.LicenseData"/> class.
            </summary>
            <param name="id">The license identifier.</param>
            <param name="appId">The regular expression matching the identifier of the application.</param>
            <param name="appVersionRange">The application version range.</param>
            <param name="licenseType">The type of the license.</param>
            <param name="licensedTo">The entity the application is licensed to.</param>
            <param name="licensedBy">The entity that licensed the application.</param>
            <param name="validFrom">Optional. The date the license is valid from.</param>
            <param name="validTo">Optional. The date the license is valid to.</param>
            <param name="data">Optional. The additional data associated with the license.</param>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.Id">
            <summary>
            Gets the license identifier.
            </summary>
            <value>
            The license identifier.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.Kephas#Data#IIdentifiable#Id">
            <summary>
            Gets the identifier for this instance.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.AppId">
            <summary>
            Gets a regular expression matching the identifier of the application.
            </summary>
            <value>
            The regular expression matching identifier of the application.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.AppVersionRange">
            <summary>
            Gets the application version range.
            </summary>
            <value>
            The application version range.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.ValidFrom">
            <summary>
            Gets the date from which the license is valid.
            </summary>
            <value>
            The valid from date.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.ValidTo">
            <summary>
            Gets the date to which this license is valid.
            </summary>
            <value>
            The valid to date.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.LicensedBy">
            <summary>
            Gets the entity that issued this license.
            </summary>
            <value>
            Describes who issued this object.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.LicensedTo">
            <summary>
            Gets the entity the license is assigned to.
            </summary>
            <value>
            The entity the license is assigned to.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.LicenseType">
            <summary>
            Gets the type of the license.
            </summary>
            <value>
            The type of the license.
            </value>
        </member>
        <member name="P:Kephas.Licensing.LicenseData.Data">
            <summary>
            Gets additional data associated with the license.
            </summary>
            <value>
            The additional data associated with the license.
            </value>
        </member>
        <member name="M:Kephas.Licensing.LicenseData.Parse(System.String)">
            <summary>
            Parses the license data from the provided string.
            </summary>
            <param name="value">The value.</param>
            <returns>
            A LicenseData.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.LicenseData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.LicenseData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Licensing.LicenseRepository">
            <summary>
            A license repository.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.LicenseRepository.#ctor(Kephas.Application.IAppRuntime,Kephas.Cryptography.IEncryptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Licensing.LicenseRepository"/> class.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <param name="encryptionService">The encryption service.</param>
        </member>
        <member name="M:Kephas.Licensing.LicenseRepository.GetLicenseData(Kephas.Application.AppIdentity)">
            <summary>
            Gets the license information from the store.
            </summary>
            <param name="appIdentity">The app identity requesting the license.</param>
            <returns>
            The license data or <c>null</c>, if a license could not be found for the requesting
            application.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.LicenseRepository.StoreRawLicenseData(Kephas.Application.AppIdentity,System.String)">
            <summary>
            Stores the license data, making it persistable among multiple application runs.
            </summary>
            <param name="appIdentity">The app identity being associated the license.</param>
            <param name="rawLicenseData">Raw information describing the license.</param>
        </member>
        <member name="T:Kephas.Licensing.NullLicensingManager">
            <summary>
            A null licensing manager.
            </summary>
        </member>
        <member name="M:Kephas.Licensing.NullLicensingManager.CheckLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Checks the license for the provided application identity asynchronously.
            </summary>
            <param name="appId">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the check license result.
            </returns>
        </member>
        <member name="M:Kephas.Licensing.NullLicensingManager.GetLicenseAsync(Kephas.Application.AppIdentity,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Gets the license for the provided application identity asynchronously.
            </summary>
            <param name="appIdentity">Identifier for the application.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result that yields the license data.
            </returns>
        </member>
        <member name="T:Kephas.Localization.ILocalization">
            <summary>
            Interface for localization.
            </summary>
        </member>
        <member name="P:Kephas.Localization.ILocalization.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>
            The culture.
            </value>
        </member>
        <member name="T:Kephas.Localization.Internal.LocalizableString">
            <summary>
            A localizable string.
            </summary>
        </member>
        <member name="F:Kephas.Localization.Internal.LocalizableString.propertyName">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:Kephas.Localization.Internal.LocalizableString.cachedResult">
            <summary>
            The cached result.
            </summary>
        </member>
        <member name="F:Kephas.Localization.Internal.LocalizableString.propertyValue">
            <summary>
            The property value.
            </summary>
        </member>
        <member name="F:Kephas.Localization.Internal.LocalizableString.resourceType">
            <summary>
            The resource type.
            </summary>
        </member>
        <member name="M:Kephas.Localization.Internal.LocalizableString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Localization.Internal.LocalizableString"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Kephas.Localization.Internal.LocalizableString.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Kephas.Localization.Internal.LocalizableString.ResourceType">
            <summary>
            Gets or sets the resource type.
            </summary>
            <value>
            The resource type.
            </value>
        </member>
        <member name="M:Kephas.Localization.Internal.LocalizableString.GetLocalizableValue">
            <summary>
            Gets the localizable value.
            </summary>
            <returns>
            The localizable value.
            </returns>
        </member>
        <member name="M:Kephas.Localization.Internal.LocalizableString.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Kephas.Localization.Localization">
            <summary>
            Provides basic means for localization, typically strings.
            </summary>
        </member>
        <member name="F:Kephas.Localization.Localization.culture">
            <summary>
            The culture.
            </summary>
        </member>
        <member name="P:Kephas.Localization.Localization.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>
            The culture.
            </value>
        </member>
        <member name="T:Kephas.Logging.AggregateLogger">
            <summary>
            An aggregate logger.
            </summary>
        </member>
        <member name="F:Kephas.Logging.AggregateLogger.loggers">
            <summary>
            The loggers.
            </summary>
        </member>
        <member name="M:Kephas.Logging.AggregateLogger.#ctor(Kephas.Logging.ILogger[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.AggregateLogger"/> class.
            </summary>
            <remarks>
            There is no requirement that the loggers contain at least one element.
            </remarks>
            <param name="loggers">A variable-length parameters list containing loggers.</param>
        </member>
        <member name="M:Kephas.Logging.AggregateLogger.#ctor(System.Collections.Generic.IEnumerable{Kephas.Logging.ILogger})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.AggregateLogger"/> class.
            </summary>
            <remarks>
            There is no requirement that the loggers contain at least one element.
            </remarks>
            <param name="loggers">A variable-length parameters list containing loggers.</param>
        </member>
        <member name="M:Kephas.Logging.AggregateLogger.Log(Kephas.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>Logs the information at the provided level.</summary>
            <remarks>
            Note for implementors: the <paramref name="exception" /> may be <c>null</c>, so be cautious and handle this case too.
            For example, the <see cref="M:Kephas.Logging.LoggerExtensions.Log(Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String,System.Object[])" /> extension method passes a <c>null</c> exception.
            </remarks>
            <param name="level">The logging level.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.AggregateLogger.IsEnabled(Kephas.Logging.LogLevel)">
            <summary>
            Indicates whether logging at the indicated level is enabled.
            </summary>
            <param name="level">The logging level.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.Logging.ILoggable">
            <summary>
            Interface for loggable objects.
            </summary>
        </member>
        <member name="P:Kephas.Logging.ILoggable.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Kephas.Logging.LogLevel">
            <summary>
            Enumerates the logging levels.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Fatal">
            <summary>
            Fatal errors.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Error">
            <summary>
            Common errors.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Warning">
            <summary>
            Warning information.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Info">
            <summary>
            Common information.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Debug">
            <summary>
            Debugging information.
            </summary>
        </member>
        <member name="F:Kephas.Logging.LogLevel.Trace">
            <summary>
            Tracing information.
            </summary>
        </member>
        <member name="T:Kephas.Logging.ILogger">
            <summary>
            Logger abstract interface.
            </summary>
        </member>
        <member name="M:Kephas.Logging.ILogger.Log(Kephas.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the information at the provided level.
            </summary>
            <remarks>
            Note for implementors: the <paramref name="exception"/> may be <c>null</c>, so be cautious and handle this case too.
            For example, the <see cref="M:Kephas.Logging.LoggerExtensions.Log(Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String,System.Object[])"/> extension method passes a <c>null</c> exception.
            </remarks>
            <param name="level">The logging level.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments for the message format.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.ILogger.IsEnabled(Kephas.Logging.LogLevel)">
            <summary>
            Indicates whether logging at the indicated level is enabled.
            </summary>
            <param name="level">The logging level.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.Logging.ILogger`1">
            <summary>
            Defines a service contract for a logger associated to a specific service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
        </member>
        <member name="T:Kephas.Logging.LoggerExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Merge(Kephas.Logging.ILogger,Kephas.Logging.ILogger[])">
            <summary>
            Merges the loggers into one aggregate.
            </summary>
            <param name="logger">The logger.</param>
            <param name="loggers">A variable-length parameters list containing loggers.</param>
            <returns>
            An aggregated logger.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.GetLogLevel(System.Exception)">
            <summary>
            Gets the log level for an exception.
            This is calculated to be <see cref="F:Kephas.Logging.LogLevel.Error"/> if the exception does not implement <see cref="T:Kephas.ExceptionHandling.ISeverityQualifiedNotification"/>,
            otherwise the level indicated by the severity level.
            </summary>
            <param name="exception">The exception.</param>
            <returns>
            The log level.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Log(Kephas.Logging.ILogger,Kephas.Logging.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the information at the provided level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The logging level.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Log(Kephas.Logging.ILogger,System.Exception)">
            <summary>
            Logs the exception at the log level indicated be the exception's severity level.
            This is calculated to be <see cref="F:Kephas.ExceptionHandling.SeverityLevel.Error"/> if the exception does not implement <see cref="T:Kephas.ExceptionHandling.ISeverityQualifiedNotification"/>,
            otherwise the level indicated by the severity level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Log(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at the log level indicated be the exception's severity level.
            This is calculated to be <see cref="F:Kephas.ExceptionHandling.SeverityLevel.Error"/> if the exception does not implement <see cref="T:Kephas.ExceptionHandling.ISeverityQualifiedNotification"/>,
            otherwise the level indicated by the severity level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Fatal(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Fatal(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Error(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Error(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Warn(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Warning"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Warn(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Warning"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Info(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Info(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Debug(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Debug(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Trace(Kephas.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the exception with a formatted message at <see cref="F:Kephas.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.Trace(Kephas.Logging.ILogger,System.String,System.Object[])">
            <summary>
            Logs a formatted message at <see cref="F:Kephas.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsFatalEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsErrorEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsWarningEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Warning"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsInfoEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsDebugEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggerExtensions.IsTraceEnabled(Kephas.Logging.ILogger)">
            <summary>
            Indicates whether logging is enabled at the <see cref="F:Kephas.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.Logging.ILogManager">
            <summary>
            Manager service for loggers.
            </summary>
        </member>
        <member name="P:Kephas.Logging.ILogManager.MinimumLevel">
            <summary>
            Gets or sets the global minimum level.
            </summary>
        </member>
        <member name="M:Kephas.Logging.ILogManager.GetLogger(System.String)">
            <summary>
            Gets the logger with the provided name.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <returns>A logger for the provided name.</returns>
        </member>
        <member name="T:Kephas.Logging.LogManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Logging.ILogManager"/>.
            </summary>
        </member>
        <member name="M:Kephas.Logging.LogManagerExtensions.GetLogger(Kephas.Logging.ILogManager,System.Type)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <param name="logManager">The logger factory.</param>
            <param name="type">The type.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LogManagerExtensions.GetLogger``1(Kephas.Logging.ILogManager)">
            <summary>
            Gets the logger for the provided type.
            </summary>
            <typeparam name="TTarget">The type for which the logger should be created.</typeparam>
            <param name="logManager">The logger factory.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="T:Kephas.Logging.Loggable">
            <summary>
            A loggable mixin class.
            </summary>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor(Kephas.IAmbientServices)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor(Kephas.Composition.ICompositionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
            <param name="compositionContext">Context for the composition.</param>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor(Kephas.Services.IContextFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="M:Kephas.Logging.Loggable.#ctor(System.Func{Kephas.Logging.ILogManager})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.Loggable"/> class.
            </summary>
            <param name="logManagerGetter">The log manager getter.</param>
        </member>
        <member name="P:Kephas.Logging.Loggable.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Kephas.Logging.LoggingExtensions">
            <summary>
            Logging extensions.
            </summary>
        </member>
        <member name="M:Kephas.Logging.LoggingExtensions.GetLogger(System.Type,Kephas.Services.IContext)">
            <summary>
            A Type extension method that gets a logger.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="context">Optional. The context used to get the log manager.</param>
            <returns>
            The logger.
            </returns>
        </member>
        <member name="M:Kephas.Logging.LoggingExtensions.GetLogger(System.Object,Kephas.Services.IContext)">
            <summary>
            An Object extension method that gets a logger.
            </summary>
            <remarks>
            Use this method only if the object cannot get a logger through dependency injection.
            </remarks>
            <param name="obj">The object to act on.</param>
            <param name="context">The context used to get the log manager (optional).</param>
            <returns>
            The logger.
            </returns>
        </member>
        <member name="T:Kephas.Logging.LoggingHelper">
            <summary>
            The logging helper class.
            </summary>
        </member>
        <member name="P:Kephas.Logging.LoggingHelper.DefaultLogManager">
            <summary>
            Gets or sets the default manager for log.
            </summary>
            <value>
            The default log manager.
            </value>
        </member>
        <member name="T:Kephas.Logging.NullLogManager">
            <summary>
            A log manager service which does not log anything.
            </summary>
        </member>
        <member name="F:Kephas.Logging.NullLogManager.DefaultNullLogger">
            <summary>
            The default null logger.
            </summary>
        </member>
        <member name="P:Kephas.Logging.NullLogManager.MinimumLevel">
            <summary>
            Gets or sets the minimum level.
            </summary>
        </member>
        <member name="M:Kephas.Logging.NullLogManager.GetNullLogger(System.String)">
            <summary>
            Gets a NULL logger for the provided name.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <returns>
            A logger for the provided name.
            </returns>
        </member>
        <member name="M:Kephas.Logging.NullLogManager.GetNullLogger(System.Type)">
            <summary>
            Gets a NULL logger for the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A logger for the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Logging.NullLogManager.GetLogger(System.String)">
            <summary>
            Gets a NULL logger for the provided name.
            </summary>
            <param name="loggerName">Name of the logger.</param>
            <returns>
            A logger for the provided name.
            </returns>
        </member>
        <member name="T:Kephas.Logging.NullLogManager.NullLogger">
            <summary>
            A logger that does not log anything.
            </summary>
        </member>
        <member name="M:Kephas.Logging.NullLogManager.NullLogger.Log(Kephas.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the information at the provided level.
            </summary>
            <param name="level">The logging level.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="M:Kephas.Logging.NullLogManager.NullLogger.IsEnabled(Kephas.Logging.LogLevel)">
            <summary>
            Indicates whether logging at the indicated level is enabled.
            </summary>
            <param name="level">The logging level.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.Logging.TypedLogger`1">
            <summary>
            NLog logger for the <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
        </member>
        <member name="F:Kephas.Logging.TypedLogger`1.innerLogger">
            <summary>
            The inner logger.
            </summary>
        </member>
        <member name="M:Kephas.Logging.TypedLogger`1.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Logging.TypedLogger`1"/> class.
            </summary>
            <param name="logManager">The log manager.</param>
        </member>
        <member name="M:Kephas.Logging.TypedLogger`1.IsEnabled(Kephas.Logging.LogLevel)">
            <summary>
            Indicates whether logging at the indicated level is enabled.
            </summary>
            <param name="level">The logging level.</param>
            <returns>
            <c>true</c> if enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Logging.TypedLogger`1.Log(Kephas.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs the information at the provided level.
            </summary>
            <param name="level">The logging level.</param>
            <param name="exception">The exception.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>
            True if the log operation succeeded, false if it failed.
            </returns>
        </member>
        <member name="T:Kephas.Model.AttributedModel.ExcludeFromModelAttribute">
            <summary>
            Marks a type or a member being excluded from the model.
            </summary>
        </member>
        <member name="T:Kephas.Model.AttributedModel.OverrideAttribute">
            <summary>
            Attribute for indicating that classifiers or members override their base. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Kephas.Model.AttributedModel.OverrideAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="P:Kephas.Model.AttributedModel.OverrideAttribute.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Model.AttributedModel.PartAttribute">
            <summary>
            Marks a navigation property (single or collection) as modeling an object part,
            meaning that the property content is an aggregated part of the declaring object.
            If applied to a class or interface, marks it as being an aggregate of another object,
            typically found in the model space.
            </summary>
        </member>
        <member name="T:Kephas.Model.AttributedModel.ProjectionForAttribute">
            <summary>
            Attribute for indicating that a classifier is a projection of another classifier.
            </summary>
        </member>
        <member name="M:Kephas.Model.AttributedModel.ProjectionForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Model.AttributedModel.ProjectionForAttribute"/> class.
            </summary>
            <param name="projectedType">Type of the projected.</param>
        </member>
        <member name="M:Kephas.Model.AttributedModel.ProjectionForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Model.AttributedModel.ProjectionForAttribute"/> class.
            </summary>
            <param name="projectedTypeName">The name of the projected type.</param>
        </member>
        <member name="P:Kephas.Model.AttributedModel.ProjectionForAttribute.ProjectedType">
            <summary>
            Gets the projected type.
            </summary>
            <value>
            The projected type.
            </value>
        </member>
        <member name="P:Kephas.Model.AttributedModel.ProjectionForAttribute.ProjectedTypeName">
            <summary>
            Gets the projected type name.
            </summary>
            <value>
            The projected type name.
            </value>
        </member>
        <member name="T:Kephas.Model.DefaultModelTypeResolver">
            <summary>
            A default model type resolver.
            </summary>
        </member>
        <member name="M:Kephas.Model.DefaultModelTypeResolver.ResolveModelType(Kephas.Reflection.ITypeInfo,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Resolves the model type.
            </summary>
            <param name="rawType">The raw type.</param>
            <param name="context">Optional. A context for the resolution.</param>
            <param name="throwOnNotFound">Optional. Indicates whether to throw or not when the indicated
                                          type is not found.</param>
            <returns>
            The resolved model type or <c>null</c>, if <paramref name="throwOnNotFound"/> is set to false
            and a model type could not be found.
            </returns>
        </member>
        <member name="T:Kephas.Model.DefaultProjectedTypeResolver">
            <summary>
            A default projected type resolver.
            </summary>
        </member>
        <member name="F:Kephas.Model.DefaultProjectedTypeResolver.typeResolver">
            <summary>
            The type resolver.
            </summary>
        </member>
        <member name="M:Kephas.Model.DefaultProjectedTypeResolver.#ctor(Kephas.Reflection.ITypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Model.DefaultProjectedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">The type resolver.</param>
        </member>
        <member name="M:Kephas.Model.DefaultProjectedTypeResolver.ResolveProjectedType(System.Type,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Resolves the projected type.
            </summary>
            <exception cref="T:Kephas.Services.ServiceException">Thrown when a Service error condition occurs.</exception>
            <param name="projectionType">The projection type.</param>
            <param name="context">An optional context for the resolution.</param>
            <param name="throwOnNotFound">Indicates whether to throw or not when the indicated type is not found.</param>
            <returns>
            The resolved type or <c>null</c>, if <paramref name="throwOnNotFound" /> is set to false and
            a projected type could not be found.
            </returns>
        </member>
        <member name="M:Kephas.Model.DefaultProjectedTypeResolver.GetProjectionForAttribute(System.Type,Kephas.Services.IContext)">
            <summary>
            Gets the projection for attribute.
            </summary>
            <param name="projectionType">The projection type.</param>
            <param name="context">An optional context for the resolution.</param>
            <returns>
            The projection for attribute.
            </returns>
        </member>
        <member name="T:Kephas.Model.IModelTypeResolver">
            <summary>
            Interface for model type resolver.
            </summary>
        </member>
        <member name="M:Kephas.Model.IModelTypeResolver.ResolveModelType(Kephas.Reflection.ITypeInfo,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Resolves the model type.
            </summary>
            <param name="rawType">The raw type.</param>
            <param name="context">Optional. A context for the resolution.</param>
            <param name="throwOnNotFound">Optional. Indicates whether to throw or not when the indicated type is not found.</param>
            <returns>
            The resolved model type or <c>null</c>, if <paramref name="throwOnNotFound"/> is set to false and a model type could not be found.
            </returns>
        </member>
        <member name="T:Kephas.Model.IProjectedTypeResolver">
            <summary>
            Interface for projected type resolver.
            </summary>
        </member>
        <member name="M:Kephas.Model.IProjectedTypeResolver.ResolveProjectedType(System.Type,Kephas.Services.IContext,System.Boolean)">
            <summary>
            Resolves the projected type.
            </summary>
            <param name="projectionType">The projection type.</param>
            <param name="context">Optional. A context for the resolution.</param>
            <param name="throwOnNotFound">Optional. Indicates whether to throw or not when the indicated type is not found.</param>
            <returns>
            The resolved type or <c>null</c>, if <paramref name="throwOnNotFound"/> is set to false and a projected type could not be found.
            </returns>
        </member>
        <member name="T:Kephas.Model.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>, <see cref="T:System.Reflection.TypeInfo"/>, and <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </summary>
        </member>
        <member name="F:Kephas.Model.TypeExtensions.AbstractTypeInfoName">
            <summary>
            The name of the extended model type info property.
            </summary>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractTypeInfo(System.Type)">
            <summary>
            Gets the abstract type for an implementation type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>
            The abstract type, or the type itself, if the type is not an implementation type.
            </returns>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractTypeInfo(Kephas.Reflection.ITypeInfo)">
            <summary>
            Gets the abstract type for an implementation type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>
            The abstract type, or the type itself, if the type is not an implementation type.
            </returns>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractType(System.Type)">
            <summary>
            Gets the abstract type for an implementation type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>
            The abstract type, or the type itself, if the type is not an implementation type.
            </returns>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Gets the abstract type for an implementation type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>
            The abstract type, or the type itself, if the type is not an implementation type.
            </returns>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractType(System.Object)">
            <summary>
            Gets the abstract type for which this instance is an implementation.
            </summary>
            <param name="obj">The object to act on.</param>
            <returns>
            The abstract type.
            </returns>
        </member>
        <member name="M:Kephas.Model.TypeExtensions.GetAbstractTypeInfo(System.Object)">
            <summary>
            Gets the abstract type for which this instance is an implementation.
            </summary>
            <param name="obj">The object to act on.</param>
            <returns>
            The abstract type.
            </returns>
        </member>
        <member name="T:Kephas.Net.Mime.BsonMediaType">
            <summary>
            Marker class for BSON format.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.Composition.MediaTypeMetadata">
            <summary>
            Metadata for <see cref="T:Kephas.Net.Mime.IMediaType"/> services.
            </summary>
        </member>
        <member name="M:Kephas.Net.Mime.Composition.MediaTypeMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Net.Mime.Composition.MediaTypeMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Kephas.Net.Mime.Composition.MediaTypeMetadata.#ctor(System.String[],System.String[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Net.Mime.Composition.MediaTypeMetadata" /> class.
            </summary>
            <param name="supportedMediaTypes">The supported media types.</param>
            <param name="supportedFileExtensions">Optional. The supported file extensions.</param>
            <param name="processingPriority">Optional. The processing priority.</param>
            <param name="overridePriority">Optional. The override priority.</param>
        </member>
        <member name="P:Kephas.Net.Mime.Composition.MediaTypeMetadata.SupportedMediaTypes">
            <summary>
            Gets the supported data formats.
            </summary>
            <value>
            The supported data formats.
            </value>
        </member>
        <member name="P:Kephas.Net.Mime.Composition.MediaTypeMetadata.SupportedFileExtensions">
            <summary>
            Gets the supported file extensions.
            </summary>
            <value>
            The supported file extensions.
            </value>
        </member>
        <member name="T:Kephas.Net.Mime.DefaultMediaTypeProvider">
            <summary>
            A default format provider.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.DefaultMediaTypeProvider.mediaTypeDictionary">
            <summary>
            Dictionary of formats.
            </summary>
        </member>
        <member name="M:Kephas.Net.Mime.DefaultMediaTypeProvider.#ctor(System.Collections.Generic.ICollection{Kephas.Composition.IExportFactory{Kephas.Net.Mime.IMediaType,Kephas.Net.Mime.Composition.MediaTypeMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Net.Mime.DefaultMediaTypeProvider"/> class.
            </summary>
            <param name="formatFactories">The format factories.</param>
        </member>
        <member name="M:Kephas.Net.Mime.DefaultMediaTypeProvider.GetMediaType(System.String,System.Boolean)">
            <summary>
            Gets the media type based on the media type name.
            </summary>
            <param name="mediaTypeName">The media type name.</param>
            <param name="throwIfNotFound">True to throw if a format is not found (optional).</param>
            <returns>
            The media type or <c>null</c>.
            </returns>
        </member>
        <member name="T:Kephas.Net.Mime.IMediaType">
            <summary>
            Contract for serialization formats.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.IMediaTypeProvider">
            <summary>
            Singleton application service contract providing the media type based on its name.
            </summary>
        </member>
        <member name="M:Kephas.Net.Mime.IMediaTypeProvider.GetMediaType(System.String,System.Boolean)">
            <summary>
            Gets the media type based on the media type name.
            </summary>
            <param name="mediaTypeName">The media type name.</param>
            <param name="throwIfNotFound">True to throw if a format is not found (optional).</param>
            <returns>
            The media type or <c>null</c>.
            </returns>
        </member>
        <member name="T:Kephas.Net.Mime.IniMediaType">
            <summary>
            Marker class for the INI format.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.JsonMediaType">
            <summary>
            Marker class for JSON format.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.MediaTypeNames">
            <summary>
            Provides media type names.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.MediaTypeNames.Application">
            <summary>
            The application group.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Application.Json">
            <summary>
            The JSON media type.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Application.Xml">
            <summary>
            The XML media type.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Application.Bson">
            <summary>
            The BSON media type.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.MediaTypeNames.Text">
            <summary>
            The text group.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Text.Csv">
            <summary>
            The CSV media type.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Text.Xml">
            <summary>
            The XML media type.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Text.Plain">
            <summary>
            The plain text media type.
            </summary>
        </member>
        <member name="F:Kephas.Net.Mime.MediaTypeNames.Text.Ini">
            <summary>
            The INI media type.
            </summary>
        </member>
        <member name="T:Kephas.Net.Mime.SupportedFileExtensionsAttribute">
            <summary>
            Indicates the supported file extensions for the annotated media type.
            </summary>
        </member>
        <member name="M:Kephas.Net.Mime.SupportedFileExtensionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Net.Mime.SupportedFileExtensionsAttribute" /> class.
            </summary>
            <param name="supportedFileExtensions">The supported file extensions.</param>
        </member>
        <member name="P:Kephas.Net.Mime.SupportedFileExtensionsAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="P:Kephas.Net.Mime.SupportedFileExtensionsAttribute.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Net.Mime.SupportedMediaTypesAttribute">
            <summary>
            Indicates the supported data formats for data stream readers and writers.
            </summary>
        </member>
        <member name="M:Kephas.Net.Mime.SupportedMediaTypesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Net.Mime.SupportedMediaTypesAttribute" /> class.
            </summary>
            <param name="supportedMediaTypes">The supported media types.</param>
        </member>
        <member name="P:Kephas.Net.Mime.SupportedMediaTypesAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="P:Kephas.Net.Mime.SupportedMediaTypesAttribute.Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Net.Mime.XmlMediaType">
            <summary>
            Marker class for XML format.
            </summary>
        </member>
        <member name="T:Kephas.Operations.IOperation">
            <summary>
            Defines the contract of an executable operation.
            </summary>
        </member>
        <member name="M:Kephas.Operations.IOperation.Execute(Kephas.Services.IContext)">
            <summary>
            Executes the operation in the given context.
            </summary>
            <param name="context">Optional. The context.</param>
            <returns>
            An object.
            </returns>
        </member>
        <member name="T:Kephas.Operations.IAsyncOperation">
            <summary>
            Defines the contract of an executable asynchronous operation.
            </summary>
        </member>
        <member name="M:Kephas.Operations.IAsyncOperation.ExecuteAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Executes the operation asynchronously in the given context.
            </summary>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An object.
            </returns>
        </member>
        <member name="T:Kephas.Operations.OperationExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Operations.IOperation"/>.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationExtensions.ExecuteAsync(Kephas.Operations.IOperation,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Executes the operation asynchronously in the given context.
            </summary>
            <param name="operation">The operation.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An object.
            </returns>
        </member>
        <member name="T:Kephas.Operations.IOperationMessage">
            <summary>
            Contract for data operation messages.
            </summary>
        </member>
        <member name="P:Kephas.Operations.IOperationMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationMessage.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="T:Kephas.Operations.IOperationResult">
            <summary>
            Contract for operation results.
            </summary>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.Value">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.OperationState">
            <summary>
            Gets or sets the state of the operation.
            </summary>
            <value>
            The state of the operation.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.PercentCompleted">
            <summary>
            Gets or sets the percent completed.
            </summary>
            <value>
            The percent completed.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.Elapsed">
            <summary>
            Gets or sets the elapsed time.
            </summary>
            <value>
            The elapsed time.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.Messages">
            <summary>
            Gets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:Kephas.Operations.IOperationResult.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="M:Kephas.Operations.IOperationResult.GetAwaiter">
            <summary>
            Gets the operation result awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.IOperationResult.AsTask">
            <summary>
            Converts this object to a task.
            </summary>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Operations.IOperationResult`1">
            <summary>
            Interface for typed operation result.
            </summary>
            <typeparam name="TValue">Type of the return value.</typeparam>
        </member>
        <member name="P:Kephas.Operations.IOperationResult`1.Value">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="M:Kephas.Operations.IOperationResult`1.GetAwaiter">
            <summary>
            Gets the operation result awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.IOperationResult`1.AsTask">
            <summary>
            Converts this object to a task.
            </summary>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Operations.OperationAbortedException">
            <summary>
            Exception for signalling operation aborted errors.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationAbortedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationAbortedException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Kephas.Operations.OperationAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationAbortedException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Operations.OperationException">
            <summary>
            Exception for signaling operation errors.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Operations.OperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Kephas.Operations.OperationException.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationException.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationException.ToString">
            <summary>Creates and returns a string representation of the current exception.</summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:Kephas.Operations.OperationMessage">
            <summary>
            An operation message.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationMessage"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Kephas.Operations.OperationMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationMessage.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationMessage.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Kephas.Operations.OperationResult">
            <summary>
            Encapsulates the result of an operation.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult"/> class.
            </summary>
            <param name="value">The return value.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResult.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="E:Kephas.Operations.OperationResult.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Kephas.Operations.OperationResult.Value">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationResult.OperationState">
            <summary>
            Gets or sets the state of the operation.
            </summary>
            <value>
            The state of the operation.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationResult.PercentCompleted">
            <summary>
            Gets or sets the percent completed.
            </summary>
            <value>
            The percent completed.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationResult.Elapsed">
            <summary>
            Gets or sets the elapsed time.
            </summary>
            <value>
            The elapsed time.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationResult.Messages">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Kephas.Operations.OperationResult.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationResult.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.AsTask">
            <summary>
            Converts this object to a task.
            </summary>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResult.CreateAwaiter">
            <summary>
            Creates the operation result awaiter.
            </summary>
            <returns>
            The operation result awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.CreateTask">
            <summary>
            Creates the task representing this operation result.
            </summary>
            <returns>
            The task representing this operation result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.SetAwaiter(Kephas.Operations.OperationResultAwaiter)">
            <summary>
            Sets an awaiter.
            </summary>
            <remarks>
            Should not be called outside of the constructor context.
            </remarks>
            <param name="awaiter">The awaiter.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResult.UpdateInternalState(System.Threading.Tasks.Task)">
            <summary>
            Updates the internal state described by the provided task.
            </summary>
            <param name="t">A Task to process.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResult.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the property.
            </summary>
            <typeparam name="T">The field type.</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:Kephas.Operations.OperationResult.ConcurrentCollection`1">
            <summary>
            Internal implementation of a concurrent collection.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="P:Kephas.Operations.OperationResult.ConcurrentCollection`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.ConcurrentCollection`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Kephas.Operations.OperationResult.ConcurrentCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Kephas.Operations.OperationResult.ConcurrentCollection`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult.ConcurrentCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>true if <paramref name="item">item</paramref> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if <paramref name="item">item</paramref> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="T:Kephas.Operations.OperationResult`1">
            <summary>
            Encapsulates the result of an operation.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult`1"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult`1"/> class.
            </summary>
            <param name="value">The return value.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResult`1"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Kephas.Operations.OperationResult`1.Value">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.GetAwaiter">
            <summary>
            Gets the operation result awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.AsTask">
            <summary>
            Converts this object to a task.
            </summary>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.CreateAwaiter">
            <summary>
            Gets the default operation result awaiter.
            </summary>
            <returns>
            The default operation result awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResult`1.CreateTask">
            <summary>
            Creates the task representing this operation result.
            </summary>
            <returns>
            The task representing this operation result.
            </returns>
        </member>
        <member name="T:Kephas.Operations.OperationResultAwaiter">
            <summary>
            An operation result awaiter.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResultAwaiter"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Kephas.Operations.OperationResultAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the awaiter is completed.
            </summary>
            <value>
            <c>true</c> if this object is completed, <c>false</c> if not.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.GetResult">
            <summary>
            Notifies the awaiter to get the result.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.Create(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Creates a new <see cref="T:Kephas.Operations.OperationResultAwaiter"/> from the provided task. If the task
            returns a result, the appropriate <see cref="T:Kephas.Operations.OperationResultAwaiter`1"/> is created
            and returned.
            </summary>
            <param name="task">The task.</param>
            <param name="updateState">The action to invoke when the operation completes.</param>
            <returns>
            An OperationResultAwaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.Create``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task})">
            <summary>
            Creates a new <see cref="T:Kephas.Operations.OperationResultAwaiter"/> from the provided task. If the task
            returns a result, the appropriate <see cref="T:Kephas.Operations.OperationResultAwaiter`1"/> is created
            and returned.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="task">The task.</param>
            <param name="updateState">The action to invoke when the operation completes.</param>
            <returns>
            An OperationResultAwaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.GetTask">
            <summary>
            Gets the task.
            </summary>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.GetAwaiterCore">
            <summary>
            Gets the awaiter (core implementation).
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.CreateTaskAwaiter">
            <summary>
            Creates the task awaiter.
            </summary>
            <returns>
            The new task awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter.GetResultCore">
            <summary>
            Gets the result (core implementation).
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="T:Kephas.Operations.OperationResultAwaiter`1">
            <summary>
            An operation result awaiter.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Operations.OperationResultAwaiter`1"/>
            class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Kephas.Operations.OperationResultAwaiter`1.IsCompleted">
            <summary>
            Gets a value indicating whether the awaiter is completed.
            </summary>
            <value>
            <c>true</c> if this object is completed, <c>false</c> if not.
            </value>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter`1.GetAwaiter">
            <summary>
            Gets the awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter`1.GetResult">
            <summary>
            Notifies the awaiter to get the result.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter`1.CreateTaskAwaiter">
            <summary>
            Creates the task awaiter.
            </summary>
            <returns>
            The new task awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultAwaiter`1.GetResultCore">
            <summary>
            Gets the result (core implementation).
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="T:Kephas.Operations.OperationResultExtensions">
            <summary>
            Extensions for <see cref="T:Kephas.Operations.IOperationResult"/>.
            </summary>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Value``1(``0,System.Object)">
            <summary>
            Sets the return value to the provided one.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="value">The return value.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Value``2(``0,``1)">
            <summary>
            Sets the return value to the provided one.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <typeparam name="TValue">Type of the return value.</typeparam>
            <param name="result">The result.</param>
            <param name="value">The return value.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Complete``1(``0,System.Nullable{System.TimeSpan},System.Nullable{Kephas.Operations.OperationState})">
            <summary>
            Marks the operation as completed setting the elapsed time and, optionally, the state.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="elapsed">Optional. The elapsed time.</param>
            <param name="operationState">Optional. State of the operation.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Fail``1(``0,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{Kephas.Operations.OperationState})">
            <summary>
            Marks the operation as completed setting the elapsed time and, optionally, the state.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="exception">The exception generating the failure.</param>
            <param name="elapsed">The elapsed time.</param>
            <param name="operationState">Optional. State of the operation.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.OperationState``1(``0,Kephas.Operations.OperationState)">
            <summary>
            Sets the operation state to the provided one.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="state">The operation state.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeException``1(``0,System.Exception)">
            <summary>
            Merges the exception.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="ex">The exception.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeMessage``1(``0,System.String)">
            <summary>
            Merges the exception.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="message">The message.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeMessage``1(``0,Kephas.Operations.IOperationMessage)">
            <summary>
            Merges the exception.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="message">The message.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeMessages``1(``0,Kephas.Operations.IOperationResult)">
            <summary>
            Merges all messages and exceptions.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="resultToMerge">The result to merge.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeMessages``1(``0,System.Threading.Tasks.Task{Kephas.Operations.IOperationResult})">
            <summary>
            Merges all messages and exceptions.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="asyncResult">The task of which result will be merged.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.MergeAll``1(``0,Kephas.Operations.IOperationResult)">
            <summary>
            Merges all messages, exceptions, the elapsed time, and the return value.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="result">The result.</param>
            <param name="resultToMerge">The result to merge.</param>
            <returns>
            The provided result.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.HasErrors(Kephas.Operations.IOperationResult)">
            <summary>
            Indicates whether the result has errors.
            </summary>
            <param name="result">The result.</param>
            <returns>
            A TResult.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.HasWarnings(Kephas.Operations.IOperationResult)">
            <summary>
            Indicates whether the result has warnings.
            </summary>
            <param name="result">The result.</param>
            <returns>
            A TResult.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Warnings(Kephas.Operations.IOperationResult)">
            <summary>
            Marks the result as completed and computes the operation state.
            </summary>
            <param name="result">The result.</param>
            <returns>
            A TResult.
            </returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.ThrowIfHasErrors(Kephas.Operations.IOperationResult)">
            <summary>
            Throws an exception if the result has errors.
            </summary>
            <param name="result">The operation result.</param>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.ToOperationResult``1(``0,System.Nullable{System.TimeSpan})">
            <summary>
            Converts the provided value to a new operation result and completes it as successful.
            </summary>
            <param name="value">The result value.</param>
            <param name="elapsed">Optional. The elapsed time. If not provided will be set to zero.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The completed operation result.</returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.ToOperationResult``1(System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            Converts the provided exception to a new operation result and completes it
            either as failed, canceled, timed out, or aborted, depending on the exception type.
            </summary>
            <param name="exception">The exception.</param>
            <param name="elapsed">Optional. The elapsed time. If not provided will be set to zero.</param>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The failed operation result.</returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.ToOperationResult(System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            Converts the provided exception to a new operation result and completes it as failed.
            </summary>
            <param name="exception">The exception.</param>
            <param name="elapsed">Optional. The elapsed time. If not provided will be set to zero.</param>
            <returns>The failed operation result.</returns>
        </member>
        <member name="M:Kephas.Operations.OperationResultExtensions.Flatten``1(Kephas.Operations.IOperationResult{``0},System.Boolean)">
            <summary>
            Flattens the operation result by aggregating the elapsed time
            and messages into the nested one and returning it.
            </summary>
            <param name="aggregatedResult">The aggregated result.</param>
            <param name="throwOnNull">Optional. If set to true throws and exception if the nested result is <c>null</c>.</param>
            <typeparam name="TOperationResult">The operation result ype.</typeparam>
            <returns>The nested result with aggregated elapsed time and messages.</returns>
        </member>
        <member name="T:Kephas.Operations.OperationState">
            <summary>
            The operation state.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.NotStarted">
            <summary>
            The operation is not yet started.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.InProgress">
            <summary>
            The operation started and is in progress.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Paused">
            <summary>
            The operation is paused.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Completed">
            <summary>
            The operation completed.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Failed">
            <summary>
            The operation failed.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Canceled">
            <summary>
            The operation was canceled by the user.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Aborted">
            <summary>
            The operation was aborted.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.TimedOut">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Kephas.Operations.OperationState.Warning">
            <summary>
            The operation reported some warnings.
            </summary>
        </member>
        <member name="T:Kephas.Reflection.AggregatedElementInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Reflection.IAggregatedElementInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.AggregatedElementInfoExtensions.Aggregates(Kephas.Reflection.IAggregatedElementInfo,System.Object)">
            <summary>
            Indicates whether the <see cref="T:Kephas.Reflection.IAggregatedElementInfo"/> aggregates the provided part at any level.
            </summary>
            <remarks>The method is <c>null</c> tollerant. If <paramref name="aggregatedElementInfo"/> is <c>null</c>, <c>false</c> is returned.</remarks>
            <param name="aggregatedElementInfo">The <see cref="T:Kephas.Reflection.IAggregatedElementInfo"/> to act on.</param>
            <param name="part">The part.</param>
            <returns>
            <c>true</c> if the part is agreggated, <c>false</c> if not.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.CircularDependencyException">
            <summary>
            Exception for signalling circular dependency errors.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.CircularDependencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.CircularDependencyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Reflection.CircularDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.CircularDependencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Kephas.Reflection.DefaultTypeLoader">
            <summary>
            The default type loader.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeLoader.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.DefaultTypeLoader"/> class.
            </summary>
            <param name="logManager">Optional. Manager for log.</param>
        </member>
        <member name="P:Kephas.Reflection.DefaultTypeLoader.Instance">
            <summary>
            Gets the static instance of the <see cref="T:Kephas.Reflection.DefaultTypeLoader"/>.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeLoader.GetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable exported types from the provided assembly.
            </summary>
            <param name="assembly">The assembly containing the types.</param>
            <returns>
            An enumeration of types.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeLoader.GetLoadableDefinedTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable defined types in the assembly.
            </summary>
            <param name="assembly">The assembly to act on.</param>
            <returns>
            An enumeration of types.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.DefaultTypeResolver">
            <summary>
            A default service implementation of the <see cref="T:Kephas.Reflection.ITypeResolver"/> service contract.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeResolver.#ctor(Kephas.Application.IAppRuntime,Kephas.Reflection.ITypeLoader,Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.DefaultTypeResolver"/> class.
            </summary>
            <param name="appRuntime">The application runtime.</param>
            <param name="typeLoader">Optional. The type loader.</param>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Assembly}},Kephas.Reflection.ITypeLoader,Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.DefaultTypeResolver"/> class.
            </summary>
            <param name="getAppAssemblies">The get application assemblies.</param>
            <param name="typeLoader">Optional. The type loader.</param>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeResolver.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type based on the provided type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="throwOnNotFound">Indicates whether to throw or not when the indicated type is not found.</param>
            <returns>
            A Type.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.DefaultTypeResolver.ResolveTypeCore(System.String)">
            <summary>
            Core implementation of the <see cref="M:Kephas.Reflection.DefaultTypeResolver.ResolveType(System.String,System.Boolean)"/> operation.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>
            A Type.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.DisplayAttributeAdapter">
            <summary>
            The display attribute adapter.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.DisplayAttributeAdapter.#ctor(System.ComponentModel.DataAnnotations.DisplayAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.DisplayAttributeAdapter"/> class.
            </summary>
            <param name="displayAttr">The display attribute.</param>
        </member>
        <member name="P:Kephas.Reflection.DisplayAttributeAdapter.DisplayAttribute">
            <summary>
            Gets the display attribute.
            </summary>
            <value>
            The display attribute.
            </value>
        </member>
        <member name="M:Kephas.Reflection.DisplayAttributeAdapter.GetName">
            <summary>
            Gets the localized name.
            </summary>
            <returns>
            The localized name.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.DisplayAttributeAdapter.GetDescription">
            <summary>
            Gets the localized description.
            </summary>
            <returns>
            The localized description.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.DisplayAttributeAdapter.GetPrompt">
            <summary>
            Gets the localized prompt.
            </summary>
            <returns>
            The localized prompt.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.DisplayAttributeAdapter.GetShortName">
            <summary>
            Gets the localized short name.
            </summary>
            <returns>
            The localized short name.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicAssemblyInfo">
            <summary>
            Information about the dynamic assembly.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicAssemblyInfo.types">
            <summary>
            The types.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicAssemblyInfo.Types">
            <summary>
            Gets the types declared in this assembly.
            </summary>
            <value>
            The declared types.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicAssemblyInfo.AddType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Adds a type to the assembly.
            </summary>
            <param name="type">The type to add.</param>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicElementInfo">
            <summary>
            Dynamic element information.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicElementInfo.annotations">
            <summary>
            The annotations.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicElementInfo.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicElementInfo.FullName">
            <summary>
            Gets or sets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicElementInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicElementInfo.DeclaringContainer">
            <summary>
            Gets or sets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicElementInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicElementInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicElementInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicElementInfo.AddAnnotation(System.Object)">
            <summary>
            Adds an annotation to the dynamic element.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicOperationInfo">
            <summary>
            Information about the dynamic operation.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicOperationInfo.ReturnType">
            <summary>
            Gets or sets the return type of the method.
            </summary>
            <value>
            The return type of the method.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicOperationInfo.Parameters">
            <summary>
            Gets or sets the method parameters.
            </summary>
            <value>
            The method parameters.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicOperationInfo.Invoke(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicParameterInfo">
            <summary>
            Dynamic parameter information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicParameterInfo.ValueType">
            <summary>
            Gets or sets the parameter value type.
            </summary>
            <value>
            The parameter value type.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicParameterInfo.Position">
            <summary>
            Gets or sets the position in the parameter's list.
            </summary>
            <value>
            The position in the parameter's list.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicParameterInfo.IsOptional">
            <summary>
            Gets or sets a value indicating whether this parameter is optional.
            </summary>
            <value>
            <c>true</c> if the parameter is optional, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicParameterInfo.IsIn">
            <summary>
            Gets or sets a value indicating whether the parameter is for input.
            </summary>
            <value>
            True if this parameter is for input, false if not.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicParameterInfo.IsOut">
            <summary>
            Gets or sets a value indicating whether the parameter is for output.
            </summary>
            <value>
            True if this parameter is for output, false if not.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicParameterInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicParameterInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicPropertyInfo">
            <summary>
            Dynamic property information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicPropertyInfo.ValueType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicPropertyInfo.CanWrite">
            <summary>
            Gets or sets a value indicating whether the property can be written to.
            </summary>
            <value>
            <c>true</c> if the property can be written to; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicPropertyInfo.CanRead">
            <summary>
            Gets or sets a value indicating whether the property value can be read.
            </summary>
            <value>
            <c>true</c> if the property value can be read; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicTypeInfo">
            <summary>
            Dynamic type information.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicTypeInfo.members">
            <summary>
            The list of members.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicTypeInfo.genericTypeArguments">
            <summary>
            The list of generic type arguments.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicTypeInfo.genericTypeParameters">
            <summary>
            The list of generic type parameters.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Dynamic.DynamicTypeInfo.baseTypes">
            <summary>
            The list of base types.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.#ctor(Kephas.Reflection.ITypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Dynamic.DynamicTypeInfo"/> class.
            </summary>
            <param name="typeRegistry">The type registry.</param>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.Id">
            <summary>
            Gets the identifier for this instance.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.Namespace">
            <summary>
            Gets or sets the namespace of the type.
            </summary>
            <value>
            The namespace of the type.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.QualifiedFullName">
            <summary>
            Gets or sets the full name qualified with the module where it was defined.
            </summary>
            <value>
            The full name qualified with the module.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.BaseTypes">
            <summary>
            Gets the bases of this <see cref="T:Kephas.Reflection.ITypeInfo"/>. They include the real base and also the implemented interfaces.
            </summary>
            <value>
            The bases.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.GenericTypeParameters">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type parameters of a generic type definition (open generic).
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.GenericTypeArguments">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type arguments of a closed generic type.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.GenericTypeDefinition">
            <summary>
            Gets or sets a <see cref="T:Kephas.Reflection.ITypeInfo"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            <value>
            The generic type definition.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeInfo.Members">
            <summary>
            Gets the members.
            </summary>
            <value>
            The members.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.GetMember(System.String,System.Boolean)">
            <summary>
            Gets a member by the provided name.
            </summary>
            <param name="name">The member name.</param>
            <param name="throwIfNotFound">True to throw if the requested member is not found.</param>
            <returns>
            The requested member, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.CreateInstance(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates an instance with the provided arguments (if any).
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.MakeGenericType(System.Collections.Generic.IEnumerable{Kephas.Reflection.ITypeInfo},Kephas.Services.IContext)">
            <summary>
            Constructs a generic type baed on the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments.</param>
            <param name="constructionContext">The construction context (optional).</param>
            <returns>
            A constructed <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.AddMember(Kephas.Reflection.IElementInfo)">
            <summary>
            Adds a member to the dynamic type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="member">The member.</param>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.AddBaseType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Adds a base type to the dynamic type.
            </summary>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.AddGenericTypeParameter(Kephas.Reflection.ITypeInfo)">
            <summary>
            Adds a generic type parameter to the dynamic type.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeInfo.AddGenericTypeArgument(Kephas.Reflection.ITypeInfo)">
            <summary>
            Adds a generic type argument to the dynamic type.
            </summary>
            <param name="genericTypeArgument">The generic type argument.</param>
        </member>
        <member name="T:Kephas.Reflection.Dynamic.DynamicTypeRegistry">
            <summary>
            A type registry for dynamic types.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Dynamic.DynamicTypeRegistry.Null">
            <summary>
            Gets a dynamic type registry that does nothing.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeRegistry.GetTypeInfo(System.Object,System.Boolean)">
            <summary>
            Gets the type information based on the type token.
            </summary>
            <param name="typeToken">The type token.</param>
            <param name="throwOnNotFound">If true and if the type information is not found based on the provided token, throws an exception.</param>
            <returns>The type information.</returns>
        </member>
        <member name="M:Kephas.Reflection.Dynamic.DynamicTypeRegistry.AddTypeInfo(Kephas.Reflection.Dynamic.DynamicTypeInfo)">
            <summary>
            Adds the type information to the registry.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>This registry.</returns>
        </member>
        <member name="T:Kephas.Reflection.ElementInfoHelper">
            <summary>
            Extension methods for <see cref="T:Kephas.Reflection.IElementInfo"/>.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.ElementInfoHelper.DisplayInfoKey">
            <summary>
            The display info key.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ElementInfoHelper.GetDisplayInfo(Kephas.Reflection.IElementInfo)">
            <summary>
            Tries to compute the <see cref="T:Kephas.Reflection.IDisplayInfo"/> from the provided <see cref="T:Kephas.Reflection.IElementInfo"/>.
            </summary>
            <param name="elementInfo">Information describing the element.</param>
            <returns>
            A <see cref="T:Kephas.Reflection.IDisplayInfo"/> or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ElementInfoHelper.ComputeDisplayAttribute(Kephas.Reflection.IElementInfo)">
            <summary>
            Tries to get the display attribute from the provided <see cref="T:Kephas.Reflection.IElementInfo"/>.
            </summary>
            <param name="elementInfo">Information describing the element.</param>
            <returns>
            A <see cref="T:Kephas.Reflection.IDisplayInfo"/> attribute or <c>null</c>.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.IAggregatedElementInfo">
            <summary>
            Contract for aggregated element information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IAggregatedElementInfo.Parts">
            <summary>
            Gets the parts of an aggregated element.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="T:Kephas.Reflection.IAssemblyInfo">
            <summary>
            Interface for assembly information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IAssemblyInfo.Types">
            <summary>
            Gets the types declared in this assembly.
            </summary>
            <value>
            The declared types.
            </value>
        </member>
        <member name="T:Kephas.Reflection.IDisplayInfo">
            <summary>
            Interface for display information.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.IDisplayInfo.GetName">
            <summary>
            Gets the localized name.
            </summary>
            <returns>
            The localized name.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.IDisplayInfo.GetDescription">
            <summary>
            Gets the localized description.
            </summary>
            <returns>
            The localized description.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.IDisplayInfo.GetPrompt">
            <summary>
            Gets the localized prompt.
            </summary>
            <returns>
            The localized prompt.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.IDisplayInfo.GetShortName">
            <summary>
            Gets the localized short name.
            </summary>
            <returns>
            The localized short name.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.IElementInfo">
            <summary>
            Contract providing base element information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IElementInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IElementInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IElementInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IElementInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="M:Kephas.Reflection.IElementInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="T:Kephas.Reflection.IFieldInfo">
            <summary>
            Interface for field information.
            </summary>
        </member>
        <member name="T:Kephas.Reflection.IOperationInfo">
            <summary>
            Contract for operation information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IOperationInfo.ReturnType">
            <summary>
            Gets the return type of the method.
            </summary>
            <value>
            The return type of the method.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IOperationInfo.Parameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>
            The method parameters.
            </value>
        </member>
        <member name="M:Kephas.Reflection.IOperationInfo.Invoke(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Kephas.Reflection.OperationInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Reflection.IOperationInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.OperationInfoExtensions.InvokeAsync(Kephas.Reflection.IOperationInfo,System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the specified method on the provided instance.
            </summary>
            <param name="operationInfo">The operation info.</param>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="T:Kephas.Reflection.IParameterInfo">
            <summary>
            Interface for parameter information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IParameterInfo.Position">
            <summary>
            Gets the position in the parameter's list.
            </summary>
            <value>
            The position in the parameter's list.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IParameterInfo.IsOptional">
            <summary>
            Gets a value indicating whether this parameter is optional.
            </summary>
            <value>
            <c>true</c> if the parameter is optional, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether the parameter is for input.
            </summary>
            <value>
            True if this parameter is for input, false if not.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether the parameter is for output.
            </summary>
            <value>
            True if this parameter is for output, false if not.
            </value>
        </member>
        <member name="T:Kephas.Reflection.IPropertyInfo">
            <summary>
            Contract providing property information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
            <value>
            <c>true</c> if the property can be written to; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Reflection.IPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property value can be read.
            </summary>
            <value>
            <c>true</c> if the property value can be read; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:Kephas.Reflection.IPrototype">
            <summary>
            Provides the <see cref="M:Kephas.Reflection.IPrototype.CreateInstance(System.Collections.Generic.IEnumerable{System.Object})"/> method for creating objects based on this prototype.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.IPrototype.CreateInstance(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates an instance with the provided arguments (if any).
            </summary>
            <param name="args">Optional. The arguments.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.IToken">
            <summary>
            Defines a token.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IToken.TokenName">
            <summary>
            Gets the token name.
            </summary>
        </member>
        <member name="T:Kephas.Reflection.ITypeInfo">
            <summary>
            Contract providing type information.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.Namespace">
            <summary>
            Gets the namespace of the type.
            </summary>
            <value>
            The namespace of the type.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.QualifiedFullName">
            <summary>
            Gets the full name qualified with the module where it was defined.
            </summary>
            <value>
            The full name qualified with the module.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.BaseTypes">
            <summary>
            Gets the bases of this <see cref="T:Kephas.Reflection.ITypeInfo"/>. They include the real base and also the implemented interfaces.
            </summary>
            <value>
            The bases.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.GenericTypeParameters">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type parameters of a generic type definition (open generic).
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.GenericTypeArguments">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type arguments of a closed generic type.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.GenericTypeDefinition">
            <summary>
            Gets a <see cref="T:Kephas.Reflection.ITypeInfo"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            <value>
            The generic type definition.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.Members">
            <summary>
            Gets the members.
            </summary>
            <value>
            The members.
            </value>
        </member>
        <member name="P:Kephas.Reflection.ITypeInfo.TypeRegistry">
            <summary>
            Gets the container type registry.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ITypeInfo.GetMember(System.String,System.Boolean)">
            <summary>
            Gets a member by the provided name.
            </summary>
            <param name="name">The member name.</param>
            <param name="throwIfNotFound">True to throw if the requested member is not found.</param>
            <returns>
            The requested member, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ITypeInfo.MakeGenericType(System.Collections.Generic.IEnumerable{Kephas.Reflection.ITypeInfo},Kephas.Services.IContext)">
            <summary>
            Constructs a generic type baed on the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments.</param>
            <param name="constructionContext">Optional. The construction context.</param>
            <returns>
            A constructed <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.ITypeLoader">
            <summary>
            Interface for loading assemblies.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ITypeLoader.GetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable exported types from the provided assembly.
            </summary>
            <param name="assembly">The assembly containing the types.</param>
            <returns>
            An enumeration of types.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.ITypeRegistry">
            <summary>
            Provides access to type information.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ITypeRegistry.GetTypeInfo(System.Object,System.Boolean)">
            <summary>
            Gets the type information based on the type token.
            </summary>
            <param name="typeToken">The type token.</param>
            <param name="throwOnNotFound">If true and if the type information is not found based on the provided token, throws an exception.</param>
            <returns>The type information.</returns>
        </member>
        <member name="T:Kephas.Reflection.ITypeResolver">
            <summary>
            Service for resolving types from type names.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ITypeResolver.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolves a type based on the provided type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="throwOnNotFound">Indicates whether to throw or not when the indicated type is not found.</param>
            <returns>
            A Type.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.IValueElementInfo">
            <summary>
            Contract for reflection elements holding a value.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.IValueElementInfo.ValueType">
            <summary>
            Gets the type of the element's value.
            </summary>
            <value>
            The type of the element's value.
            </value>
        </member>
        <member name="M:Kephas.Reflection.IValueElementInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kephas.Reflection.IValueElementInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.LocalizationHelper">
            <summary>
            Localization extensions for reflection.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.LocalizationHelper.LocalizationPropertyName">
            <summary>
            Gets the dynamic localization property name.
            </summary>
            <value>
            The dynamic localization property name.
            </value>
        </member>
        <member name="F:Kephas.Reflection.LocalizationHelper.createTypeInfoLocalizationFunc">
            <summary>
            The function for creating the type info localization.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.LocalizationHelper.CreateTypeInfoLocalization">
            <summary>
            Gets or sets the function for creating the type info localization.
            </summary>
            <value>
            The function for creating the type info localization.
            </value>
        </member>
        <member name="M:Kephas.Reflection.LocalizationHelper.GetLocalization(System.Type)">
            <summary>
            Gets the localization for a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>
            The type localization.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.LocalizationHelper.GetLocalization(System.Reflection.TypeInfo)">
            <summary>
            Gets the localization for a <see cref="T:System.Reflection.TypeInfo"/>.
            </summary>
            <param name="typeInfo">The type information to act on.</param>
            <returns>
            The type localization.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.LocalizationHelper.GetLocalization(Kephas.Reflection.ITypeInfo)">
            <summary>
            Gets the localization for a <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </summary>
            <param name="typeInfo">The type information to act on.</param>
            <returns>
            The type localization.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.LocalizationHelper.GetLocalization(System.Reflection.PropertyInfo)">
            <summary>
            Gets the localization for a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="propertyInfo">The property information to act on.</param>
            <returns>
            The property localization.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.LocalizationHelper.GetLocalization(Kephas.Reflection.IPropertyInfo)">
            <summary>
            Gets the localization for a <see cref="T:Kephas.Reflection.IPropertyInfo"/>.
            </summary>
            <param name="propertyInfo">The property information to act on.</param>
            <returns>
            The property localization.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Localization.ElementInfoLocalization">
            <summary>
            Localization information for <see cref="T:Kephas.Reflection.IElementInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.ElementInfoLocalization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.ElementInfoLocalization"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.ElementInfoLocalization.#ctor(Kephas.Reflection.IElementInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.ElementInfoLocalization"/> class.
            </summary>
            <param name="elementInfo">Information describing the element.</param>
        </member>
        <member name="P:Kephas.Reflection.Localization.ElementInfoLocalization.Name">
            <summary>
            Gets or sets the localized name.
            </summary>
            <value>
            The localized name.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.ElementInfoLocalization.Description">
            <summary>
            Gets or sets the localized description.
            </summary>
            <value>
            The localized description.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.ElementInfoLocalization.ShortName">
            <summary>
            Gets or sets the localized short name.
            </summary>
            <remarks>
            The short name can be used for example in column headers.
            </remarks>
            <value>
            The localized short name.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.ElementInfoLocalization.Prompt">
            <summary>
            Gets or sets the localized value that will be used to set the watermark for prompts in the UI.
            </summary>
            <value>
            The localized value that will be used to set the watermark for prompts in the UI.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.ElementInfoLocalization.DisplayInfo">
            <summary>
            Gets the <see cref="T:Kephas.Reflection.IDisplayInfo"/> used to extract the localized values.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.ElementInfoLocalization.GetDisplayInfo(Kephas.Reflection.IElementInfo)">
            <summary>
            Tries to get the display attribute from the provided <see cref="T:Kephas.Reflection.IElementInfo"/>.
            </summary>
            <param name="elementInfo">Information describing the element.</param>
            <returns>
            A <see cref="T:Kephas.Reflection.IDisplayInfo"/> attribute or <c>null</c>.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Localization.IElementInfoLocalization">
            <summary>
            Interface for element information localization.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Localization.IElementInfoLocalization.Name">
            <summary>
            Gets the localized name.
            </summary>
            <value>
            The localized name.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.IElementInfoLocalization.Description">
            <summary>
            Gets the localized description.
            </summary>
            <value>
            The localized description.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.IElementInfoLocalization.ShortName">
            <summary>
            Gets the localized short name.
            </summary>
            <remarks>
            The short name can be used for example in column headers.
            </remarks>
            <value>
            The localized short name.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Localization.IElementInfoLocalization.Prompt">
            <summary>
            Gets the localized value that will be used to set the watermark for prompts in the UI.
            </summary>
            <value>
            The localized value that will be used to set the watermark for prompts in the UI.
            </value>
        </member>
        <member name="T:Kephas.Reflection.Localization.IMemberInfoLocalization">
            <summary>
            Interface for property information localization.
            </summary>
        </member>
        <member name="T:Kephas.Reflection.Localization.ITypeInfoLocalization">
            <summary>
            Interface for type information localization.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.Localization.ITypeInfoLocalization.Members">
            <summary>
            Gets a dictionary of members' localizations.
            </summary>
            <value>
            The members' localizations.
            </value>
        </member>
        <member name="T:Kephas.Reflection.Localization.MemberInfoLocalization">
            <summary>
            Localization information for <see cref="T:Kephas.Reflection.IPropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.MemberInfoLocalization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.MemberInfoLocalization"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.MemberInfoLocalization.#ctor(Kephas.Reflection.IElementInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.MemberInfoLocalization"/> class.
            </summary>
            <param name="memberInfo">Information describing the member.</param>
        </member>
        <member name="T:Kephas.Reflection.Localization.TypeInfoLocalization">
            <summary>
            The type info localization.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.Localization.TypeInfoLocalization.members">
            <summary>
            The members' localizations.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.TypeInfoLocalization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.TypeInfoLocalization"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Localization.TypeInfoLocalization.#ctor(Kephas.Reflection.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Localization.TypeInfoLocalization"/> class.
            </summary>
            <param name="typeInfo">Information describing the type.</param>
        </member>
        <member name="P:Kephas.Reflection.Localization.TypeInfoLocalization.Members">
            <summary>
            Gets or sets a dictionary of members' localizations.
            </summary>
            <value>
            The members' localizations.
            </value>
        </member>
        <member name="M:Kephas.Reflection.Localization.TypeInfoLocalization.CreateMemberInfoLocalization(Kephas.Reflection.IElementInfo)">
            <summary>
            Creates a member information localization.
            </summary>
            <param name="memberInfo">Information describing the member.</param>
            <returns>
            The new member information localization.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.QualifiedFullName">
            <summary>
            A qualified full name.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.QualifiedFullName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.QualifiedFullName"/> class.
            </summary>
            <param name="qualifiedFullName">The qualified full name.</param>
        </member>
        <member name="M:Kephas.Reflection.QualifiedFullName.#ctor(System.ValueTuple{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.QualifiedFullName"/> class.
            </summary>
            <param name="parts">The qualified full name parts.</param>
        </member>
        <member name="P:Kephas.Reflection.QualifiedFullName.Name">
            <summary>
            Gets the name part from the type name.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.QualifiedFullName.Namespace">
            <summary>
            Gets the namespace part from the type name.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.QualifiedFullName.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:Kephas.Reflection.QualifiedFullName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>
            The name of the assembly.
            </value>
        </member>
        <member name="M:Kephas.Reflection.QualifiedFullName.Parse(System.String)">
            <summary>
            Parses the provided string and returns the <see cref="T:Kephas.Reflection.QualifiedFullName"/> instance.
            </summary>
            <param name="qualifiedFullName">The qualified full name.</param>
            <returns>The <see cref="T:Kephas.Reflection.QualifiedFullName"/> instance.</returns>
        </member>
        <member name="T:Kephas.Reflection.ReflectionHelper">
            <summary>
            Helper class for reflection.
            </summary>
        </member>
        <member name="P:Kephas.Reflection.ReflectionHelper.IsSystemAssemblyFunc">
            <summary>
            Gets or sets the function to check whether an assembly is a system assembly.
            </summary>
            <value>
            A function delegate that yields a bool.
            </value>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.IsPrivate(System.String)">
            <summary>
            Indicates whether the identifier is private.
            </summary>
            <param name="identifier">The identifier to act on.</param>
            <returns>
            True if the identifier is private, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Retrieves the property name from a lambda expression.
            </summary>
            <typeparam name="T">The type from which the property name is extracted.</typeparam>
            <param name="expression">The property expression.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Retrieves the property name from a lambda expression.
            </summary>
            <typeparam name="T">The type from which the property name is extracted.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The property expression.</param>
            <returns>
            The property name.
            </returns>
            <exception cref="T:System.ArgumentException">Expected property expression.</exception>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetStaticPropertyName(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Retrieves the property name from a lambda expression.
            </summary>
            <param name="expression">The property expression.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetMethodOf(System.Linq.Expressions.Expression)">
            <summary>
            Gets the method indicated by the given expression.
            The given expression must be a lambda expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetGenericMethodOf(System.Linq.Expressions.Expression)">
            <summary>
            Gets the generic method indicated by the given expression.
            The given expression must be a lambda expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetMethodOf``1(System.Linq.Expressions.Expression{System.Func{System.Object,``0}})">
            <summary>
            Gets the method indicated by the given expression.
            The given expression must be a lambda expression.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="expression">The expression.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetGenericMethodOf``1(System.Linq.Expressions.Expression{System.Func{System.Object,``0}})">
            <summary>
            Gets the generic method indicated by the given expression.
            The given expression must be a lambda expression.
            </summary>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="expression">The expression.</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetAssemblyQualifiedShortName(System.Type)">
            <summary>
            Gets the assembly qualified name without the version and public key information.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The assembly qualified name without the version and public key information.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetNonGenericFullName(System.Reflection.TypeInfo)">
            <summary>
            Gets the full name of the non generic type with the same base name as the provided type.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>The full name of the non generic type.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetNonGenericFullName(System.Type)">
            <summary>
            Gets the full name of the non generic type with the same base name as the provided type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The full name of the non generic type.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.CreateStaticDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            Creates the static delegate for the provided static method.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="methodInfo">The method information.</param>
            <returns>A static delegate for the provided static method.</returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Gets a value indicating whether the provided assembly is a system assembly.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns>
            <c>true</c> if the assembly is a system assembly, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Gets a value indicating whether the provided assembly is a system assembly.
            </summary>
            <param name="assemblyName">The assembly to be checked.</param>
            <returns>
            <c>true</c> if the assembly is a system assembly, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetLocationDirectory(System.Reflection.Assembly)">
            <summary>
            Gets the location directory for the provided assembly.
            </summary>
            <param name="assembly">The assembly to be checked.</param>
            <returns>
            The assembly location directory.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.AsRuntimeAssemblyInfo(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Kephas.Runtime.IRuntimeAssemblyInfo"/> for the provided <see cref="T:System.Reflection.Assembly"/> instance.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            The provided <see cref="T:System.Reflection.Assembly"/>'s associated <see cref="T:Kephas.Runtime.IRuntimeAssemblyInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.Call(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes the <paramref name="methodInfo"/> with the provided parameters,
            ensuring in case of an exception that the original exception is thrown.
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="instance">The instance.</param>
            <param name="arguments">A variable-length parameters list containing arguments.</param>
            <returns>
            The invocation result.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionHelper.GetTypeInfo(System.Object)">
            <summary>
            Gets the most specific type information out of the provided instance.
            If the object implements <see cref="T:Kephas.IInstance"/>, then it returns
            the <see cref="T:Kephas.Reflection.ITypeInfo"/> provided by it, otherwise it returns the <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/>
            of its runtime type.
            </summary>
            <param name="obj">The object.</param>
            <returns>A type information for the provided object.</returns>
        </member>
        <member name="T:Kephas.Reflection.ReflectionStringExtensions">
            <summary>
            String extensions for reflection purposes.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.ReflectionStringExtensions.LowerCaseOffset">
            <summary>
            The lower case offset.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.ToCamelCase(System.String)">
            <summary>
            Converts the provided string value to camel case.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>
            The camel case representation of the provided value.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.ToPascalCase(System.String)">
            <summary>
            Converts the provided string value to Pascal case.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>
            The Pascal case representation of the provided value.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.SafeSubstring(System.String,System.Int32)">
            <summary>
            A string extension method that creates a safe substring from the given index.
            </summary>
            <param name="value">The value to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            A string extension method that safe substring from the given index with the given length.
            </summary>
            <param name="value">The value to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.ReflectionStringExtensions.StringBuilderThreadStatic">
            <summary>
            Use separate cache internally to avoid reallocations and cache misses.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.ReflectionStringExtensions.StringBuilderThreadStatic.cache">
            <summary>
            The cache.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.StringBuilderThreadStatic.Allocate">
            <summary>
            Allocates a new string builder.
            </summary>
            <returns>
            A StringBuilder.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.StringBuilderThreadStatic.Free(System.Text.StringBuilder)">
            <summary>
            Frees the given string builder.
            </summary>
            <param name="sb">The string builder.</param>
        </member>
        <member name="M:Kephas.Reflection.ReflectionStringExtensions.StringBuilderThreadStatic.ReturnAndFree(System.Text.StringBuilder)">
            <summary>
            Returns and frees the given string builder.
            </summary>
            <param name="sb">The string builder.</param>
            <returns>
            The string.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.Signature">
            <summary>
            A signature.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.Signature.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Signature"/> class.
            </summary>
            <param name="value">A variable-length parameters list containing value.</param>
        </member>
        <member name="M:Kephas.Reflection.Signature.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Reflection.Signature"/> class.
            </summary>
            <param name="value">A variable-length parameters list containing value.</param>
        </member>
        <member name="P:Kephas.Reflection.Signature.Count">
            <summary>
            Gets the number of items in this list.
            </summary>
            <value>
            The number of items.
            </value>
        </member>
        <member name="P:Kephas.Reflection.Signature.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>
            The element at the specified index in the read-only list.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.Equals(Kephas.Reflection.Signature)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.Signature.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.TypeExtensions">
            <summary>
            Extension methods for types.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.TypeExtensions.ObjectType">
            <summary>
            The object type.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.AsRuntimeTypeInfo(System.Type)">
            <summary>
            Gets the <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/> for the provided <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The provided <see cref="T:System.Type"/>'s associated <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.GetNonNullableType(System.Type)">
            <summary>
            Gets the type wrapped by the <see cref="T:System.Nullable`1"/> or,
            if the type is not a nullable type, the type itself.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns>A <see cref="T:System.Type"/> instance.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Indicates whether the type is an instance of the generic <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Gets a value indicating whether the type implements <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Gets a value indicating whether the type implements <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the type is a collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsDictionary(System.Type)">
            <summary>
            Gets a value indicating whether the type implements <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the type is a collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsQueryable(System.Type)">
            <summary>
            Gets a value indicating whether the type implements <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <c>true</c> if the type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.TryGetEnumerableItemType(System.Type)">
            <summary>
            Tries to get the item type of the generic enumerable type.
            </summary>
            <param name="type">The enumerable type.</param>
            <returns>The item type if the provided type is enumerable, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.TryGetQueryableItemType(System.Type)">
            <summary>
            Tries to get the item type of the generic queryable type.
            </summary>
            <param name="type">The queryable type.</param>
            <returns>The item type if the provided type is queryable, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.TryGetCollectionItemType(System.Type)">
            <summary>
            Tries to get the item type of the generic collection type.
            </summary>
            <param name="type">The collection type.</param>
            <returns>The item type if the provided type is a collection, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.TryGetEnumerableItemType(System.Type,System.Type)">
            <summary>
            Gets the generic item type of the enumerable type.
            </summary>
            <param name="type">The enumerable type.</param>
            <param name="enumerableGenericType">Type of the enumerable generic.</param>
            <returns>
            The enumerable item type.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.IsConstructedGenericOf(System.Type,System.Type)">
            <summary>
            Indicates whether the type is a constructed generic of the provided open generic type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="openGenericType">The open generic type.</param>
            <returns>
            <c>true</c> if the type is a constructed generic of the provided open generic type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.GetBaseConstructedGenericOf(System.Type,System.Type)">
            <summary>
            A Type extension method that gets the base constructed generic of a provided type.
            The base can be either an interface or a class.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="openGenericType">The open generic type of which constructed generic type is requested.</param>
            <returns>
            The base constructed generic.
            </returns>
            <example>
            <code>
            var type = typeof(string).GetBaseConstructedGenericOf(typeof(IEnumerable&lt;&gt;));
            Assert.AreSame(type, typeof(IEnumerable&lt;char&gt;));
            </code>
            </example>
        </member>
        <member name="M:Kephas.Reflection.TypeExtensions.GetQualifiedFullName(System.Type,System.Boolean)">
            <summary>
            Gets the qualified full name of a <see cref="T:System.Type"/>. Optionally, strips away the version information.
            </summary>
            <param name="type">The type instance.</param>
            <param name="stripVersionInfo"><c>true</c> to strip away the version information (optional).</param>
            <returns>
            The qualified full name.
            </returns>
        </member>
        <member name="T:Kephas.Reflection.TypeInfoExtensions">
            <summary>
            Extension methods for type information.
            </summary>
        </member>
        <member name="F:Kephas.Reflection.TypeInfoExtensions.ObjectTypeInfo">
            <summary>
            Information describing the object type.
            </summary>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.AsType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Gets the <see cref="T:System.Type"/> for the provided <see cref="T:Kephas.Reflection.ITypeInfo"/> instance.
            </summary>
            <param name="typeInfo">The type information instance.</param>
            <returns>
            The provided <see cref="T:Kephas.Reflection.ITypeInfo"/>'s associated <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.IsGenericType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Indicates whether the <see cref="T:Kephas.Reflection.ITypeInfo"/> is a generic type.
            </summary>
            <param name="typeInfo">The type information instance.</param>
            <returns>
            <c>true</c> if the type is generic, either closed or open; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.IsGenericTypeDefinition(Kephas.Reflection.ITypeInfo)">
            <summary>
            Indicates whether the <see cref="T:Kephas.Reflection.ITypeInfo"/> is a generic type definition (aka open generic).
            </summary>
            <param name="typeInfo">The type information instance.</param>
            <returns>
            <c>true</c> if the type is a generic type definition; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.IsConstructedGenericType(Kephas.Reflection.ITypeInfo)">
            <summary>
            Indicates whether the <see cref="T:Kephas.Reflection.ITypeInfo"/> is a generic type definition (aka open generic).
            </summary>
            <param name="typeInfo">The type information instance.</param>
            <returns>
            <c>true</c> if the type is a generic type definition; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.GetDeclaredMembers(Kephas.Reflection.ITypeInfo)">
            <summary>
            Gets the model element's own members, excluding those declared by the base element or mixins.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>The members declared exclusively at the type level.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.GetNonNullableType(System.Reflection.TypeInfo)">
            <summary>
            Gets the type wrapped by the <see cref="T:System.Nullable`1"/> or,
            if the type is not a nullable type, the type itself.
            </summary>
            <param name="typeInfo">The type to be checked.</param>
            <returns>A <see cref="T:System.Type"/> instance.</returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.IsNullableType(System.Reflection.TypeInfo)">
            <summary>
            Indicates whether the type is an instance of the generic <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="typeInfo">The type to check.</param>
            <returns>
              <c>true</c> if the type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.GetBaseConstructedGenericOf(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            A TypeInfo extension method that gets the base constructed generic of a provided type.
            The base can be either an interface or a class.
            </summary>
            <param name="typeInfo">The type to act on.</param>
            <param name="openGenericTypeInfo">The open generic type of which constructed generic type is requested.</param>
            <returns>
            The base constructed generic.
            </returns>
            <example>
            <code>
            var type = typeof(string).GetTypeInfo().GetBaseConstructedGenericOf(typeof(IEnumerable&lt;&gt;).GetTypeInfo());
            Assert.AreSame(type, typeof(IEnumerable&lt;char&gt;).GetTypeInfo());
            </code>
            </example>
        </member>
        <member name="M:Kephas.Reflection.TypeInfoExtensions.GetQualifiedFullName(System.Reflection.TypeInfo,System.Boolean)">
            <summary>
            Gets the qualified full name of a <see cref="T:System.Reflection.TypeInfo"/>. Optionally, strips away the version information.
            </summary>
            <param name="typeInfo">The type information instance.</param>
            <param name="stripVersionInfo"><c>true</c> to strip away the version information (optional).</param>
            <returns>
            The qualified full name.
            </returns>
        </member>
        <member name="T:Kephas.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ActivatorBase_CannotGetImplementationType_Exception">
            <summary>
              Looks up a localized string similar to Cannot get the implementation type for the provided abstract type info &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ActivatorBase_CannotInstantiateAbstractTypeInfo_Exception">
            <summary>
              Looks up a localized string similar to Cannot instantiate the type &apos;{0}&apos; because it could not be resolved to an implementation type..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_AmbiguousConstructors_Exception">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has at least two constructors with the same length which can be resolved through composition: ({1}) and ({2})..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_Instance_MayBeSetOnlyOnce_Exception">
            <summary>
              Looks up a localized string similar to The globally available instance of the ambient services may be set only once, before reading its value for the first time. Please consider setting its value before any other operation in your application..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_MissingCompositionConstructor_Exception">
            <summary>
              Looks up a localized string similar to No composition constructor could be identified for &apos;{0}&apos;. The following parameters could not be resolved: {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_RequiredServiceNotRegistered_Exception">
            <summary>
              Looks up a localized string similar to The required service &apos;{0}&apos; is not registered, or the factory returned a null value..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_ServiceTypeAndImplementationMismatch_Exception">
            <summary>
              Looks up a localized string similar to The provided service implementation &apos;{0}&apos; is not convertible to the service type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_ServiceTypeAndServiceInstanceMismatch_Exception">
            <summary>
              Looks up a localized string similar to The provided service instance &apos;{0}&apos; is not convertible to the service type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbientServices_ServiceTypeMustBeSuperOfContractType_Exception">
            <summary>
              Looks up a localized string similar to The service type &apos;{0}&apos; must be a super type of the contract type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AmbiguousOverrideForAppServiceContract">
            <summary>
              Looks up a localized string similar to Multiple application services registered for the contract {0} and the override priority does not allow a proper service resolution. The service {1} will be used. Identified eligible parts: {2}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_Bootstrapping_Message">
            <summary>
              Looks up a localized string similar to Bootstrapping the application....
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_ConfiguringAmbientServices_Message">
            <summary>
              Looks up a localized string similar to Configuring the ambient services....
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_ErrorDuringConfiguration_Exception">
            <summary>
              Looks up a localized string similar to Errors occurred during the application configuration procedure, please check the exception details for more information..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_ErrorDuringForcedShutdown_Exception">
            <summary>
              Looks up a localized string similar to Errors occurred during the application forced shut down procedure, please check the exception details for more information..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_ErrorDuringInitialization_Exception">
            <summary>
              Looks up a localized string similar to Errors occurred during the application bootstrap procedure, please check the exception details for more information..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_InitializingAppManager_Message">
            <summary>
              Looks up a localized string similar to Initializing the app manager....
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_BootstrapAsync_StartComplete_Message">
            <summary>
              Looks up a localized string similar to The application bootstrapped successfully..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_ShutdownAsync_Complete_Message">
            <summary>
              Looks up a localized string similar to The application shut down successfully. Good bye!.
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_ShutdownAsync_ErrorDuringFinalization_Exception">
            <summary>
              Looks up a localized string similar to Errors occurred during the application shutdown procedure, please check the exception details for more information..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.App_ShutdownAsync_ShuttingDown_Message">
            <summary>
              Looks up a localized string similar to Shutting down the application....
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AppRuntimeBase_CannotLoadAssembly_Exception">
            <summary>
              Looks up a localized string similar to Cannot load assembly &apos;{assembly}&apos;. See the exception for more information..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AppServiceCompositionContractTypeDoesNotMatchServiceContract">
            <summary>
              Looks up a localized string similar to The specified contract type &apos;{0}&apos; is not assignable from the service contract &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AppServiceConventionsRegistrarBase_AsOpenGenericDoesNotSupportMetadataAttributes_Warning">
            <summary>
              Looks up a localized string similar to Application service contracts exported as open generics do not support metadata attributes and they will be ignored (&apos;{serviceContractType}&apos;). Instead, try to pass metadata through generic parameter types..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.AppServiceMultipleCompositionConstructors">
            <summary>
              Looks up a localized string similar to Multiple constructors marked with {0} are declared for service implementation &apos;{1}&apos; with contract &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.CompositionContainerBuilderBase_RequiredServiceMissing_Exception">
            <summary>
              Looks up a localized string similar to The required service of type &apos;{0}&apos; was not provided..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.CompositionHelper_ToDictionary_CannotResolveServicePriority_Exception">
            <summary>
              Looks up a localized string similar to Cannot resolve priorities of service &apos;{0}&apos; for two instances: {1} and {2}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ConcurrentCollection_CannotAddItem_Exception">
            <summary>
              Looks up a localized string similar to Could not add the item {0} to the concurrent collection..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ConfigurationBase_SettingValueNotSupported_Exception">
            <summary>
              Looks up a localized string similar to Setting a value is not supported by the default implementation of the configuration. Override this in a derived class to provide an implementation..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ConfigurationStoreSettingsProvider_SettingsTypeMismatch_Exception">
            <summary>
              Looks up a localized string similar to The stored settings type &apos;{0}&apos; differs from the requested settings type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.Context_CannotChangeIdentity_Exception">
            <summary>
              Looks up a localized string similar to Cannot change the identity in the context once it has been set..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ContextFactory_CreateContext_ContextTypeMustBeInstatiable">
            <summary>
              Looks up a localized string similar to The context type &apos;{0}&apos; must be an instatiable class..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ContextFactory_CreateContext_NonNullArguments">
            <summary>
              Looks up a localized string similar to Arguments may not be null when instatiating context of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ContextFactory_GetCreatorFunc_CannotFindMatchingConstructor">
            <summary>
              Looks up a localized string similar to Cannot find a matching constructor for signature {0} in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultAppManager_FinalizeCanceled_Exception">
            <summary>
              Looks up a localized string similar to The application&apos;s finalize procedure was canceled, at {0:s}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultAppManager_FinalizeFaulted_Exception">
            <summary>
              Looks up a localized string similar to The application&apos;s finalize procedure encountered an exception at {0:s}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultAppManager_InitializeCanceled_Exception">
            <summary>
              Looks up a localized string similar to The application&apos;s initialize procedure was canceled, at {0:s}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultAppManager_InitializeFaulted_Exception">
            <summary>
              Looks up a localized string similar to The application&apos;s initialize procedure encountered an exception at {0:s}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultAssemblyLoader_LoadAssemblyFromPathNotSupported_Exception">
            <summary>
              Looks up a localized string similar to Please use a more specific assembly loader, which can load from a file path, like DefaultAssemblyLoader..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultEventHub_ErrorWhenInvokingSubscriptionCallback">
            <summary>
              Looks up a localized string similar to An error occurred when invoking subscription callback for &apos;{event}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultMediaTypeProvider_NotFound_Exception">
            <summary>
              Looks up a localized string similar to No media type class  found for &apos;{0}&apos;. Resolution: define a class implementing {1} with the indicated media type..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultNamedServiceProvider_GetNamedService_AmbiguousMatch_Exception">
            <summary>
              Looks up a localized string similar to Multiple services found for {0}/{1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultNamedServiceProvider_GetNamedService_NoServiceFound_Exception">
            <summary>
              Looks up a localized string similar to No service found for {0}/{1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultSerializationService_SerializerNotFound_Exception">
            <summary>
              Looks up a localized string similar to A serializer for the media type &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeLoader_GetLoadableDefinedTypes_ReflectionTypeLoadException">
            <summary>
              Looks up a localized string similar to Cannot load all defined types from {assembly}. Only the loadable types will be considered..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeLoader_GetLoadableExportedTypes_ReflectionTypeLoadException">
            <summary>
              Looks up a localized string similar to Cannot load all exported types from {assembly}. Only the loadable types will be considered..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeLoader_GetLoadableExportedTypes_TypeLoadException">
            <summary>
              Looks up a localized string similar to Cannot load exported type {type} from {assembly}. Only the loadable types will be considered..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeResolver_ResolveType_AmbiguousMatch_Exception">
            <summary>
              Looks up a localized string similar to Multiple types found for &apos;{0}&apos; : {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeResolver_ResolveType_NotFound_Exception">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DefaultTypeResolver_ResolveTypeCore_Exception">
            <summary>
              Looks up a localized string similar to Errors occurred when trying to resolve type &apos;{type}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DuplicateKeyException_Message">
            <summary>
              Looks up a localized string similar to An item with the same key is already added..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DynamicAssemblyInfo_AddType_Duplicate_Exception">
            <summary>
              Looks up a localized string similar to Duplicate type with full name &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DynamicTypeInfo_AddBaseType_TypeCannotBeABaseOfItself_Exception">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be a base of itself..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.DynamicTypeInfo_AddMember_Duplicate_Exception">
            <summary>
              Looks up a localized string similar to Duplicate member with name &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ExpandoBase_CannotInvokeNonDelegate_Exception">
            <summary>
              Looks up a localized string similar to Cannot invoke non-delegate value of {0}; it has a type of {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.GraphBaseOfTNodeValue_AmbiguousMatchForValue_Exception">
            <summary>
              Looks up a localized string similar to Multiple nodes found for value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.LazyFactory_CircularDependency_Exception">
            <summary>
              Looks up a localized string similar to Circular dependency involving &apos;{0}&apos; detected..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.LiteRegistrationBuilder_CannotIdentifyConstructedServiceType_Exception">
            <summary>
              Looks up a localized string similar to Cannot identify the constructed service type of {0} from {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.LiteRegistrationBuilder_InvalidRegistration_Exception">
            <summary>
              Looks up a localized string similar to One of {0}, {1}, or {2} must be set in service registration..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.NoImplementationForServiceType_Exception">
            <summary>
              Looks up a localized string similar to No implementation found for service type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.NullServiceExceptionMessage">
            <summary>
              Looks up a localized string similar to {0} is intended to be replaced by a proper implementation..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.OperationResult_Merge_TaskNotCompleteException">
            <summary>
              Looks up a localized string similar to Cannot merge the task result, the task is not completed..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.PartialOrderedSet_BadComparer_ProducesCycles_Exception">
            <summary>
              Looks up a localized string similar to The provided comparer function produces cycles in the sorted graph. This indicates that there are cyclic dependencies which need to be broken in order to produce an ordered set. Check the following nodes: {0}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.Requires_NotNullOrEmpty_EmptyArgument_Exception">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; must not be null nor empty..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimePropertyInfo_GetValue_Exception">
            <summary>
              Looks up a localized string similar to No get accessor for property &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimePropertyInfo_SetValue_Exception">
            <summary>
              Looks up a localized string similar to No set accessor for property &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_AmbiguousMember_Exception">
            <summary>
              Looks up a localized string similar to There are multiple members with the name &apos;{0}&apos; in &apos;{1}&apos;. Please use {2} to disambiguate between them..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_CreateRuntimeTypeInfo_InvalidConstructor_Exception">
            <summary>
              Looks up a localized string similar to The type {0} provided in the [{1}] attribute must implement have a public constructor accepting a single type parameter..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_CreateRuntimeTypeInfo_InvalidType_Exception">
            <summary>
              Looks up a localized string similar to The type {0} provided in the [{1}] attribute must implement {2}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_MemberNotFound_Exception">
            <summary>
              Looks up a localized string similar to Member {0} not found in {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_NoPublicConstructorDefined_Exception">
            <summary>
              Looks up a localized string similar to No public constructor defined for &apos;{0}&apos;, cannot create instances..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.RuntimeTypeInfo_PropertyNotFound_Exception">
            <summary>
              Looks up a localized string similar to Property {0} not found or is not accessible in {1}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.Serialization_MediaTypeMismatch_Exception">
            <summary>
              Looks up a localized string similar to Expected {0} instead of {1} media type in the serialization context..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.SerializationExtensions_GetContextFactory_CannotGetContextFactory">
            <summary>
              Looks up a localized string similar to The type {0} should export a public property {1}: {2} to be able to create a serialization context..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ServiceRegistrationBuilder_InstancingNotProvided_Exception">
            <summary>
              Looks up a localized string similar to Either the implementation type, the factory, or the service instance must be provided for &apos;{0}&apos;. Check also whether the {1} value should be set to {2}..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.ServiceRegistry_MismatchedMultipleServiceRegistration_Exception">
            <summary>
              Looks up a localized string similar to The service {0} is registered both as multiple and single service..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.SettingsProviderSelector_NoProviderFoundForSettingsType">
            <summary>
              Looks up a localized string similar to No provider found for settings type &apos;{settingsType}&apos;..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.TaskNotCompletedException_Message">
            <summary>
              Looks up a localized string similar to The task is not completed..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.TransitionMonitor_AssertIsCompleted_Exception">
            <summary>
              Looks up a localized string similar to The {0} of &apos;{1}&apos; is not completed..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.TransitionMonitor_AssertIsCompletedSuccessfully_Exception">
            <summary>
              Looks up a localized string similar to The {0} of &apos;{1}&apos; is not completed successfully..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.TransitionMonitor_AssertIsInProgress_Exception">
            <summary>
              Looks up a localized string similar to The {0} of &apos;{1}&apos; is not in progress..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.TransitionMonitor_AssertIsNotStarted_Exception">
            <summary>
              Looks up a localized string similar to The {0} of &apos;{1}&apos; is already started..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.UnhandledException_InProcess_Message">
            <summary>
              Looks up a localized string similar to Unhandled exception in process..
            </summary>
        </member>
        <member name="P:Kephas.Resources.Strings.UnhandledException_Terminating_Message">
            <summary>
              Looks up a localized string similar to Unhandled exception terminating the process..
            </summary>
        </member>
        <member name="T:Kephas.Runtime.AttributedModel.InAttribute">
            <summary>
            Attribute for input parameters.
            </summary>
        </member>
        <member name="T:Kephas.Runtime.AttributedModel.OutAttribute">
            <summary>
            Attribute for output parameters.
            </summary>
        </member>
        <member name="T:Kephas.Runtime.AttributedModel.ReturnTypeAttribute">
            <summary>
            Attribute for indicating the return type of an operation.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.AttributedModel.ReturnTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.AttributedModel.ReturnTypeAttribute"/> class.
            </summary>
            <param name="value">The type of the return value.</param>
        </member>
        <member name="P:Kephas.Runtime.AttributedModel.ReturnTypeAttribute.Value">
            <summary>
            Gets the type of the return value.
            </summary>
            <value>
            The type of the return value.
            </value>
        </member>
        <member name="T:Kephas.Runtime.IAttributeProvider">
            <summary>
            Contract for reflective objects providing runtime attributes.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.IAttributeProvider.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.AttributeProviderExtensions">
            <summary>
            Provides extension methods for <see cref="T:Kephas.Runtime.IAttributeProvider"/>.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.AttributeProviderExtensions.GetAttribute``1(Kephas.Runtime.IAttributeProvider)">
            <summary>
            Gets the single attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <param name="attributeProvider">The attribute provider.</param>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeAssemblyInfo">
            <summary>
            Interface for runtime assembly information.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeAssemblyInfo.GetUnderlyingAssemblyInfo">
            <summary>
            Gets the underlying assembly information.
            </summary>
            <returns>
            The underlying assembly information.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeElementInfo">
            <summary>
            Interface for dynamic element information.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeElementInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying element information.
            </summary>
            <returns>
            The underlying element information.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeFieldInfo">
            <summary>
            Interface for runtime field information.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeFieldInfo.ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeFieldInfo.FieldInfo">
            <summary>
            Gets the field information.
            </summary>
            <value>
            The field information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeFieldInfo.IsStatic">
            <summary>
            Gets a value indicating whether this field is static.
            </summary>
            <value>
            True if this field is static, false if not.
            </value>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeMethodInfo">
            <summary>
            Contract for a dynamic <see cref="P:Kephas.Runtime.IRuntimeMethodInfo.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeMethodInfo.ReturnType">
            <summary>
            Gets the return type of the method.
            </summary>
            <value>
            The return type of the method.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeMethodInfo.Parameters">
            <summary>
            Gets the runtime parameters.
            </summary>
            <value>
            The runtime parameters.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeMethodInfo.MethodInfo">
            <summary>
            Gets the method information.
            </summary>
            <value>
            The method information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeMethodInfo.IsStatic">
            <summary>
            Gets a value indicating whether this method is static.
            </summary>
            <value>
            True if this method is static, false if not.
            </value>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeMethodInfo.TryInvoke(System.Object,System.Collections.Generic.IEnumerable{System.Object},System.Object@)">
            <summary>
            Tries to invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <param name="result">The invocation result.</param>
            <returns>A boolean value indicating whether the invocation was successful or not.</returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeParameterInfo">
            <summary>
            Interface for runtime parameter information.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeParameterInfo.ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="T:Kephas.Runtime.IRuntimePropertyInfo">
            <summary>
            Contract for a dynamic <see cref="P:Kephas.Runtime.IRuntimePropertyInfo.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimePropertyInfo.ValueType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimePropertyInfo.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>
            The property information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimePropertyInfo.IsStatic">
            <summary>
            Gets a value indicating whether this property is static.
            </summary>
            <value>
            True if this property is static, false if not.
            </value>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeTypeInfo">
            <summary>
            Contract for a dynamic <see cref="P:Kephas.Runtime.IRuntimeTypeInfo.TypeInfo"/>.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Type">
            <summary>
            Gets the underlying <see cref="P:Kephas.Runtime.IRuntimeTypeInfo.Type"/>.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.TypeInfo">
            <summary>
            Gets the underlying <see cref="P:Kephas.Runtime.IRuntimeTypeInfo.TypeInfo"/>.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.TypeRegistry">
            <summary>
            Gets the container type registry.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.DefaultValue">
            <summary>
            Gets the default value of the type.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Kind">
            <summary>
            Gets the runtime type kind.
            </summary>
            <value>
            The runtime type kind.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Members">
            <summary>
            Gets the members.
            </summary>
            <value>
            The members.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Kephas.Runtime.IRuntimeTypeInfo.Methods">
            <summary>
            Gets the methods.
            </summary>
            <value>
            The methods.
            </value>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The value of the specified property.
            </returns>
            <remarks>
            If a property with the provided name is not found, an exception occurs.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.TryGetValue(System.Object,System.String,System.Object@)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The property value.</param>
            <returns>
            A boolean value indicating whether the property is found.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <remarks>
            If a property with the provided name is not found, an exception occurs.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.TrySetValue(System.Object,System.String,System.Object)">
            <summary>
            Tries to set the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value could be set; otherwise <c>false</c>.</returns>
            <remarks>
            If a property with the provided name is not found, the method just returns.
            Also, the method just returns if the instance passed is <c>null</c>.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.Invoke(System.Object,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments.</param>
            <returns>The invocation result.</returns>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfo.TryInvoke(System.Object,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Object@)">
            <summary>
            Tries to invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments.</param>
            <param name="result">The invocation result.</param>
            <returns>A boolean value indicating whether the invocation was successful or not.</returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeTypeInfoFactory">
            <summary>
            Contract for factories creating <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/> instances.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeInfoFactory.TryCreateRuntimeTypeInfo(System.Type)">
            <summary>
            Tries to create the runtime type information type for the provided raw type.
            </summary>
            <param name="type">The raw type.</param>
            <returns>
            The matching runtime type information type, or <c>null</c> if a runtime type info could not be created.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.IRuntimeTypeRegistry">
            <summary>
            The interface for the runtime type serviceRegistry.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeRegistry.GetTypeInfo(System.Type)">
            <summary>
            Gets the runtime type.
            </summary>
            <param name="type">The type.</param>
            <returns>A runtime type.</returns>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeRegistry.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
            Gets the runtime assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A runtime assembly.</returns>
        </member>
        <member name="M:Kephas.Runtime.IRuntimeTypeRegistry.RegisterFactory(Kephas.Runtime.IRuntimeTypeInfoFactory)">
            <summary>
            Registers a factory used to create <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/> instances.
            </summary>
            <remarks>
            Factories are called in the inverse order of their addition, meaning that the last added factory
            is invoked first. This is by design, so that the non-framework code has a change to override the
            default behavior.
            </remarks>
            <param name="factory">The factory.</param>
        </member>
        <member name="T:Kephas.Runtime.RuntimeTypeRegistryExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Runtime.IRuntimeTypeRegistry"/>.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistryExtensions.GetTypeInfo(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.TypeInfo)">
            <summary>
            Gets the runtime type information.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="typeInfo">The type information.</param>
            <returns>A runtime type.</returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeActivator">
            <summary>
            Activator based on the runtime type information.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeActivator.Instance">
            <summary>
            The static instance of the runtime activator.
            </summary>
        </member>
        <member name="T:Kephas.Runtime.RuntimeAssemblyInfo">
            <summary>
            Information about the runtime assembly. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.Assembly,Kephas.Reflection.ITypeLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeAssemblyInfo"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="assembly">The assembly.</param>
            <param name="typeLoader">The type loader.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeAssemblyInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeAssemblyInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeAssemblyInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeAssemblyInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeAssemblyInfo.Types">
            <summary>
            Gets the types declared in this assembly.
            </summary>
            <value>
            The declared types.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.op_Equality(Kephas.Runtime.RuntimeAssemblyInfo,Kephas.Runtime.RuntimeAssemblyInfo)">
            <summary>
            Determines whether the runtime assemblies are based on the same assembly.
            </summary>
            <param name="left">The object on the left side.</param>
            <param name="right">The object on the right side.</param>
            <returns>True, if both runtime assemblies are based on the same assembly, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.op_Inequality(Kephas.Runtime.RuntimeAssemblyInfo,Kephas.Runtime.RuntimeAssemblyInfo)">
            <summary>
            Determines whether the runtime assemblies are not based on the same assembly.
            </summary>
            <param name="left">The object on the left side.</param>
            <param name="right">The object on the right side.</param>
            <returns>True, if the runtime assemblies are not based on the same assembly, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.Equals(Kephas.Runtime.IRuntimeAssemblyInfo)">
            <summary>
            Determines whether this runtime assembly is equal to the provided one.
            </summary>
            <param name="other">The other runtime assembly.</param>
            <returns>True, if both runtime assemblies are based on the same assembly, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.Equals(Kephas.Runtime.RuntimeAssemblyInfo)">
            <summary>
            Determines whether this runtime assembly is equal to the provided one.
            </summary>
            <param name="other">The other runtime assembly.</param>
            <returns>True, if both runtime assemblies are based on the same assembly, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.Equals(System.Object)">
            <summary>
            Determines whether this runtime assembly is equal to the provided one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True, if both runtime assemblies are based on the same assembly, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.GetHashCode">
            <summary>
            Gets a hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.Kephas#Runtime#IRuntimeElementInfo#GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.GetUnderlyingAssemblyInfo">
            <summary>
            Gets the underlying assembly information.
            </summary>
            <returns>
            The underlying assembly information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.CreateTypeInfos(System.Reflection.Assembly)">
            <summary>
            Creates the list of type information from the provided assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            The types in the assembly.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeAssemblyInfo.GetTypes">
            <summary>
            Gets the types in this assembly.
            </summary>
            <returns>
            An enumeration of types.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeElementInfoBase">
            <summary>
            Base class for runtime element infos.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeElementInfoBase.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeElementInfoBase.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeElementInfoBase"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry containing this element.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeElementInfoBase.TypeRegistry">
            <summary>
            Gets the container type registry.
            </summary>
        </member>
        <member name="T:Kephas.Runtime.RuntimeEnvironment">
            <summary>
            Helper methods for interacting with the runtime environment.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeEnvironment.LibraryPathEnvVariable">
            <summary>
            The library path environment variable.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeEnvironment.WindowsDirectorySeparatorChar">
            <summary>
            The Windows path separator.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeEnvironment.UnixDirectorySeparatorChar">
            <summary>
            The Unix path separator.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeEnvironment.WindowsNewLine">
            <summary>
            The Windows new line.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeEnvironment.UnixNewLine">
            <summary>
            The Unix new line.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeEnvironment.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeEnvironment.IsDomainJoinedMachine">
            <summary>
            Gets a value indicating whether the machine domain joined.
            </summary>
            <value>
            True if the machine is domain joined, false if not.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeEnvironment.IsMonoRuntime">
            <summary>
            Indicates wheter the application runs on the Mono runtime.
            </summary>
            <returns>
            True if the application runs on the Mono runtime, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeEnvironment.IsUnix">
            <summary>
            Checks whether .NET is running on the Mono Platform by asking Environment.OSVersion.Platform. Can
            be overridden for testing purposes by setting AppEnvironment.Platform.
            </summary>
            <returns>
            True if the operating system is Unix like, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeEnvironment.IsWindows">
            <summary>
            Checks whether .NET is running on the Mono Platform by asking Environment.OSVersion.Platform. Can
            be overridden for testing purposes by setting AppEnvironment.Platform.
            </summary>
            <returns>
            True if the operating system is Unix like, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeFieldInfo">
            <summary>
            Implementation of <see cref="T:Kephas.Runtime.IRuntimeFieldInfo" /> for runtime fields.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.FieldInfo,System.Int32,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeFieldInfo"/> class.
            </summary>
            <param name="typeRegistry">The runtime type serviceRegistry.</param>
            <param name="fieldInfo">The field information.</param>
            <param name="position">Optional. The position.</param>
            <param name="logger">Optional. the logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.FieldInfo">
            <summary>
            Gets the field information.
            </summary>
            <value>
            The field information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.IsStatic">
            <summary>
            Gets a value indicating whether this field is static.
            </summary>
            <value>
            True if this field is static, false if not.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeFieldInfo.Kephas#Reflection#IValueElementInfo#ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.MemberAccessException">Property value cannot be set.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.MemberAccessException">Property value cannot be get.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeFieldInfo`2">
            <summary>
            Implementation of <see cref="T:Kephas.Runtime.IRuntimeFieldInfo" /> for runtime fields.
            </summary>
            <typeparam name="T">The container type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo`2.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.FieldInfo,System.Int32,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeFieldInfo`2"/> class.
            </summary>
            <param name="typeRegistry">The runtime type serviceRegistry.</param>
            <param name="fieldInfo">The field information.</param>
            <param name="position">Optional. The position.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.MemberAccessException">Property value cannot be set.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimeFieldInfo`2.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.MemberAccessException">Property value cannot be get.</exception>
        </member>
        <member name="T:Kephas.Runtime.RuntimeMethodInfo">
            <summary>
            Implementation of <see cref="T:Kephas.Runtime.IRuntimeMethodInfo"/> for runtime methods.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeMethodInfo.parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.MethodInfo,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeMethodInfo"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="methodInfo">The method information.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.Parameters">
            <summary>
            Gets the runtime parameters.
            </summary>
            <value>
            The runtime parameters.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.Kephas#Reflection#IOperationInfo#Parameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>
            The method parameters.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.IsStatic">
            <summary>
            Gets a value indicating whether this method is static.
            </summary>
            <value>
            True if this method is static, false if not.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.Kephas#Reflection#IOperationInfo#ReturnType">
            <summary>
            Gets the return type of the method.
            </summary>
            <value>
            The return type of the method.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeMethodInfo.ReturnType">
            <summary>
            Gets the return type of the method.
            </summary>
            <value>
            The return type of the method.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.Invoke(System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            The invoke.
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The args.</param>
            <returns>
            The <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.TryInvoke(System.Object,System.Collections.Generic.IEnumerable{System.Object},System.Object@)">
            <summary>
            Tries to invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="args">The arguments.</param>
            <param name="result">The invocation result.</param>
            <returns>A boolean value indicating whether the invocation was successful or not.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.CreateParameterInfos(System.Reflection.MethodInfo)">
            <summary>
            Creates parameter infos.
            </summary>
            <param name="methodInfo">The method information.</param>
            <returns>
            The new parameter infos.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeMethodInfo.GetParameters">
            <summary>
            Gets the parameter infos, initializing them if necessary.
            </summary>
            <returns>
            The parameters.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeParameterInfo">
            <summary>
            Information about the runtime parameter.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeParameterInfo.declaringContainerRef">
            <summary>
            The declaring container reference.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.ParameterInfo,Kephas.Reflection.IElementInfo,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeParameterInfo"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="parameterInfo">Information describing the parameter.</param>
            <param name="declaringContainer">The declaring element.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.ParameterInfo">
            <summary>
            Gets information describing the parameter.
            </summary>
            <value>
            Information describing the parameter.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.Position">
            <summary>
            Gets the position in the parameter's list.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.IsOptional">
            <summary>
            Gets a value indicating whether this parameter is optional.
            </summary>
            <value>
            <c>true</c> if the parameter is optional, <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether the parameter is for input.
            </summary>
            <value>
            True if this parameter is for input, false if not.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether the parameter is for output.
            </summary>
            <value>
            True if this parameter is for output, false if not.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeParameterInfo.Kephas#Reflection#IValueElementInfo#ValueType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeParameterInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimePropertyInfo">
            <summary>
            Implementation of <see cref="T:Kephas.Runtime.IRuntimePropertyInfo" /> for runtime properties.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.PropertyInfo,System.Int32,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimePropertyInfo"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="propertyInfo">The property information.</param>
            <param name="position">Optional. The position.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.Name">
            <summary>
            Gets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
            <value>
            The property information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.IsStatic">
            <summary>
            Gets a value indicating whether this property is static.
            </summary>
            <value>
            True if this property is static, false if not.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.ValueType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.Kephas#Reflection#IValueElementInfo#ValueType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
            <value>
            <c>true</c> if the property can be written to; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property value can be read.
            </summary>
            <value>
            <c>true</c> if the property value can be read; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.MemberAccessException">Property value cannot be set.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.MemberAccessException">Property value cannot be get.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimePropertyInfo`2">
            <summary>
            Implementation of <see cref="T:Kephas.Runtime.IRuntimePropertyInfo" /> for typed runtime properties.
            </summary>
            <typeparam name="T">The container type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="F:Kephas.Runtime.RuntimePropertyInfo`2.getterComputed">
            <summary>
            True if getter computed.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimePropertyInfo`2.getter">
            <summary>
            The getter.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimePropertyInfo`2.setterComputed">
            <summary>
            True if setter computed.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimePropertyInfo`2.setter">
            <summary>
            The setter.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo`2.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.PropertyInfo,System.Int32,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimePropertyInfo`2"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="propertyInfo">The property information.</param>
            <param name="position">Optional. The position.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo`2.CanRead">
            <summary>
            Gets a value indicating whether the property value can be read.
            </summary>
            <value>
            <c>true</c> if the property value can be read; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo`2.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
            <value>
            <c>true</c> if the property can be written to; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo`2.Getter">
            <summary>
            Gets the getter.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimePropertyInfo`2.Setter">
            <summary>
            Gets the setter.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo`2.SetValue(System.Object,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.MemberAccessException">Property value cannot be set.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo`2.GetValue(System.Object)">
            <summary>
            Gets the value from the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:System.MemberAccessException">Property value cannot be get.</exception>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo`2.ComputeGetter">
            <summary>
            Computes the member get delegate.
            </summary>
            <returns>
            The member get delegate.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimePropertyInfo`2.ComputeSetter">
            <summary>
            Computes the member set delegate.
            </summary>
            <returns>
            The member set delegate.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.InstanceActivator">
            <summary>
            An object activator delegate.
            </summary>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            An object.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeTypeInfo">
            <summary>
            Provides optimized and extensible access to a type's methods and properties at runtime.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.baseTypes">
            <summary>
            The base <see cref="T:Kephas.Reflection.ITypeInfo"/>s.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.genericTypeParameters">
            <summary>
            The generic type parameters.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.genericTypeArguments">
            <summary>
            The generic type arguments.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.genericTypeDefinition">
            <summary>
            The generic type definition.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.defaultValue">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.defaultValueCreated">
            <summary>
            True if default value created.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.instanceActivator">
            <summary>
            The instance activator.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeInfo.declaringContainer">
            <summary>
            The declaring container.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Reflection.TypeInfo,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeTypeInfo"/> class.
            </summary>
            <param name="typeRegistry">The container type serviceRegistry.</param>
            <param name="typeInfo">The <see cref="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo"/>.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Type,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeTypeInfo"/> class.
            </summary>
            <param name="typeRegistry">The container type serviceRegistry.</param>
            <param name="type">The type.</param>
            <param name="logger">Optional. The logger.</param>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Type,System.Reflection.TypeInfo,Kephas.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeTypeInfo"/> class.
            </summary>
            <param name="typeRegistry">The container type serviceRegistry.</param>
            <param name="type">The type.</param>
            <param name="typeInfo">The <see cref="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo"/>.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Name">
            <summary>
            Gets the name of the type.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.FullName">
            <summary>
            Gets the full name of the element.
            </summary>
            <value>
            The full name of the element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.QualifiedFullName">
            <summary>
            Gets the full name qualified with the module where it was defined.
            </summary>
            <value>
            The full name qualified with the module.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Namespace">
            <summary>
            Gets the namespace of the type.
            </summary>
            <value>
            The namespace of the type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.DefaultValue">
            <summary>
            Gets the default value of the type.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Kind">
            <summary>
            Gets the runtime type kind.
            </summary>
            <value>
            The runtime type kind.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.BaseTypes">
            <summary>
            Gets the bases of this <see cref="T:Kephas.Reflection.ITypeInfo"/>. They include the real base and also the implemented interfaces.
            </summary>
            <value>
            The bases.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.GenericTypeParameters">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type parameters of a generic type definition (open generic).
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.GenericTypeArguments">
            <summary>
            Gets a read-only list of <see cref="T:Kephas.Reflection.ITypeInfo"/> objects that represent the type arguments of a closed generic type.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.GenericTypeDefinition">
            <summary>
            Gets a <see cref="T:Kephas.Reflection.ITypeInfo"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            <value>
            The generic type definition.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Kephas#Reflection#ITypeInfo#Properties">
            <summary>
            Gets the enumeration of properties.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Kephas#Reflection#ITypeInfo#Members">
            <summary>
            Gets the members.
            </summary>
            <value>
            The members.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Kephas#Reflection#ITypeInfo#TypeRegistry">
            <summary>
            Gets the container type registry.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Annotations">
            <summary>
            Gets the element annotations.
            </summary>
            <value>
            The element annotations.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.DeclaringContainer">
            <summary>
            Gets the parent element declaring this element.
            </summary>
            <value>
            The declaring element.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo">
            <summary>
            Gets the underlying <see cref="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo"/>.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Members">
            <summary>
            Gets the members.
            </summary>
            <value>
            The members.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Fields">
            <summary>
            Gets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Properties">
            <summary>
            Gets the runtime properties.
            </summary>
            <value>
            The runtime properties.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeInfo.Methods">
            <summary>
            Gets the runtime methods.
            </summary>
            <value>
            The runtime methods.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.op_Equality(Kephas.Runtime.RuntimeTypeInfo,Kephas.Runtime.RuntimeTypeInfo)">
            <summary>
            Determines whether the runtime types are based on the same type.
            </summary>
            <param name="left">The object on the left side.</param>
            <param name="right">The object on the right side.</param>
            <returns>True, if both runtime types are based on the same type, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.op_Inequality(Kephas.Runtime.RuntimeTypeInfo,Kephas.Runtime.RuntimeTypeInfo)">
            <summary>
            Determines whether the runtime types are not based on the same type.
            </summary>
            <param name="left">The object on the left side.</param>
            <param name="right">The object on the right side.</param>
            <returns>True, if the runtime types are not based on the same type, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.Equals(Kephas.Runtime.RuntimeTypeInfo)">
            <summary>
            Determines whether this runtime type is equal to the provided one.
            </summary>
            <param name="other">The other runtime type.</param>
            <returns>True, if both runtime types are based on the same type, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.Equals(Kephas.Runtime.IRuntimeTypeInfo)">
            <summary>
            Determines whether the runtime types are based on the same type.
            </summary>
            <param name="other">The other runtime type.</param>
            <returns>True, if both runtime types are based on the same type, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.Equals(System.Object)">
            <summary>
            Determines whether the runtime types are based on the same type.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>True, if both runtime types are based on the same type, otherwise false.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetHashCode">
            <summary>
            Gets a hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetDisplayInfo">
            <summary>
            Gets the display information.
            </summary>
            <returns>The display information.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetUnderlyingElementInfo">
            <summary>
            Gets the underlying member information.
            </summary>
            <returns>
            The underlying member information.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetMember(System.String,System.Boolean)">
            <summary>
            Gets a member by the provided name.
            </summary>
            <param name="name">The name.</param>
            <param name="throwIfNotFound">True to throw if the requested member is not found.</param>
            <returns>
            The requested member, or <c>null</c>.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            The value of the specified property.
            </returns>
            <remarks>
            If a property with the provided name is not found, an exception occurs.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.TryGetValue(System.Object,System.String,System.Object@)">
            <summary>
            Gets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The property value.</param>
            <returns>
            A boolean value indicating whether the property is found.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <remarks>
            If a property with the provided name is not found, an exception occurs.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.TrySetValue(System.Object,System.String,System.Object)">
            <summary>
            Tries to set the value of the property with the specified name.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if the value could be set; otherwise <c>false</c>.
            </returns>
            <remarks>
            If a property with the provided name is not found, the method just returns.
            </remarks>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.Invoke(System.Object,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments.</param>
            <returns>
            The invocation result.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.TryInvoke(System.Object,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Object@)">
            <summary>
            Tries to invokes the specified method on the provided instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments.</param>
            <param name="result">The invocation result.</param>
            <returns>A boolean value indicating whether the invocation was successful or not.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateInstance(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates an instance with the provided arguments (if any).
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.MakeGenericType(System.Collections.Generic.IEnumerable{Kephas.Reflection.ITypeInfo},Kephas.Services.IContext)">
            <summary>
            Constructs a generic type baed on the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments.</param>
            <param name="constructionContext">The construction context (optional).</param>
            <returns>
            A constructed <see cref="T:Kephas.Reflection.ITypeInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetAttributes``1">
            <summary>
            Gets the attribute of the provided type.
            </summary>
            <typeparam name="TAttribute">Type of the attribute.</typeparam>
            <returns>
            The attribute of the provided type.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetTypeProperties(System.Type)">
            <summary>
            Gets the type's proper properties: public, non-static, and without parameters.
            </summary>
            <param name="type">The type.</param>
            <returns>An enumeration of property infos.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateMemberInfos(System.Action{System.Collections.Generic.IDictionary{System.String,Kephas.Runtime.IRuntimeElementInfo}})">
            <summary>
            Creates the member infos.
            </summary>
            <param name="membersConfig">Optional. The members configuration.</param>
            <returns>
            The new member infos.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateMembers``2(System.Type,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Type},System.Func{``0,System.Boolean})">
            <summary>
            Creates the members.
            </summary>
            <typeparam name="TRuntimeMemberInfo">Type of the runtime member.</typeparam>
            <typeparam name="TMemberInfo">Type of the member.</typeparam>
            <param name="type">The type.</param>
            <param name="runtimeMembers">The runtime members.</param>
            <param name="memberTypeGetter">The member type getter.</param>
            <param name="criteria">Optional. The criteria.</param>
            <returns>
            A dictionary of members.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateFieldInfos(System.Type,System.Func{System.Reflection.FieldInfo,System.Boolean})">
            <summary>
            Creates the fields.
            </summary>
            <param name="type">The type.</param>
            <param name="criteria">Optional. The criteria.</param>
            <returns>
            A dictionary of fields.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreatePropertyInfos(System.Type,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Creates the properties.
            </summary>
            <param name="type">The container type.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            A dictionary of properties.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateGenericTypeParameters(System.Reflection.TypeInfo)">
            <summary>
            Creates the generic parameters.
            </summary>
            <param name="typeInfo">The <see cref="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo"/>.</param>
            <returns>
            The new generic arguments.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateGenericTypeArguments(System.Reflection.TypeInfo)">
            <summary>
            Creates the generic arguments.
            </summary>
            <param name="typeInfo">The <see cref="P:Kephas.Runtime.RuntimeTypeInfo.TypeInfo"/>.</param>
            <returns>
            The new generic arguments.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetProperty(System.String,System.Boolean)">
            <summary>
            Gets the runtime property for the provided property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="throwOnNotFound">If set to <c>true</c> an exception is thrown if the property is not found.</param>
            <returns>
            The runtime property.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetMethods(System.String,System.Boolean)">
            <summary>
            Gets the runtime methods for the provided method name.
            </summary>
            <param name="methodName">Name of the property.</param>
            <param name="throwOnNotFound">If set to <c>true</c> an exception is thrown if the method is not found.</param>
            <returns>
            The runtime method.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.GetMatchingMethod(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Gets the matching method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="args">The arguments.</param>
            <param name="throwOnNotFound">If set to <c>true</c> an exception is thrown if the method is not found.</param>
            <returns>
            A matching method for the provided name and arguments.
            </returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfo.CreateInstanceActivator">
            <summary>
            Creates an optimized instance activator.
            </summary>
            <returns>
            The new instance activator.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeTypeInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeInfoExtensions.CreateInstance(Kephas.Runtime.IRuntimeTypeInfo,System.Object[])">
            <summary>
            Creates an instance with the provided arguments (if any).
            </summary>
            <param name="typeInfo">The type information.</param>
            <param name="args">The arguments.</param>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="T:Kephas.Runtime.RuntimeTypeKind">
            <summary>
            Values that represent runtime type kinds.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeKind.Unknown">
            <summary>
            The runtime type is unknown.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeKind.Class">
            <summary>
            The runtime type is a class.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeKind.Interface">
            <summary>
            The runtime type is an interface.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeKind.Enum">
            <summary>
            The runtime type is an enum.
            </summary>
        </member>
        <member name="T:Kephas.Runtime.RuntimeTypeRegistry">
            <summary>
            Provides methods for accessing runtime type information.
            </summary>
        </member>
        <member name="F:Kephas.Runtime.RuntimeTypeRegistry.createRuntimeTypeInfoFunc">
            <summary>
            The function for creating the type info.
            </summary>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistry.#ctor(Kephas.Reflection.ITypeLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Runtime.RuntimeTypeRegistry"/> class.
            </summary>
            <param name="typeLoader">Optional. The type loader.</param>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeRegistry.Instance">
            <summary>
            Gets the static instance of the type serviceRegistry.
            </summary>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeRegistry.CreateRuntimeTypeInfo">
            <summary>
            Gets or sets the function for creating the runtime type information.
            </summary>
            <value>
            The function for creating the runtime type information.
            </value>
        </member>
        <member name="P:Kephas.Runtime.RuntimeTypeRegistry.CreateRuntimeAssemblyInfo">
            <summary>
            Gets or sets the function for creating the runtime assembly information.
            </summary>
            <value>
            The function for creating the runtime assembly information.
            </value>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistry.GetTypeInfo(System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistry.GetTypeInfo(System.Type)">
            <summary>
            Gets the runtime type.
            </summary>
            <param name="type">The type.</param>
            <returns>A runtime type.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistry.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
            Gets the runtime assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A runtime assembly.</returns>
        </member>
        <member name="M:Kephas.Runtime.RuntimeTypeRegistry.RegisterFactory(Kephas.Runtime.IRuntimeTypeInfoFactory)">
            <summary>
            Registers a factory used to create <see cref="T:Kephas.Runtime.IRuntimeTypeInfo"/> instances.
            </summary>
            <remarks>
            Factories are called in the inverse order of their addition, meaning that the last added factory
            is invoked first. This is by design, so that the non-framework code has a change to override the
            default behavior.
            </remarks>
            <param name="factory">The factory.</param>
        </member>
        <member name="T:Kephas.Security.Authentication.AuthenticationContext">
            <summary>
            An authentication context.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.AuthenticationContext.#ctor(Kephas.Composition.ICompositionContext,Kephas.Security.Authentication.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authentication.AuthenticationContext"/> class.
            </summary>
            <param name="compositionContext">The context for the composition.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="P:Kephas.Security.Authentication.AuthenticationContext.ThrowOnFailure">
            <summary>
            Gets or sets a value indicating whether to throw on failure.
            </summary>
            <value>
            True if throw on failure, false if not.
            </value>
        </member>
        <member name="P:Kephas.Security.Authentication.AuthenticationContext.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="T:Kephas.Security.Authentication.IAuthenticationContext">
            <summary>
            Interface for authentication context.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authentication.IAuthenticationContext.Credentials">
            <summary>
            Gets the credentials.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="P:Kephas.Security.Authentication.IAuthenticationContext.ThrowOnFailure">
            <summary>
            Gets or sets a value indicating whether to throw on failure.
            </summary>
            <value>
            True if throw on failure, false if not.
            </value>
        </member>
        <member name="T:Kephas.Security.Authentication.AuthenticationContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Security.Authentication.IAuthenticationContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.AuthenticationContextExtensions.ThrowOnFailure``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to throw on failure.
            </summary>
            <typeparam name="TContext">Actual type of the authentication context.</typeparam>
            <param name="context">The authentication context.</param>
            <param name="value">True to throw on failure, false otherwise.</param>
            <returns>
            This <see cref="T:Kephas.Security.Authentication.IAuthenticationContext"/>.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authentication.IAuthenticationService">
            <summary>
            Singleton application service contract for handing authentication.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.IAuthenticationService.AuthenticateAsync(Kephas.Security.Authentication.ICredentials,System.Action{Kephas.Security.Authentication.IAuthenticationContext},System.Threading.CancellationToken)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="authConfig">Optional. The authentication configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.IAuthenticationService.GetIdentityAsync(System.Object,System.Action{Kephas.Services.IContext},System.Threading.CancellationToken)">
            <summary>
            Gets asynchronously the identity for the provided token.
            </summary>
            <param name="token">The token.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.IAuthenticationService.GetTokenAsync(System.Security.Principal.IIdentity,System.Action{Kephas.Services.IContext},System.Threading.CancellationToken)">
            <summary>
            Gets asynchronously a token for the provided identity.
            </summary>
            <param name="identity">The identity.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the token.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authentication.ISyncAuthenticationService">
            <summary>
            Interface for a synchronous authentication service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.ISyncAuthenticationService.Authenticate(Kephas.Security.Authentication.ICredentials,System.Action{Kephas.Security.Authentication.IAuthenticationContext})">
            <summary>
            Authenticates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="authConfig">Optional. The authentication configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.ISyncAuthenticationService.GetIdentity(System.Object,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets the identity for the provided token.
            </summary>
            <param name="token">The token.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.ISyncAuthenticationService.GetToken(System.Security.Principal.IIdentity,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets a token for the provided identity.
            </summary>
            <param name="identity">The identity.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The token.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authentication.AuthenticationServiceExtensions">
            <summary>
            An authentication service extensions.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.AuthenticationServiceExtensions.Authenticate(Kephas.Security.Authentication.IAuthenticationService,Kephas.Security.Authentication.ICredentials,System.Action{Kephas.Security.Authentication.IAuthenticationContext})">
            <summary>
            Authenticates the user.
            </summary>
            <param name="authenticationService">The authentication service to act on.</param>
            <param name="credentials">The credentials.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.AuthenticationServiceExtensions.GetIdentity(Kephas.Security.Authentication.IAuthenticationService,System.Object,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets the identity for the provided token.
            </summary>
            <param name="authenticationService">The authentication service to act on.</param>
            <param name="token">The token.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.AuthenticationServiceExtensions.GetToken(Kephas.Security.Authentication.IAuthenticationService,System.Security.Principal.IIdentity,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets a token for the provided identity.
            </summary>
            <param name="authenticationService">The authentication service to act on.</param>
            <param name="identity">The identity.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The token.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authentication.ICredentials">
            <summary>
            Interface for credentials.
            </summary>
        </member>
        <member name="T:Kephas.Security.Authentication.NullAuthenticationService">
            <summary>
            A null security service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.AuthenticateAsync(Kephas.Security.Authentication.ICredentials,System.Action{Kephas.Security.Authentication.IAuthenticationContext},System.Threading.CancellationToken)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="authConfig">Optional. The authentication configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.GetIdentityAsync(System.Object,System.Action{Kephas.Services.IContext},System.Threading.CancellationToken)">
            <summary>
            Gets asynchronously the identity for the provided token.
            </summary>
            <param name="token">The token.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.GetTokenAsync(System.Security.Principal.IIdentity,System.Action{Kephas.Services.IContext},System.Threading.CancellationToken)">
            <summary>
            Gets asynchronously a token for the provided identity.
            </summary>
            <param name="identity">The identity.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the token.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.Authenticate(Kephas.Security.Authentication.ICredentials,System.Action{Kephas.Security.Authentication.IAuthenticationContext})">
            <summary>
            Authenticates the user.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="authConfig">Optional. The authentication configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.GetIdentity(System.Object,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets the identity for the provided token.
            </summary>
            <param name="token">The token.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The identity.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authentication.NullAuthenticationService.GetToken(System.Security.Principal.IIdentity,System.Action{Kephas.Services.IContext})">
            <summary>
            Gets a token for the provided identity.
            </summary>
            <param name="identity">The identity.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The token.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authentication.TokenCredentials">
            <summary>
            Token based credentials.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.TokenCredentials.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authentication.TokenCredentials"/> class.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:Kephas.Security.Authentication.TokenCredentials.Token">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:Kephas.Security.Authentication.UserPasswordCredentials">
            <summary>
            User and password based credentials.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.UserPasswordCredentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authentication.UserPasswordCredentials"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The user password.</param>
        </member>
        <member name="P:Kephas.Security.Authentication.UserPasswordCredentials.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Kephas.Security.Authentication.UserPasswordCredentials.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:Kephas.Security.Authentication.UserPasswordHashCredentials">
            <summary>
            User and password hash based credentials.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authentication.UserPasswordHashCredentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authentication.UserPasswordHashCredentials"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="passwordHash">The hashed user password, encoded as a Base64 string.</param>
        </member>
        <member name="M:Kephas.Security.Authentication.UserPasswordHashCredentials.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authentication.UserPasswordHashCredentials"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="passwordHash">The hashed user password.</param>
        </member>
        <member name="P:Kephas.Security.Authentication.UserPasswordHashCredentials.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Kephas.Security.Authentication.UserPasswordHashCredentials.PasswordHash">
            <summary>
            Gets the hashed password.
            </summary>
            <value>
            The hashed password.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AppAdminPermission">
            <summary>
            Defines the global application administration permission.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.AppAdminPermission.TokenName">
            <summary>
            The name of the AppAdmin permission.
            </summary>
        </member>
        <member name="T:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior">
            <summary>
            An authorization application lifecycle behavior.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior.#ctor(Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
        </member>
        <member name="M:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior.BeforeAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior.AfterAppInitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous initialization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            The asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior.BeforeAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called before the application starts its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authorization.Application.AuthorizationAppLifecycleBehavior.AfterAppFinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Interceptor called after the application completes its asynchronous finalization.
            </summary>
            <param name="appContext">Context for the application.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.AttributedModel.GrantsPermissionAttribute">
            <summary>
            Attribute indicating that the permission to access/execute/use the decorated element is granted.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.AttributedModel.GrantsPermissionAttribute.PermissionTypesMetadataKey">
            <summary>
            The permission types metadata key.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AttributedModel.GrantsPermissionAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AttributedModel.GrantsPermissionAttribute"/> class.
            </summary>
            <param name="permissions">A variable-length parameters list containing the required permissions.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AttributedModel.GrantsPermissionAttribute.PermissionTypes">
            <summary>
            Gets the types of the granted permissions.
            </summary>
            <value>
            The types of the granted permissions.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AttributedModel.PermissionInfoAttribute">
            <summary>
            Attribute indicating that the permission to access/execute/use the decorated element is granted.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AttributedModel.PermissionInfoAttribute.#ctor(System.String,Kephas.Security.Authorization.Scoping)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AttributedModel.PermissionInfoAttribute"/> class.
            </summary>
            <param name="tokenName">The permission's token name.</param>
            <param name="scoping">The permission scoping.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AttributedModel.PermissionInfoAttribute.Scoping">
            <summary>
            Gets the scoping.
            </summary>
            <value>
            The scoping.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.AttributedModel.PermissionInfoAttribute.TokenName">
            <summary>
            Gets the name of the permission token.
            </summary>
            <value>
            The name of the permission token.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AttributedModel.RequiresPermissionAttribute">
            <summary>
            Attribute indicating the required permission to access/execute/use the decorated element.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.AttributedModel.RequiresPermissionAttribute.PermissionTypesMetadataKey">
            <summary>
            The permission types metadata key.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AttributedModel.RequiresPermissionAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AttributedModel.RequiresPermissionAttribute"/> class.
            </summary>
            <param name="permissions">A variable-length parameters list containing the required permissions.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AttributedModel.RequiresPermissionAttribute.PermissionTypes">
            <summary>
            Gets the types of the required permissions.
            </summary>
            <value>
            The types of the required permissions.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AttributedModel.SupportsPermissionAttribute">
            <summary>
            Attribute indicating that the decorated element supports the enumerated permissions.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.AttributedModel.SupportsPermissionAttribute.PermissionTypesMetadataKey">
            <summary>
            The permission types metadata key.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AttributedModel.SupportsPermissionAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AttributedModel.SupportsPermissionAttribute"/> class.
            </summary>
            <param name="permissions">A variable-length parameters list containing the required permissions.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AttributedModel.SupportsPermissionAttribute.PermissionTypes">
            <summary>
            Gets the types of the required permissions.
            </summary>
            <value>
            The types of the required permissions.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationContext">
            <summary>
            An authorization context.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationContext.#ctor(Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AuthorizationContext"/> class.
            </summary>
            <param name="executingContext">Context for the executing.</param>
            <param name="requiredPermissions">The required permissions.</param>
            <param name="scope">Optional. The authorization scope.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AuthorizationContext.RequiredPermissions">
            <summary>
            Gets the required permissions.
            </summary>
            <value>
            The required permissions.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.AuthorizationContext.Scope">
            <summary>
            Gets the authorization scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.AuthorizationContext.ThrowOnFailure">
            <summary>
            Gets or sets a value indicating whether to throw on failure.
            </summary>
            <value>
            True if throw on failure, false if not.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationException">
            <summary>
            Exception for signaling authorization errors.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AuthorizationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AuthorizationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationScopeContext">
            <summary>
            An authorization scope context.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationScopeContext.#ctor(Kephas.Services.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.AuthorizationScopeContext"/> class.
            </summary>
            <param name="callingContext">Context for the calling.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.AuthorizationScopeContext.CallingContext">
            <summary>
            Gets or sets the calling context.
            </summary>
            <value>
            The calling context.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.DefaultAuthorizationScopeService">
            <summary>
            A default authorization scope service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.DefaultAuthorizationScopeService.#ctor(System.Collections.Generic.ICollection{Kephas.Composition.IExportFactory{Kephas.Security.Authorization.IAuthorizationScopeProvider,Kephas.Services.Composition.AppServiceMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.DefaultAuthorizationScopeService"/> class.
            </summary>
            <param name="providerFactories">The provider factories.</param>
        </member>
        <member name="M:Kephas.Security.Authorization.DefaultAuthorizationScopeService.GetAuthorizationScopeAsync(Kephas.Services.IContext,System.Action{Kephas.Security.Authorization.IAuthorizationScopeContext},System.Threading.CancellationToken)">
            <summary>
            Gets the authorization scope asynchronously.
            </summary>
            <param name="callingContext">The calling context.</param>
            <param name="optionsConfig">The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the authorization scope.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authorization.DefaultAuthorizationScopeService.CreateScopeContext(Kephas.Services.IContext,System.Action{Kephas.Security.Authorization.IAuthorizationScopeContext})">
            <summary>
            Creates the scope context.
            </summary>
            <param name="callingContext">The calling context.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <returns>
            The new scope context.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IAuthorizationContext">
            <summary>
            Interface for authorization context.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authorization.IAuthorizationContext.RequiredPermissions">
            <summary>
            Gets the required permissions.
            </summary>
            <value>
            The required permissions.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.IAuthorizationContext.Scope">
            <summary>
            Gets the authorization scope.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.IAuthorizationContext.ThrowOnFailure">
            <summary>
            Gets or sets a value indicating whether to throw on authorization failure.
            If <c>false</c> is indicated, the authorization check will return <c>false</c> upon failure,
            otherwise an exception will occur.
            </summary>
            <value>
            True to throw on authorization failure, false to not throw and return <c>false</c>.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Security.Authorization.IAuthorizationContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationContextExtensions.ThrowOnFailure``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to throw on failure.
            </summary>
            <typeparam name="TContext">Actual type of the authorization context.</typeparam>
            <param name="context">The authorization context.</param>
            <param name="value">True to throw on failure, false otherwise.</param>
            <returns>
            This <see cref="T:Kephas.Security.Authorization.IAuthorizationContext"/>.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IAuthorizationScopeContext">
            <summary>
            Interface for authorization scope context.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authorization.IAuthorizationScopeContext.CallingContext">
            <summary>
            Gets or sets the calling context.
            </summary>
            <value>
            The calling context.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationScopeContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Security.Authorization.IAuthorizationScopeContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationScopeContextExtensions.ThrowOnFailure``1(``0,Kephas.Services.IContext)">
            <summary>
            Sets a value indicating whether to throw on failure.
            </summary>
            <typeparam name="TContext">Actual type of the authorization context.</typeparam>
            <param name="context">The authorization context.</param>
            <param name="callingContext">The calling context.</param>
            <returns>
            This <see cref="T:Kephas.Security.Authorization.IAuthorizationContext"/>.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IAuthorizationScopeProvider">
            <summary>
            Singleton application service contract for providing the authorization scope for a message.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.IAuthorizationScopeProvider.GetAuthorizationScopeAsync(Kephas.Security.Authorization.IAuthorizationScopeContext,System.Threading.CancellationToken)">
            <summary>
            Gets the authorization scope asynchronously.
            </summary>
            <param name="context">The scope context.</param>
            <param name="cancellationToken">Optional. the cancellation token.</param>
            <returns>
            An asynchronous result that yields the authorization scope and a boolean value indicating
            whether the resolution was successful or not.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IAuthorizationScopeService">
            <summary>
            Interface for authorization scope service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.IAuthorizationScopeService.GetAuthorizationScopeAsync(Kephas.Services.IContext,System.Action{Kephas.Security.Authorization.IAuthorizationScopeContext},System.Threading.CancellationToken)">
            <summary>
            Gets the authorization scope asynchronously.
            </summary>
            <param name="callingContext">The calling context.</param>
            <param name="optionsConfig">Optional. The options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the authorization scope.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IAuthorizationService">
            <summary>
            Singleton application service contract for handling authorization.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.IAuthorizationService.AuthorizeAsync(Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Action{Kephas.Security.Authorization.IAuthorizationContext},System.Threading.CancellationToken)">
            <summary>
            Query asynchronously whether the authorization context has the requested permissions.
            </summary>
            <param name="executionContext">The context for the execution to be authorized.</param>
            <param name="permissions">The permissions.</param>
            <param name="scope">Optional. The authorization scope.</param>
            <param name="authConfig">Optional. The authorization configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result returning true if permission is granted, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.ISyncAuthorizationService">
            <summary>
            Interface providing synchronous methods for the authorization service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.ISyncAuthorizationService.Authorize(Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Action{Kephas.Security.Authorization.IAuthorizationContext})">
            <summary>
            Query whether the authorization context has the requested permissions.
            </summary>
            <param name="executionContext">The context for the execution to be authorized.</param>
            <param name="permissions">The permissions.</param>
            <param name="scope">Optional. The authorization scope.</param>
            <param name="authConfig">Optional. The authorization configuration.</param>
            <returns>
            True if permission is granted, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.AuthorizationServiceExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Security.Authorization.IAuthorizationService"/>.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.AuthorizationServiceExtensions.Authorize(Kephas.Security.Authorization.IAuthorizationService,Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Action{Kephas.Security.Authorization.IAuthorizationContext})">
            <summary>
            Query whether the authorization context has the requested permissions.
            </summary>
            <param name="authorizationService">The authorization service to act on.</param>
            <param name="executionContext">The context for the execution to be authorized.</param>
            <param name="permissions">The permissions.</param>
            <param name="scope">Optional. The autorization scope.</param>
            <param name="authConfig">Optional. The authorization configuration.</param>
            <returns>
            An asynchronous result returning true if permission is granted, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.IPermission">
            <summary>
            Marker interface for permissions.
            </summary>
        </member>
        <member name="T:Kephas.Security.Authorization.NullAuthorizationService">
            <summary>
            A null authorization service.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.NullAuthorizationService.AuthorizeAsync(Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Action{Kephas.Security.Authorization.IAuthorizationContext},System.Threading.CancellationToken)">
            <summary>
            Query asynchronously whether the authorization context has the requested permissions.
            </summary>
            <param name="executionContext">The context for the execution to be authorized.</param>
            <param name="permissions">The permissions.</param>
            <param name="scope">Optional. The authorization scope.</param>
            <param name="authConfig">Optional. The authorization configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result returning true if permission is granted, false if not.
            </returns>
        </member>
        <member name="M:Kephas.Security.Authorization.NullAuthorizationService.Authorize(Kephas.Services.IContext,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Action{Kephas.Security.Authorization.IAuthorizationContext})">
            <summary>
            Query whether the authorization context has the requested permissions.
            </summary>
            <param name="executionContext">The context for the execution to be authorized.</param>
            <param name="permissions">The permissions.</param>
            <param name="scope">Optional. The authorization scope.</param>
            <param name="authConfig">Optional. The authorization configuration.</param>
            <returns>
            True if permission is granted, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.Reflection.IPermissionInfo">
            <summary>
            Reflective information about a permission.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authorization.Reflection.IPermissionInfo.GrantedPermissions">
            <summary>
            Gets the granted permissions.
            </summary>
            <remarks>
            When this permission is granted, the permissions granted by this are also granted.
            Using this mechanism one can define a hierarchy of permissions.
            </remarks>
            <value>
            The granted permissions.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.Reflection.IPermissionInfo.RequiredPermissions">
            <summary>
            Gets the required permissions to access this permission.
            </summary>
            <value>
            The required permissions.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.Reflection.IScoped">
            <summary>
            Provides the <see cref="P:Kephas.Security.Authorization.Reflection.IScoped.Scoping"/> property.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authorization.Reflection.IScoped.Scoping">
            <summary>
            Gets the scoping.
            </summary>
            <value>
            The scoping.
            </value>
        </member>
        <member name="T:Kephas.Security.Authorization.Runtime.AuthorizationTypeInfoFactory">
            <summary>
            The <see cref="T:Kephas.Runtime.IRuntimeTypeInfoFactory"/> for the authorization subsystem.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.Runtime.AuthorizationTypeInfoFactory.#ctor(Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.Runtime.AuthorizationTypeInfoFactory"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
        </member>
        <member name="M:Kephas.Security.Authorization.Runtime.AuthorizationTypeInfoFactory.TryCreateRuntimeTypeInfo(System.Type)">
            <summary>
            Tries to create the runtime type information type for the provided raw type.
            </summary>
            <param name="type">The raw type.</param>
            <returns>
            The matching runtime type information type, or <c>null</c> if a runtime type info could not be created.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo">
            <summary>
            A permission info based on a runtime type.
            </summary>
        </member>
        <member name="M:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.#ctor(Kephas.Runtime.IRuntimeTypeRegistry,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo"/> class.
            </summary>
            <param name="typeRegistry">The type serviceRegistry.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.TokenName">
            <summary>
            Gets the token name.
            </summary>
        </member>
        <member name="P:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.Scoping">
            <summary>
            Gets the scoping.
            </summary>
            <value>
            The scoping.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.GrantedPermissions">
            <summary>
            Gets the granted permissions.
            </summary>
            <remarks>
            When this permission is granted, the permissions granted by this are also granted.
            Using this mechanism one can define a hierarchy of permissions.
            </remarks>
            <value>
            The granted permissions.
            </value>
        </member>
        <member name="P:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.RequiredPermissions">
            <summary>
            Gets the required permissions to access this permission.
            </summary>
            <value>
            The required permissions.
            </value>
        </member>
        <member name="M:Kephas.Security.Authorization.Runtime.RuntimePermissionInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Security.Authorization.Scoping">
            <summary>
            Values that represent permission scoping.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.Scoping.None">
            <summary>
            Scoping is not supported by this permission type.
            </summary>
            <remarks>
            This value is provided as default, although it is more or less invalid.
            A permission with scoping <see cref="F:Kephas.Security.Authorization.Scoping.None"/> is not usable.
            </remarks>
        </member>
        <member name="F:Kephas.Security.Authorization.Scoping.Global">
            <summary>
            No scoping required for this permission type, it will be granted and verified at global level.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.Scoping.Type">
            <summary>
            The scoping is granted and verified at type level.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.Scoping.Instance">
            <summary>
            The scoping is granted and verified at instance level.
            </summary>
        </member>
        <member name="T:Kephas.Security.Authorization.SystemPermission">
            <summary>
            Defines the system permission reserved by the internal system identity.
            </summary>
        </member>
        <member name="F:Kephas.Security.Authorization.SystemPermission.TokenName">
            <summary>
            The token name of the System permission.
            </summary>
        </member>
        <member name="T:Kephas.Serialization.Composition.SerializerMetadata">
            <summary>
            A serializer metadata.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.Composition.SerializerMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.Composition.SerializerMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Kephas.Serialization.Composition.SerializerMetadata.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.Composition.SerializerMetadata" /> class.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="processingPriority">The processing priority.</param>
            <param name="overridePriority">  The override priority.</param>
        </member>
        <member name="P:Kephas.Serialization.Composition.SerializerMetadata.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="T:Kephas.Serialization.DefaultSerializationService">
            <summary>
            A default serialization service.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.#ctor(Kephas.Services.IContextFactory,System.Collections.Generic.ICollection{Kephas.Composition.IExportFactory{Kephas.Serialization.ISerializer,Kephas.Serialization.Composition.SerializerMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.DefaultSerializationService"/> class.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <param name="serializerFactories">The serializer factories.</param>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.SerializeAsync(System.Object,System.IO.TextWriter,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the object with the provided options.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The text writer where the serialized object should be written.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.SerializeAsync(System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the object with the options provided in the serialization context.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.Serialize(System.Object,System.IO.TextWriter,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the provided options.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The text writer where the serialized object should be written.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.Serialize(System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the options provided in the serialization context.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.DeserializeAsync(System.IO.TextReader,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="textReader">The text reader where from the serialized object should be read.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.DeserializeAsync(System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.Deserialize(System.IO.TextReader,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="textReader">The text reader where from the serialized object should be read.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.Deserialize(System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.CreateSerializationContext(System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Creates serialization context.
            </summary>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The new serialization context.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.DefaultSerializationService.GetSerializer(Kephas.Serialization.ISerializationContext)">
            <summary>
            Gets a serializer for the provided context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The serializer.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.ISerializationContext">
            <summary>
            Contract for serialization contexts.
            </summary>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.SerializationService">
            <summary>
            Gets the serialization service.
            </summary>
            <value>
            The serialization service.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.MediaType">
            <summary>
            Gets or sets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.RootObjectType">
            <summary>
            Gets or sets the type of the root object.
            </summary>
            <value>
            The type of the root object.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.RootObjectFactory">
            <summary>
            Gets or sets the root object factory.
            </summary>
            <value>
            The root object factory.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.Indent">
            <summary>
            Gets or sets a value indicating whether the serialized output should be indented.
            </summary>
            <value>
            True if the output should be indented, false if not.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether the type information should be included.
            </summary>
            <value>
            True to include type information, false otherwise.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="P:Kephas.Serialization.ISerializationContext.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether null values should be included.
            </summary>
            <value>
            True to include null values, false otherwise.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="T:Kephas.Serialization.SerializationContextExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.Indent``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to indent the serialized value.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">True to indent, false otherwise.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.IncludeTypeInfo``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to include the type information in the serialized value.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">True to include type information, false otherwise.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.IncludeNullValues``1(``0,System.Boolean)">
            <summary>
            Sets a value indicating whether to include null values in the serialized value.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">True to include null values, false otherwise.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.RootObjectType``1(``0,System.Type)">
            <summary>
            Sets the root object type.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">The root object type.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.RootObjectFactory``1(``0,System.Func{System.Object})">
            <summary>
            Sets the root object factory.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">The root object factory.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationContextExtensions.MediaType``1(``0,System.Type)">
            <summary>
            Sets the media type.
            </summary>
            <typeparam name="TContext">Actual type of the serialization context.</typeparam>
            <param name="context">The serialization context.</param>
            <param name="value">The media type.</param>
            <returns>
            This <see cref="T:Kephas.Serialization.ISerializationContext"/>.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.ISerializationService">
            <summary>
            Contract for singleton serialization services.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.ISerializationService.SerializeAsync(System.Object,System.IO.TextWriter,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the object with the provided options.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The text writer where the serialized object should be written.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializationService.SerializeAsync(System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the object with the options provided in the serialization context.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializationService.DeserializeAsync(System.IO.TextReader,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="textReader">The text reader where from the serialized object should be read.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializationService.DeserializeAsync(System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.ISyncSerializationService">
            <summary>
            Interface for synchronise serialization service.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializationService.Serialize(System.Object,System.IO.TextWriter,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the provided options.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The text writer where the serialized object should be written.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializationService.Serialize(System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the options provided in the serialization context.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializationService.Deserialize(System.IO.TextReader,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="textReader">The text reader where from the serialized object should be read.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializationService.Deserialize(System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.ISerializer">
            <summary>
            Base contract for serializers.
            </summary>
            <remarks>
            Serializers handle a single media type and are aggregated by the <see cref="T:Kephas.Serialization.ISerializationService"/>.
            </remarks>
        </member>
        <member name="M:Kephas.Serialization.ISerializer.SerializeAsync(System.Object,System.IO.TextWriter,Kephas.Serialization.ISerializationContext,System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object asynchronously.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the object content.</param>
            <param name="context">The context containing serialization options.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializer.SerializeAsync(System.Object,Kephas.Serialization.ISerializationContext,System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object asynchronously.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="context">The context containing serialization options.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializer.DeserializeAsync(System.IO.TextReader,Kephas.Serialization.ISerializationContext,System.Threading.CancellationToken)">
            <summary>
            Deserializes an object asynchronously.
            </summary>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> containing the serialized object.</param>
            <param name="context">The context containing serialization options.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISerializer.DeserializeAsync(System.String,Kephas.Serialization.ISerializationContext,System.Threading.CancellationToken)">
            <summary>
            Deserializes an object asynchronously.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="context">The context containing serialization options.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.ISerializer`1">
            <summary>
            Application service contract for a serializer based on the indicated media type.
            </summary>
            <remarks>
            Serializers handle a single media type and are aggregated by the <see cref="T:Kephas.Serialization.ISerializationService"/>.
            </remarks>
            <typeparam name="TMedia">The media type.</typeparam>
        </member>
        <member name="T:Kephas.Serialization.ISyncSerializer">
            <summary>
            Interface for a synchronous serializer.
            </summary>
            <remarks>
            Typically, a serializer supporting synchronous serialization
            will implement this interface too.
            </remarks>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializer.Serialize(System.Object,System.IO.TextWriter,Kephas.Serialization.ISerializationContext)">
            <summary>
            Serializes the provided object.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the object content.</param>
            <param name="context">The context containing serialization options.</param>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializer.Serialize(System.Object,Kephas.Serialization.ISerializationContext)">
            <summary>
            Serializes the provided object.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="context">The context containing serialization options.</param>
            <returns>
            The serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializer.Deserialize(System.IO.TextReader,Kephas.Serialization.ISerializationContext)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> containing the serialized object.</param>
            <param name="context">The context containing serialization options.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.ISyncSerializer.Deserialize(System.String,Kephas.Serialization.ISerializationContext)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="serializedObj">The serialized object.</param>
            <param name="context">The context containing serialization options.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="T:Kephas.Serialization.SerializationContext">
            <summary>
            A serialization context.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.SerializationContext.#ctor(Kephas.Composition.ICompositionContext,Kephas.Serialization.ISerializationService,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.SerializationContext"/> class.
            </summary>
            <param name="compositionContext">Context for the composition.</param>
            <param name="serializationService">The serialization service.</param>
            <param name="mediaType">Optional. The media type (type implementing <see cref="T:Kephas.Net.Mime.IMediaType"/>).</param>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.SerializationService">
            <summary>
            Gets the serialization service.
            </summary>
            <value>
            The serialization service.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.MediaType">
            <summary>
            Gets or sets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.RootObjectType">
            <summary>
            Gets or sets the type of the root object.
            </summary>
            <value>
            The type of the root object.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.RootObjectFactory">
            <summary>
            Gets or sets the root object factory.
            </summary>
            <value>
            The root object factory.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.Indent">
            <summary>
            Gets or sets a value indicating whether the serialized output should be indented.
            </summary>
            <value>
            True if the output should be indented, false if not.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.IncludeTypeInfo">
            <summary>
            Gets or sets a value indicating whether the type information should be included.
            </summary>
            <value>
            True to include type information, false otherwise.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="P:Kephas.Serialization.SerializationContext.IncludeNullValues">
            <summary>
            Gets or sets a value indicating whether null values should be included.
            </summary>
            <value>
            True to include null values, false otherwise.
            If a value is not provided, the default serializer settings are used.
            </value>
        </member>
        <member name="T:Kephas.Serialization.SerializationException">
            <summary>
            Exception for signalling serialization errors.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.SerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.SerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Serialization.SerializationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Serialization.SerializationExtensions">
            <summary>
            Extension methods for serialization convenience.
            </summary>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Serialize(Kephas.Serialization.ISerializationService,System.Object,System.IO.TextWriter,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the provided options.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object to be serialized.</param>
            <param name="textWriter">The text writer where the serialized object should be written.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Serialize(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize(Kephas.Serialization.ISerializationService,System.IO.TextReader,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="textReader">The text reader where from the serialized object should be read.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object with the options provided in the serialization context.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.DeserializeAsync``2(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from the provided format asynchronously.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize``2(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from the provided format.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.DeserializeAsync``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from the provided format asynchronously.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from the provided format.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonDeserializeAsync(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from JSON asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonDeserialize(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from JSON.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonDeserializeAsync``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from JSON asynchronously.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonDeserialize``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from JSON.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonDeserializeAsync(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from BSON asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonDeserialize(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from BSON.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonDeserializeAsync``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from BSON asynchronously.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonDeserialize``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from BSON.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlDeserializeAsync(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from XML asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlDeserialize(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from XML.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlDeserializeAsync``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Deserializes the object from XML asynchronously.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result that yields the deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlDeserialize``1(Kephas.Serialization.ISerializationService,System.String,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Deserializes the object from XML.
            </summary>
            <typeparam name="TRootObject">Type of the root object.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="serializedObj">The serialized object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.SerializeAsync``1(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object in the specified format.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task promising the serialized object as a string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Serialize``1(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the provided object in the specified format.
            </summary>
            <typeparam name="TMediaType">Type of the media type.</typeparam>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object as a string in the specified format.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonSerializeAsync(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object as JSON asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task promising the serialized object as a JSON string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.JsonSerialize(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the provided object as JSON.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object as a JSON string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonSerializeAsync(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object as BSON asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task promising the serialized object as a BSON string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.BsonSerialize(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the provided object as BSON.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object as a BSON string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlSerializeAsync(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext},System.Threading.CancellationToken)">
            <summary>
            Serializes the provided object as XML asynchronously.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object to be serialized.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            A Task promising the serialized object as a XML string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.XmlSerialize(Kephas.Serialization.ISerializationService,System.Object,System.Action{Kephas.Serialization.ISerializationContext})">
            <summary>
            Serializes the provided object as XML.
            </summary>
            <param name="serializationService">The serialization service.</param>
            <param name="obj">The object.</param>
            <param name="optionsConfig">Optional. Function for serialization options configuration.</param>
            <returns>
            The serialized object as a XML string.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Serialize(Kephas.Serialization.ISerializer,System.Object,System.IO.TextWriter,Kephas.Serialization.ISerializationContext)">
            <summary>
            Serializes the provided object.
            </summary>
            <param name="serializer">The serializer to act on.</param>
            <param name="obj">The object.</param>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the object content.</param>
            <param name="context">The context containing serialization options.</param>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Serialize(Kephas.Serialization.ISerializer,System.Object,Kephas.Serialization.ISerializationContext)">
            <summary>
            Serializes the provided object.
            </summary>
            <param name="serializer">The serializer to act on.</param>
            <param name="obj">The object.</param>
            <param name="context">The context containing serialization options.</param>
            <returns>
            The serialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize(Kephas.Serialization.ISerializer,System.IO.TextReader,Kephas.Serialization.ISerializationContext)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="serializer">The serializer to act on.</param>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> containing the serialized object.</param>
            <param name="context">The context containing serialization options.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="M:Kephas.Serialization.SerializationExtensions.Deserialize(Kephas.Serialization.ISerializer,System.String,Kephas.Serialization.ISerializationContext)">
            <summary>
            Deserializes an object.
            </summary>
            <param name="serializer">The serializer to act on.</param>
            <param name="serializedObject">The serialized object.</param>
            <param name="context">Optional. The context containing serialization options.</param>
            <returns>
            The deserialized object.
            </returns>
        </member>
        <member name="T:Kephas.Services.AppServiceContractAttribute">
            <summary>
            Marks an interface to be an application service contract.
            Application services are automatically identified by the composition
            and added to the container.
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceContractAttribute.DefaultMetadataAttributeTypes">
            <summary>
            The default metadata attribute types.
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceContractAttribute.EmptyMetadataAttributeTypes">
            <summary>
            The empty metadata attribute types.
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceContractAttribute.WritableDefaultMetadataAttributeTypes">
            <summary>
            The default metadata attribute types.
            </summary>
        </member>
        <member name="M:Kephas.Services.AppServiceContractAttribute.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Kephas.Services.AppServiceContractAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Services.AppServiceContractAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.AppServiceContractAttribute"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Services.AppServiceContractAttribute.#ctor(Kephas.Services.AppServiceLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.AppServiceContractAttribute"/> class.
            </summary>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.Lifetime">
            <summary>
            Gets the application service lifetime.
            </summary>
            <value>
            The application service lifetime.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether multiple services for this contract are allowed.
            </summary>
            <value>
              <c>true</c> if multiple services are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.AsOpenGeneric">
            <summary>
            Gets or sets a value indicating whether the contract should be exported as an open generic.
            </summary>
            <value>
              <c>true</c> if the contract should be exported as an open generic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.MetadataAttributes">
            <summary>
            Gets or sets the supported metadata attributes.
            </summary>
            <value>
            The metadata attributes.
            </value>
            <remarks>The metadata attributes are used to register the conventions for application services.</remarks>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.ContractType">
            <summary>
            Gets or sets the contract type of the export.
            </summary>
            <value>
            The contract type of the export.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.Kephas#Services#Reflection#IAppServiceInfo#Instance">
            <summary>
            Gets the service instance.
            </summary>
            <value>
            The service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.Kephas#Services#Reflection#IAppServiceInfo#InstanceType">
            <summary>
            Gets the type of the service instance.
            </summary>
            <value>
            The type of the service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.AppServiceContractAttribute.Kephas#Services#Reflection#IAppServiceInfo#InstanceFactory">
            <summary>
            Gets the service instance factory.
            </summary>
            <value>
            The service instance factory.
            </value>
        </member>
        <member name="M:Kephas.Services.AppServiceContractAttribute.RegisterDefaultMetadataAttributeTypes(System.Type[])">
            <summary>
            Registers the provided metadata attribute types as default attributes.
            </summary>
            <param name="attributeTypes">A variable-length parameters list containing attribute types.</param>
        </member>
        <member name="M:Kephas.Services.AppServiceContractAttribute.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Services.AppServiceLifetime">
            <summary>
            Enumerates the lifetime values for application services.
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceLifetime.Singleton">
            <summary>
            The application service is shared (default).
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceLifetime.Transient">
            <summary>
            The application service in instantiated with every request.
            </summary>
        </member>
        <member name="F:Kephas.Services.AppServiceLifetime.Scoped">
            <summary>
            The application service is shared within a scope.
            </summary>
        </member>
        <member name="T:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata">
            <summary>
            A service behavior rule metadata.
            </summary>
        </member>
        <member name="M:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata"/> class.
            </summary>
            <param name="serviceContractType">Type of the service contract.</param>
            <param name="processingPriority">Optional. The processing priority.</param>
            <param name="overridePriority">Optional. The override priority.</param>
        </member>
        <member name="P:Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata.ServiceContractType">
            <summary>
            Gets the type of the service contract.
            </summary>
            <value>
            The type of the service contract.
            </value>
        </member>
        <member name="T:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider">
            <summary>
            A default service behavior provider.
            </summary>
        </member>
        <member name="F:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.compositionContext">
            <summary>
            The composition context.
            </summary>
        </member>
        <member name="F:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.behaviorFactories">
            <summary>
            The behavior factories.
            </summary>
        </member>
        <member name="F:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.enabledRules">
            <summary>
            The enabled rules.
            </summary>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.#ctor(Kephas.Composition.ICompositionContext,System.Collections.Generic.ICollection{Kephas.Composition.IExportFactory{Kephas.Services.Behaviors.IEnabledServiceBehaviorRule,Kephas.Services.Behaviors.Composition.ServiceBehaviorRuleMetadata}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider"/> class.
            </summary>
            <param name="compositionContext">The composition context.</param>
            <param name="behaviorFactories">The behavior factories.</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.WhereEnabled``1(System.Collections.Generic.IEnumerable{``0},Kephas.Services.IContext)">
            <summary>
            Filters the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="services">The services.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumeration of enabled services.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.WhereEnabled``1(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0}},Kephas.Services.IContext)">
            <summary>
            Filters the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="serviceFactories">The service export factories.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumerator that allows foreach to be used to process where enabled in this collection.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.WhereEnabled``2(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0,``1}},Kephas.Services.IContext)">
            <summary>
            Filters the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the service metadata.</typeparam>
            <param name="serviceFactories">The service export factories.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumerator that allows foreach to be used to process where enabled in this collection.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.IsServiceEnabled``1(Kephas.Services.Behaviors.IServiceBehaviorContext{``0},System.Collections.Generic.IList{Kephas.Services.Behaviors.IEnabledServiceBehaviorRule})">
            <summary>
            Queries if a service is enabled.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="serviceContext">Context for the service.</param>
            <param name="rules">The enabled rules.</param>
            <returns>
            <c>true</c> if the service is enabled, <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.GetEnabledServiceBehaviorRules``1">
            <summary>
            Gets the enabled service behavior rules.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <returns>
            The enabled service behavior rules.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.DefaultServiceBehaviorProvider.ComputeEnabledServiceBehaviorRules``1">
            <summary>
            Calculates the enabled service behavior rules.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <returns>
            The calculated enabled service behavior rules.
            </returns>
        </member>
        <member name="T:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1">
            <summary>
            Base class for behavior rules controlling the enabled state of services.
            It applyes for services implementing the contract <typeparamref name="TServiceContract"/>.
            </summary>
            <typeparam name="TServiceContract">Type of the service contract.</typeparam>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1"/> class.
            </summary>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1.Kephas#Behaviors#IBehaviorRule{Kephas#Services#IContext}#CanApply(Kephas.Services.IContext)">
            <summary>
            Gets a value indicating whether the rule may be applied or not.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1.Kephas#Behaviors#IBehaviorRule{Kephas#Services#IContext,System#Boolean}#GetValue(Kephas.Services.IContext)">
            <summary>
            Gets the behavior value asynchronously.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A promise of the behavior value.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`1.Kephas#Behaviors#IBehaviorRule{Kephas#Services#IContext}#GetValue(Kephas.Services.IContext)">
            <summary>
            Gets the behavior value.
            </summary>
            <param name="context">The context.</param>
            <returns>
            The behavior value.
            </returns>
        </member>
        <member name="T:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`2">
            <summary>
            Base class for behavior rules controlling the enabled state of the service <typeparamref name="TServiceImplementation"/>.
            The service must implement the contract <typeparamref name="TServiceContract"/>.
            </summary>
            <typeparam name="TServiceContract">Type of the service contract.</typeparam>
            <typeparam name="TServiceImplementation">Type of the service implementation.</typeparam>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`2.#ctor(Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`2"/> class.
            </summary>
            <param name="logManager">Optional. The log manager.</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.EnabledServiceBehaviorRuleBase`2.CanApply(Kephas.Services.Behaviors.IServiceBehaviorContext{`0})">
            <summary>
            Base class for behavior rules controlling the enabled state of services
            implementing the contract <typeparamref name="TServiceContract"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A value indicating whether the rule may be applied or not.
            </returns>
        </member>
        <member name="T:Kephas.Services.Behaviors.IEnabledServiceBehaviorRule">
            <summary>
            Interface for enabled service behavior rule.
            </summary>
        </member>
        <member name="T:Kephas.Services.Behaviors.IEnabledServiceBehaviorRule`1">
            <summary>
            Behavior rule contract for controlling the enabled state of services.
            </summary>
            <typeparam name="TServiceContract">Type of the service contract.</typeparam>
        </member>
        <member name="T:Kephas.Services.Behaviors.IServiceBehaviorContext`1">
            <summary>
            Interface for service behavior context.
            </summary>
            <typeparam name="TServiceContract">Type of the service contract.</typeparam>
        </member>
        <member name="P:Kephas.Services.Behaviors.IServiceBehaviorContext`1.Context">
            <summary>
            Gets the behavior context.
            </summary>
            <value>
            The behavior context.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.IServiceBehaviorContext`1.Service">
            <summary>
            Gets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.IServiceBehaviorContext`1.ServiceFactory">
            <summary>
            Gets the service factory.
            </summary>
            <value>
            The service factory.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.IServiceBehaviorContext`1.Metadata">
            <summary>
            Gets the service metadata.
            </summary>
            <value>
            The service metadata.
            </value>
        </member>
        <member name="T:Kephas.Services.Behaviors.IServiceBehaviorProvider">
            <summary>
            Interface for service behavior provider.
            </summary>
        </member>
        <member name="M:Kephas.Services.Behaviors.IServiceBehaviorProvider.WhereEnabled``1(System.Collections.Generic.IEnumerable{``0},Kephas.Services.IContext)">
            <summary>
            Filters the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="services">The services.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumeration of enabled services.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.IServiceBehaviorProvider.WhereEnabled``1(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0}},Kephas.Services.IContext)">
            <summary>
            Filters the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="serviceFactories">The service export factories.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumeration of enabled services.
            </returns>
        </member>
        <member name="M:Kephas.Services.Behaviors.IServiceBehaviorProvider.WhereEnabled``2(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0,``1}},Kephas.Services.IContext)">
            <summary>
            Enumerates the enabled services from the provided services collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TMetadata">Type of the service metadata.</typeparam>
            <param name="serviceFactories">The service export factories.</param>
            <param name="context">Context for the enabled check (optional).</param>
            <returns>
            An enumerator that allows foreach to be used to process where enabled in this collection.
            </returns>
        </member>
        <member name="T:Kephas.Services.Behaviors.ServiceBehaviorContext`1">
            <summary>
            The default implementation of a service behavior context.
            </summary>
            <typeparam name="TServiceContract">Type of the service contract.</typeparam>
        </member>
        <member name="M:Kephas.Services.Behaviors.ServiceBehaviorContext`1.#ctor(Kephas.Composition.ICompositionContext,`0,System.Object,Kephas.Services.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.ServiceBehaviorContext`1" />
            class.
            </summary>
            <param name="compositionContext">The composition context.</param>
            <param name="service">The service.</param>
            <param name="metadata">The metadata (optional).</param>
            <param name="context">Context for the behavior (optional).</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.ServiceBehaviorContext`1.#ctor(Kephas.Composition.ICompositionContext,Kephas.Composition.IExportFactory{`0},Kephas.Services.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.ServiceBehaviorContext`1" />
            class.
            </summary>
            <param name="compositionContext">The composition context.</param>
            <param name="serviceFactory">The service export factory.</param>
            <param name="context">Context for the behavior (optional).</param>
        </member>
        <member name="M:Kephas.Services.Behaviors.ServiceBehaviorContext`1.#ctor(Kephas.Composition.ICompositionContext,Kephas.Composition.IExportFactory{`0},`0,System.Object,Kephas.Services.IContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Behaviors.ServiceBehaviorContext`1" />
            class.
            </summary>
            <param name="compositionContext">The composition context.</param>
            <param name="serviceFactory">The service export factory.</param>
            <param name="service">The service.</param>
            <param name="metadata">The metadata.</param>
            <param name="context">Context for the behavior (optional).</param>
        </member>
        <member name="P:Kephas.Services.Behaviors.ServiceBehaviorContext`1.Context">
            <summary>
            Gets the behavior context.
            </summary>
            <value>
            The behavior context.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.ServiceBehaviorContext`1.Service">
            <summary>
            Gets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.ServiceBehaviorContext`1.ServiceFactory">
            <summary>
            Gets the service factory.
            </summary>
            <value>
            The service factory.
            </value>
        </member>
        <member name="P:Kephas.Services.Behaviors.ServiceBehaviorContext`1.Metadata">
            <summary>
            Gets the service metadata.
            </summary>
            <value>
            The service metadata.
            </value>
        </member>
        <member name="M:Kephas.Services.Behaviors.ServiceBehaviorContext`1.GetExportMetadata(Kephas.Composition.IExportFactory{`0})">
            <summary>
            Gets export metadata.
            </summary>
            <param name="serviceExport">The service export.</param>
            <returns>
            The export metadata.
            </returns>
        </member>
        <member name="T:Kephas.Services.Composition.AmbientServicesExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.IAmbientServices"/>.
            </summary>
        </member>
        <member name="M:Kephas.Services.Composition.AmbientServicesExtensions.GetAppServiceInfos(Kephas.IAmbientServices)">
            <summary>
            Gets the registered application service contracts.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <returns>
            An enumeration of key-value pairs, where the key is the <see cref="T:TypeInfo"/> and the
            value is the <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AmbientServicesExtensions.SetAppServiceInfos(Kephas.IAmbientServices,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,Kephas.Services.Reflection.IAppServiceInfo}})">
            <summary>
            Gets the registered application service contracts.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="appServiceInfos">An enumeration of key-value pairs, where the key is the <see cref="T:TypeInfo"/> and the
            value is the <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/>.</param>
        </member>
        <member name="T:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar">
            <summary>
            Base for conventions registrars of application services.
            </summary>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.RegisterConventions(Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Registers the conventions.
            </summary>
            <param name="builder">The registration builder.</param>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.GetAppServiceContracts(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets the application service contracts to register.
            </summary>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">The registration context.</param>
            <returns>
            An enumeration of key-value pairs, where the key is the <see cref="T:TypeInfo"/> and the
            value is the <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.GetAppServiceInfoProviders(System.Collections.Generic.IList{System.Type},Kephas.Composition.Hosting.ICompositionRegistrationContext)">
            <summary>
            Gets the application service information providers.
            </summary>
            <param name="candidateTypes">The candidate types which can take part in the composition.</param>
            <param name="registrationContext">Context for the registration.</param>
            <returns>
            An enumeration of <see cref="T:Kephas.Composition.Conventions.IAppServiceInfoProvider"/> objects.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.ConfigurePartBuilder(Kephas.Composition.Conventions.IPartConventionsBuilder,System.Type,Kephas.Services.Reflection.IAppServiceInfo,System.Collections.Generic.IList{System.Type},Kephas.Services.Composition.IAppServiceMetadataResolver,Kephas.Logging.ILogger)">
            <summary>
            Configures the part builder.
            </summary>
            <param name="partBuilder">The part builder.</param>
            <param name="serviceContract">The service contract.</param>
            <param name="appServiceInfo">The application service metadata.</param>
            <param name="appServiceContracts">The application service contracts.</param>
            <param name="metadataResolver">The metadata resolver.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.SerializeServiceContractMetadata(System.Type,Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Serializes the service contract metadata.
            </summary>
            <param name="serviceContract">The service contract.</param>
            <param name="contractMetadata">The contract metadata.</param>
            <returns>
            The serialized service contract information.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.GetMetadataAttributes(Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Gets metadata attributes.
            </summary>
            <param name="appServiceInfo">The contract information.</param>
            <returns>
            An collection of attribute types.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.IsAppServiceImport(System.Reflection.PropertyInfo,System.Collections.Generic.IList{System.Type})">
            <summary>
            Determines whether the specified property imports an application service.
            </summary>
            <param name="pi">The pi.</param>
            <param name="appServiceContracts">The application service contracts.</param>
            <returns><c>true</c> if the specified property imports an application service, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.TryGetServiceContractTypeFromExportFactory(System.Type)">
            <summary>
            Tries to get the service contract type from export factory.
            </summary>
            <param name="type">The type.</param>
            <returns>The service type referenced by the export factory, or <c>null</c> if the type is not an export factory.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.CheckExportedContractType(System.Type,System.Type,System.Type,Kephas.Logging.ILogger)">
            <summary>
            Checks the type of the exported contract.
            </summary>
            <exception cref="T:Kephas.Composition.CompositionException">Thrown when a Composition error condition occurs.</exception>
            <param name="exportedContractType">Type of the exported contract.</param>
            <param name="serviceContract">The service contract.</param>
            <param name="serviceContractType">Type of the service contract.</param>
            <param name="logger">The logger.</param>
            <returns>
            <c>true</c> if the service contract is valid, false otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.TrySelectAppServiceConstructor(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo})">
            <summary>
            Selects the application service constructor.
            </summary>
            <param name="serviceContract">The service contract.</param>
            <param name="constructors">The constructors.</param>
            <returns>
            The application service constructor.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.TrySelectSingleServiceImplementationType(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Select a single service implementation type based on the provided implementation criteria
            and the override priority of the possible implementations.
            </summary>
            <param name="serviceContract">The service contract.</param>
            <param name="typeInfos">The type infos.</param>
            <param name="criteria">The criteria.</param>
            <returns>
            An implementation type and a flag indicating if the selected implementation type is an override.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.TryConfigurePartBuilder(Kephas.Services.Reflection.IAppServiceInfo,System.Type,Kephas.Composition.Conventions.IConventionsBuilder,System.Collections.Generic.IEnumerable{System.Type},Kephas.Logging.ILogger)">
            <summary>
            Tries to configure the conventions part builder.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when there is an ambiguous override in the service implementations.</exception>
            <param name="appServiceInfo">The service contract metadata.</param>
            <param name="serviceContract">The service contract.</param>
            <param name="conventions">The conventions.</param>
            <param name="typeInfos">The type infos.</param>
            <param name="logger">The logger.</param>
            <returns>
            True if a part builder could be configured, false otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.MatchDerivedFromContractType(System.Type,System.Type)">
            <summary>
            Checks whether the part type matches the type of the open generic contract.
            </summary>
            <returns><c>true</c> if the part type matches the type of the generic contract, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.MatchDerivedFromContractType(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Checks whether the part type matches the type of the open generic contract.
            </summary>
            <param name="partType">Type of the part.</param>
            <param name="serviceContract">Type of the service contract.</param>
            <returns><c>true</c> if the part type matches the type of the generic contract, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceInfoConventionsRegistrar.MatchOpenGenericContractType(System.Type,System.Type)">
            <summary>
            Checks whether the part type matches the type of the open generic contract.
            </summary>
            <param name="partType">Type of the part.</param>
            <param name="serviceContractType">Type of the service contract.</param>
            <returns><c>true</c> if the part type matches the type of the generic contract, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Kephas.Services.Composition.AppServiceMetadata">
            <summary>
            Metadata for application services.
            </summary>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadata.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Composition.AppServiceMetadata"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadata.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Composition.AppServiceMetadata" /> class.
            </summary>
            <param name="processingPriority">Optional. The processing priority.</param>
            <param name="overridePriority">Optional. The override priority.</param>
            <param name="serviceName">Optional. The name of the service.</param>
            <param name="isOverride">Optional. Indicates whether the service overrides its base.</param>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.ProcessingPriority">
            <summary>
            Gets the order in which the services should be processed.
            </summary>
            <value>
            The processing priority.
            </value>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.OverridePriority">
            <summary>
            Gets the priority of the service in the override chain.
            </summary>
            <value>
            The override priority.
            </value>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.IsOverride">
            <summary>
            Gets a value indicating whether the service overrides the
            service it specializes.
            </summary>
            <value>
            True if the service overrides the service it specializes, false otherwise.
            </value>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.ServiceInstanceType">
            <summary>
            Gets or sets the concrete service type implementing the service contract.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadata.Dependencies">
            <summary>
            Gets or sets the service dependencies.
            </summary>
            <value>
            The service dependencies.
            </value>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadata.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadata.GetMetadataValue``2(System.Collections.Generic.IDictionary{System.String,System.Object},``1)">
            <summary>
            Gets the metadata value for the specific attribute.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TAttribute">The attribute type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <returns>The metadata value if found, otherwise the default value.</returns>
        </member>
        <member name="F:Kephas.Services.Composition.AppServiceMetadataResolver.AttributeSuffix">
            <summary>
            The attribute suffix.
            </summary>
        </member>
        <member name="F:Kephas.Services.Composition.AppServiceMetadataResolver.TypePrefix">
            <summary>
            The 'T' prefix in generic type arguments.
            </summary>
        </member>
        <member name="F:Kephas.Services.Composition.AppServiceMetadataResolver.TypeSuffix">
            <summary>
            The 'Type' suffix in generic type arguments.
            </summary>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.#ctor(Kephas.Runtime.IRuntimeTypeRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Composition.AppServiceMetadataResolver"/> class.
            </summary>
            <param name="typeRegistry">The type registry.</param>
        </member>
        <member name="P:Kephas.Services.Composition.AppServiceMetadataResolver.MetadataValueTypeInfo">
            <summary>
            Gets information describing the metadata value type.
            </summary>
            <value>
            Information describing the metadata value type.
            </value>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.GetMetadataValueProperties(System.Type)">
            <summary>
            Gets the metadata value properties which should be retrieved from the attribute.
            </summary>
            <param name="attributeType">The type of the attribute providing metadata.</param>
            <returns>
            The metadata properties.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.GetMetadataValueFromAttribute(System.Type,System.Type,Kephas.Reflection.IPropertyInfo)">
            <summary>
            Gets the metadata value from attribute.
            </summary>
            <param name="implementationType">The service implementation type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="property">The metadata property.</param>
            <returns>
            The metadata value from attribute.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.GetMetadataNameFromAttributeType(System.Type)">
            <summary>
            Gets the metadata name from the attribute type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <returns>The metadata name from the attribute type.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.GetMetadataNameFromGenericTypeParameter(System.Type)">
            <summary>
            Gets the metadata name from generic type parameter.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
            <returns>The metadata name.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.GetMetadataValueFromGenericParameter(System.Type,System.Int32,System.Type)">
            <summary>
            Gets the metadata value from generic parameter.
            </summary>
            <param name="implementationType">The service implementation type.</param>
            <param name="position">The position.</param>
            <param name="serviceType">Type of the service contract.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.AppServiceMetadataResolver.IsMetadataValueAttribute(System.Type)">
            <summary>
            Query if 'attributeType' is metadata value attribute.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <returns>
            True if metadata value attribute, false if not.
            </returns>
        </member>
        <member name="T:Kephas.Services.Composition.IAppServiceMetadataResolver">
            <summary>
            Interface for application service metadata resolver.
            </summary>
        </member>
        <member name="M:Kephas.Services.Composition.IAppServiceMetadataResolver.GetMetadataValueProperties(System.Type)">
            <summary>
            Gets the metadata value properties which should be retrieved from the attribute.
            </summary>
            <param name="attributeType">The type of the attribute providing metadata.</param>
            <returns>
            The metadata properties.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.IAppServiceMetadataResolver.GetMetadataValueFromAttribute(System.Type,System.Type,Kephas.Reflection.IPropertyInfo)">
            <summary>
            Gets the metadata value from attribute.
            </summary>
            <param name="implementationType">The service implementation type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="property">The metadata property.</param>
            <returns>
            The metadata value from attribute.
            </returns>
        </member>
        <member name="M:Kephas.Services.Composition.IAppServiceMetadataResolver.GetMetadataNameFromAttributeType(System.Type)">
            <summary>
            Gets the metadata name from the attribute type.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <returns>The metadata name from the attribute type.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.IAppServiceMetadataResolver.GetMetadataValueFromGenericParameter(System.Type,System.Int32,System.Type)">
            <summary>
            Gets the metadata value from generic parameter.
            </summary>
            <param name="implementationType">The service implementation type.</param>
            <param name="position">The position.</param>
            <param name="serviceType">Type of the service contract.</param>
            <returns>The metadata value.</returns>
        </member>
        <member name="M:Kephas.Services.Composition.IAppServiceMetadataResolver.GetMetadataNameFromGenericTypeParameter(System.Type)">
            <summary>
            Gets the metadata name from generic type parameter.
            </summary>
            <param name="genericTypeParameter">The generic type parameter.</param>
            <returns>The metadata name.</returns>
        </member>
        <member name="T:Kephas.Services.Context">
            <summary>
            A base implementation for contexts.
            </summary>
        </member>
        <member name="F:Kephas.Services.Context.identity">
            <summary>
            The identity.
            </summary>
        </member>
        <member name="M:Kephas.Services.Context.#ctor(Kephas.Services.IContext,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Context"/> class.
            </summary>
            <param name="parentContext">The parent context.</param>
            <param name="isThreadSafe">Optional. <c>true</c> if this object is thread safe when working
                                       with the internal dictionary, <c>false</c> otherwise. Default is
                                       <c>false</c>.</param>
            <param name="merge">Optional. True to merge the parent context into the new context.</param>
        </member>
        <member name="M:Kephas.Services.Context.#ctor(Kephas.IAmbientServices,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Context"/> class.
            </summary>
            <param name="ambientServices">The ambient services.</param>
            <param name="isThreadSafe">
            <c>true</c> if this object is thread safe when working
            with the internal dictionary, <c>false</c> otherwise. Default is <c>false</c>.
            </param>
        </member>
        <member name="M:Kephas.Services.Context.#ctor(Kephas.Composition.ICompositionContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Context"/> class.
            </summary>
            <param name="compositionContext">The context for the composition (optional). If not provided,
            <see cref="M:AmbientServices.Instance.CompositionContainer"/> will be considered.
            </param>
            <param name="isThreadSafe">
            <c>true</c> if this object is thread safe when working
            with the internal dictionary, <c>false</c> otherwise. Default is <c>false</c>.
            </param>
        </member>
        <member name="E:Kephas.Services.Context.IdentityChanged">
            <summary>
            Occurs when the identity changes.
            </summary>
        </member>
        <member name="P:Kephas.Services.Context.AmbientServices">
            <summary>
            Gets the ambient services.
            </summary>
            <newValue>
            The ambient services.
            </newValue>
        </member>
        <member name="P:Kephas.Services.Context.CompositionContext">
            <summary>
            Gets the dependency injection/composition context.
            </summary>
            <newValue>
            The composition context.
            </newValue>
        </member>
        <member name="P:Kephas.Services.Context.Identity">
            <summary>
            Gets or sets the authenticated user.
            </summary>
            <newValue>
            The authenticated user.
            </newValue>
        </member>
        <member name="P:Kephas.Services.Context.Logger">
            <summary>
            Gets or sets the context logger.
            </summary>
            <value>
            The context logger.
            </value>
        </member>
        <member name="M:Kephas.Services.Context.Dispose">
            <summary>
            Releases the unmanaged resources used by the Kephas.Services.Context and optionally releases
            the managed resources.
            </summary>
        </member>
        <member name="M:Kephas.Services.Context.ValidateIdentity(System.Security.Principal.IIdentity,System.Security.Principal.IIdentity)">
            <summary>
            Validates the identity before changing it.
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
            <returns>
            True if validation succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:Kephas.Services.Context.OnIdentityChanged">
            <summary>
            Issues the <see cref="E:Kephas.Services.Context.IdentityChanged"/> event.
            </summary>
        </member>
        <member name="M:Kephas.Services.Context.SetCompositionContext(Kephas.Composition.ICompositionContext)">
            <summary>
            Sets composition context.
            </summary>
            <param name="compositionContext">
            The context for the composition. If not provided,
            <see cref="M:AmbientServices.Instance.CompositionContainer"/> will be considered.
            </param>
        </member>
        <member name="M:Kephas.Services.Context.SetAmbientServices(Kephas.IAmbientServices)">
            <summary>
            Sets ambient services.
            </summary>
            <remarks>
            The composition context is also set as the one exposed by the ambient services.
            </remarks>
            <param name="ambientServices">
            The ambient services (optional). If not provided,
            <see cref="M:AmbientServices.Instance"/> will be considered.
            </param>
        </member>
        <member name="M:Kephas.Services.Context.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Kephas.Services.Context and optionally releases
            the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to
                                    release only unmanaged resources.</param>
        </member>
        <member name="T:Kephas.Services.ContextFactory">
            <summary>
            A context factory.
            </summary>
        </member>
        <member name="M:Kephas.Services.ContextFactory.#ctor(Kephas.Composition.ICompositionContext,Kephas.IAmbientServices,Kephas.Logging.ILogManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ContextFactory"/> class.
            </summary>
            <param name="compositionContext">Context for the composition.</param>
            <param name="ambientServices">The ambient services.</param>
            <param name="logManager">Manager for log.</param>
        </member>
        <member name="P:Kephas.Services.ContextFactory.LogManager">
            <summary>
            Gets the manager for log.
            </summary>
            <value>
            The log manager.
            </value>
        </member>
        <member name="M:Kephas.Services.ContextFactory.CreateContext``1(System.Object[])">
            <summary>
            Creates a typed context.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            The new context.
            </returns>
        </member>
        <member name="T:Kephas.Services.DefaultNamedServiceProvider">
            <summary>
            A default named service provider.
            </summary>
        </member>
        <member name="F:Kephas.Services.DefaultNamedServiceProvider.compositionContext">
            <summary>
            Context for the composition.
            </summary>
        </member>
        <member name="M:Kephas.Services.DefaultNamedServiceProvider.#ctor(Kephas.Composition.ICompositionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.DefaultNamedServiceProvider"/> class.
            </summary>
            <param name="compositionContext">Context for the composition.</param>
        </member>
        <member name="M:Kephas.Services.DefaultNamedServiceProvider.GetNamedService``1(System.String)">
            <summary>
            Gets the service with the provided name.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The named service.
            </returns>
        </member>
        <member name="T:Kephas.Services.IAsyncFinalizable">
            <summary>
            Provides the <see cref="M:Kephas.Services.IAsyncFinalizable.FinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method for service asynchronous finalization.
            </summary>
        </member>
        <member name="M:Kephas.Services.IAsyncFinalizable.FinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Finalizes the service.
            </summary>
            <param name="context">Optional. An optional context for finalization.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="T:Kephas.Services.IAsyncInitializable">
            <summary>
            Provides the <see cref="M:Kephas.Services.IAsyncInitializable.InitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method for asynchronous service initialization.
            </summary>
        </member>
        <member name="M:Kephas.Services.IAsyncInitializable.InitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Initializes the service asynchronously.
            </summary>
            <param name="context">An optional context for initialization.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An awaitable task.
            </returns>
        </member>
        <member name="T:Kephas.Services.IContext">
            <summary>
            Defines a base contract for context-dependent operations.
            </summary>
        </member>
        <member name="P:Kephas.Services.IContext.CompositionContext">
            <summary>
            Gets a context for the dependency injection/composition.
            </summary>
            <value>
            The composition context.
            </value>
        </member>
        <member name="P:Kephas.Services.IContext.AmbientServices">
            <summary>
            Gets the ambient services.
            </summary>
            <value>
            The ambient services.
            </value>
        </member>
        <member name="P:Kephas.Services.IContext.Identity">
            <summary>
            Gets or sets the authenticated identity.
            </summary>
            <value>
            The authenticated identity.
            </value>
        </member>
        <member name="T:Kephas.Services.ContextExtensions">
            <summary>
            A context extensions.
            </summary>
        </member>
        <member name="F:Kephas.Services.ContextExtensions.DisposableResourcesKey">
            <summary>
            The disposable resources key.
            </summary>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.Set``1(``0,System.String,System.Object)">
            <summary>
            Sets the provided value.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.Impersonate``1(``0,Kephas.Services.IContext)">
            <summary>
            Sets the context identity.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context to act on.</param>
            <param name="parentContext">The parent context.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.Impersonate``1(``0,System.Security.Principal.IIdentity)">
            <summary>
            Sets the context identity.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context to act on.</param>
            <param name="identity">The identity.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.Logger``1(``0,Kephas.Logging.ILogger)">
            <summary>
            Sets the context logger.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context to act on.</param>
            <param name="contextLogger">The context logger.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.AddResource``1(``0,System.IDisposable[])">
            <summary>
            Registers with the context disposable resources to be disposed together with the context.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context to act on.</param>
            <param name="resources">The resources to add.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextExtensions.DisposeResources``1(``0)">
            <summary>
            Disposes all resources registered with the context.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="context">The context to act on.</param>
            <returns>
            This <paramref name="context"/>.
            </returns>
        </member>
        <member name="T:Kephas.Services.IContextFactory">
            <summary>
            Interface for context factory.
            </summary>
        </member>
        <member name="M:Kephas.Services.IContextFactory.CreateContext``1(System.Object[])">
            <summary>
            Creates a typed context.
            </summary>
            <typeparam name="TContext">Type of the context.</typeparam>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            The new context.
            </returns>
        </member>
        <member name="T:Kephas.Services.ContextFactoryExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Services.IContextFactory"/>.
            </summary>
        </member>
        <member name="M:Kephas.Services.ContextFactoryExtensions.CreateContext(Kephas.Services.IContextFactory,System.Type,System.Object[])">
            <summary>
            Creates a typed context.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <param name="contextType">Type of the context.</param>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            The new context.
            </returns>
        </member>
        <member name="M:Kephas.Services.ContextFactoryExtensions.GetLogManager(Kephas.Services.IContextFactory)">
            <summary>
            Gets the log manager.
            </summary>
            <param name="contextFactory">The context factory.</param>
            <returns>
            The log manager.
            </returns>
        </member>
        <member name="T:Kephas.Services.IFinalizable">
            <summary>
            Provides the <see cref="M:Kephas.Services.IFinalizable.Finalize(Kephas.Services.IContext)"/> method for service finalization.
            </summary>
        </member>
        <member name="M:Kephas.Services.IFinalizable.Finalize(Kephas.Services.IContext)">
            <summary>
            Finalizes the service.
            </summary>
            <param name="context">An optional context for finalization.</param>
        </member>
        <member name="T:Kephas.Services.IInitializable">
            <summary>
            Provides the <see cref="M:Kephas.Services.IInitializable.Initialize(Kephas.Services.IContext)"/> method for service initialization.
            </summary>
        </member>
        <member name="M:Kephas.Services.IInitializable.Initialize(Kephas.Services.IContext)">
            <summary>
            Initializes the service.
            </summary>
            <param name="context">An optional context for initialization.</param>
        </member>
        <member name="T:Kephas.Services.INamedServiceProvider">
            <summary>
            Contract for a shared application service providing named services.
            </summary>
        </member>
        <member name="M:Kephas.Services.INamedServiceProvider.GetNamedService``1(System.String)">
            <summary>
            Gets the service with the provided name.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The named service.
            </returns>
        </member>
        <member name="T:Kephas.Services.IOrderedLazyServiceCollection`2">
            <summary>
            Interface for ordered lazy service collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
        </member>
        <member name="M:Kephas.Services.IOrderedLazyServiceCollection`2.GetServiceFactories(System.Func{System.Lazy{`0,`1},System.Boolean})">
            <summary>
            Gets the service factories in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered service factories.
            </returns>
        </member>
        <member name="M:Kephas.Services.IOrderedLazyServiceCollection`2.GetServices(System.Func{System.Lazy{`0,`1},System.Boolean})">
            <summary>
            Gets the services in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered services.
            </returns>
        </member>
        <member name="T:Kephas.Services.IOrderedServiceFactoryCollection`2">
            <summary>
            Interface for ordered service factory collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
        </member>
        <member name="M:Kephas.Services.IOrderedServiceFactoryCollection`2.GetServiceFactories(System.Func{Kephas.Composition.IExportFactory{`0,`1},System.Boolean})">
            <summary>
            Gets the service factories in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered service factories.
            </returns>
        </member>
        <member name="M:Kephas.Services.IOrderedServiceFactoryCollection`2.GetServices(System.Func{Kephas.Composition.IExportFactory{`0,`1},System.Boolean})">
            <summary>
            Gets the services in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered services.
            </returns>
        </member>
        <member name="T:Kephas.Services.MetadataValueAttribute">
            <summary>
            Marks properties which should be included in the service metadata.
            </summary>
        </member>
        <member name="M:Kephas.Services.MetadataValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.MetadataValueAttribute"/> class.
            </summary>
            <param name="valueName">Name of the value. If not provided, the metadata value will have the name {attribute-name}{property-name}.</param>
        </member>
        <member name="P:Kephas.Services.MetadataValueAttribute.ValueName">
            <summary>
            Gets the name of the metadata value.
            </summary>
            <value>
            The name of the metadata value.
            </value>
        </member>
        <member name="T:Kephas.Services.NullServiceException">
            <summary>
            Exception thrown by null services.
            </summary>
        </member>
        <member name="M:Kephas.Services.NullServiceException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.NullServiceException"/> class.
            </summary>
            <param name="serviceType">The service type.</param>
        </member>
        <member name="M:Kephas.Services.NullServiceException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.NullServiceException"/> class.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Kephas.Services.NullServiceException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.NullServiceException" /> class.
            </summary>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="M:Kephas.Services.NullServiceException.#ctor(System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.NullServiceException" /> class.
            </summary>
            <param name="serviceInstance">The service instance.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Services.OrderedLazyServiceCollection`2">
            <summary>
            Collection of ordered lazy services.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
        </member>
        <member name="M:Kephas.Services.OrderedLazyServiceCollection`2.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.OrderedLazyServiceCollection`2"/> class.
            </summary>
            <param name="serviceFactories">The service factories.</param>
        </member>
        <member name="M:Kephas.Services.OrderedLazyServiceCollection`2.GetServiceFactories(System.Func{System.Lazy{`0,`1},System.Boolean})">
            <summary>
            Gets the service factories in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered service factories.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedLazyServiceCollection`2.GetServices(System.Func{System.Lazy{`0,`1},System.Boolean})">
            <summary>
            Gets the services in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered services.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedLazyServiceCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedLazyServiceCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:Kephas.Services.OrderedServiceCollectionExtensions">
            <summary>
            An ordered service collection extensions.
            </summary>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.Order``2(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0,``1}})">
            <summary>
            Orders the given factory service collection.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
            <param name="factories">The factories to act on.</param>
            <returns>
            A list of ordered services.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.Order``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Orders the given lazy service collection.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
            <param name="factories">The factories to act on.</param>
            <returns>
            A list of ordered services.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.OrderAsDictionary``4(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0,``1}},System.Func{Kephas.Composition.IExportFactory{``0,``1},``2},System.Func{Kephas.Composition.IExportFactory{``0,``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Converts this collection of service factories to a dictionary.
            </summary>
            <remarks>
            If, for the same key, there are multiple matching services, their override priority and
            processing priority is considered, in this order. Further, if both of these priorities are
            equal, then a <see cref="T:Kephas.Data.DuplicateKeyException"/> occurs.
            </remarks>
            <exception cref="T:Kephas.Data.DuplicateKeyException">Thrown when a Duplicate Key error condition occurs.</exception>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
            <typeparam name="TKey">Type of the dictionary key.</typeparam>
            <typeparam name="TValue">Type of the dictionary value.</typeparam>
            <param name="serviceFactories">The service factories.</param>
            <param name="keyFunc">The key function.</param>
            <param name="valueFunc">The value function.</param>
            <param name="keyComparer">Optional. The key comparer.</param>
            <returns>
            The given data converted to a IDictionary&lt;TKey,TValue&gt;.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.OrderAsDictionary``4(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Func{System.Lazy{``0,``1},``2},System.Func{System.Lazy{``0,``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Converts this collection of service factories to a dictionary.
            </summary>
            <remarks>
            If, for the same key, there are multiple matching services, their override priority and
            processing priority is considered, in this order. Further, if both of these priorities are
            equal, then a <see cref="T:Kephas.Data.DuplicateKeyException"/> occurs.
            </remarks>
            <exception cref="T:Kephas.Data.DuplicateKeyException">Thrown when a Duplicate Key error condition occurs.</exception>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
            <typeparam name="TKey">Type of the dictionary key.</typeparam>
            <typeparam name="TValue">Type of the dictionary value.</typeparam>
            <param name="serviceFactories">The service factories.</param>
            <param name="keyFunc">The key function.</param>
            <param name="valueFunc">The value function.</param>
            <param name="keyComparer">Optional. The key comparer.</param>
            <returns>
            The given data converted to a IDictionary&lt;TKey,TValue&gt;.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.OrderAsDictionary``3(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{``0,``1}},System.Func{Kephas.Composition.IExportFactory{``0,``1},``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Converts this collection of service factories to a dictionary.
            </summary>
            <remarks>
            If, for the same key, there are multiple matching services, their override priority and
            processing priority is considered, in this order. Further, if both of these priorities are
            equal, then a <see cref="T:Kephas.Data.DuplicateKeyException"/> occurs.
            </remarks>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="serviceFactories">The service factories.</param>
            <param name="keyFunc">The key function.</param>
            <param name="keyComparer">Optional. The key comparer.</param>
            <returns>
            The given data converted to an IDictionary&lt;TKey,TValue&gt;.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceCollectionExtensions.OrderAsDictionary``3(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}},System.Func{System.Lazy{``0,``1},``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Converts this collection of service factories to a dictionary.
            </summary>
            <remarks>
            If, for the same key, there are multiple matching services, their override priority and
            processing priority is considered, in this order. Further, if both of these priorities are
            equal, then a <see cref="T:Kephas.Data.DuplicateKeyException"/> occurs.
            </remarks>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="serviceFactories">The service factories.</param>
            <param name="keyFunc">The key function.</param>
            <param name="keyComparer">Optional. The key comparer.</param>
            <returns>
            The given data converted to an IDictionary&lt;TKey,TValue&gt;.
            </returns>
        </member>
        <member name="T:Kephas.Services.OrderedServiceFactoryCollection`2">
            <summary>
            Collection of ordered services.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TServiceMetadata">Type of the service metadata.</typeparam>
        </member>
        <member name="M:Kephas.Services.OrderedServiceFactoryCollection`2.#ctor(System.Collections.Generic.IEnumerable{Kephas.Composition.IExportFactory{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.OrderedServiceFactoryCollection`2"/> class.
            </summary>
            <param name="serviceFactories">The service factories.</param>
        </member>
        <member name="M:Kephas.Services.OrderedServiceFactoryCollection`2.GetServiceFactories(System.Func{Kephas.Composition.IExportFactory{`0,`1},System.Boolean})">
            <summary>
            Gets the service factories in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered service factories.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceFactoryCollection`2.GetServices(System.Func{Kephas.Composition.IExportFactory{`0,`1},System.Boolean})">
            <summary>
            Gets the services in the appropriate order.
            </summary>
            <param name="filter">Optional. Specifies a filter.</param>
            <returns>
            The ordered services.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceFactoryCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:Kephas.Services.OrderedServiceFactoryCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:Kephas.Services.OverridePriorityAttribute">
            <summary>
            Indicates an override priority for services when more service implementations are defined for the same contract.
            The service with the highest priority defined will be used.
            </summary>
        </member>
        <member name="M:Kephas.Services.OverridePriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.OverridePriorityAttribute" /> class.
            </summary>
            <param name="priority">The override priority.</param>
        </member>
        <member name="M:Kephas.Services.OverridePriorityAttribute.#ctor(Kephas.Services.Priority)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.OverridePriorityAttribute" /> class.
            </summary>
            <param name="priority">The override priority.</param>
        </member>
        <member name="P:Kephas.Services.OverridePriorityAttribute.Value">
            <summary>
            Gets the priority value.
            </summary>
            <value>
            The priority value.
            </value>
        </member>
        <member name="P:Kephas.Services.OverridePriorityAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Services.Priority">
            <summary>
            Enumerates the priority values.
            They are practically a convenient way to provide integer values for defining priorities.
            A lower value indicates a higher priority.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.Lowest">
            <summary>
            The lowest priority. Typically used by the null services.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.Low">
            <summary>
            The low priority. Typically used by the default services.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.BelowNormal">
            <summary>
            The below normal priority. Typically used by services with a higher specialization than the default ones.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.Normal">
            <summary>
            The normal priority (the default).
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.AboveNormal">
            <summary>
            The above normal priority.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.High">
            <summary>
            The high priority.
            </summary>
        </member>
        <member name="F:Kephas.Services.Priority.Highest">
            <summary>
            The highest priority.
            </summary>
        </member>
        <member name="T:Kephas.Services.ProcessingPriorityAttribute">
            <summary>
            Indicates a processing priority used when more services must be processed.
            </summary>
        </member>
        <member name="M:Kephas.Services.ProcessingPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ProcessingPriorityAttribute" /> class.
            </summary>
            <param name="priority">The processing priority.</param>
        </member>
        <member name="M:Kephas.Services.ProcessingPriorityAttribute.#ctor(Kephas.Services.Priority)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ProcessingPriorityAttribute" /> class.
            </summary>
            <param name="priority">The processing priority.</param>
        </member>
        <member name="P:Kephas.Services.ProcessingPriorityAttribute.Value">
            <summary>
            Gets the priority value.
            </summary>
            <value>
            The priority value.
            </value>
        </member>
        <member name="P:Kephas.Services.ProcessingPriorityAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>
            Gets the metadata value.
            </summary>
            <value>
            The metadata value.
            </value>
        </member>
        <member name="T:Kephas.Services.Reflection.AppServiceInfo">
            <summary>
            Information about the application service.
            </summary>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfo.#ctor(System.Type,Kephas.Services.AppServiceLifetime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Reflection.AppServiceInfo"/> class.
            </summary>
            <param name="contractType">The contract type of the export.</param>
            <param name="lifetime">Optional. The application service lifetime.</param>
            <param name="asOpenGeneric">Optional.
                                        <c>true</c> if the contract should be exported as an open generic;
                                        otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfo.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Reflection.AppServiceInfo"/> class.
            </summary>
            <param name="contractType">The contract type of the export.</param>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfo.#ctor(System.Type,System.Func{Kephas.Composition.ICompositionContext,System.Object},Kephas.Services.AppServiceLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Reflection.AppServiceInfo"/> class.
            </summary>
            <param name="contractType">The contract type of the export.</param>
            <param name="serviceInstanceFactory">The service instance factory.</param>
            <param name="lifetime">Optional. The application service lifetime.</param>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfo.#ctor(System.Type,System.Type,Kephas.Services.AppServiceLifetime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Reflection.AppServiceInfo"/> class.
            </summary>
            <param name="contractType">The contract type of the export.</param>
            <param name="serviceInstanceType">Type of the service instance.</param>
            <param name="lifetime">Optional. The application service lifetime.</param>
            <param name="asOpenGeneric">Optional.
                                        <c>true</c> if the contract should be exported as an open generic;
                                        otherwise, <c>false</c>.
            </param>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.Lifetime">
            <summary>
            Gets the application service lifetime.
            </summary>
            <value>
            The application service lifetime.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether multiple services for this contract are allowed.
            </summary>
            <value>
              <c>true</c> if multiple services are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.AsOpenGeneric">
            <summary>
            Gets a value indicating whether the contract should be exported as an open generic.
            </summary>
            <value>
              <c>true</c> if the contract should be exported as an open generic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.MetadataAttributes">
            <summary>
            Gets or sets the supported metadata attributes.
            </summary>
            <value>
            The metadata attributes.
            </value>
            <remarks>The metadata attributes are used to register the conventions for application services.</remarks>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.ContractType">
            <summary>
            Gets the contract type of the export.
            </summary>
            <value>
            The contract type of the export.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.Instance">
            <summary>
            Gets the service instance.
            </summary>
            <value>
            The service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.InstanceType">
            <summary>
            Gets the type of the service instance.
            </summary>
            <value>
            The type of the service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.AppServiceInfo.InstanceFactory">
            <summary>
            Gets the service instance factory.
            </summary>
            <value>
            The service instance factory.
            </value>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Kephas.Services.Reflection.IAppServiceInfo">
            <summary>
            Contract interface providing information about an application service.
            </summary>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.Lifetime">
            <summary>
            Gets the application service lifetime.
            </summary>
            <value>
            The application service lifetime.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.AllowMultiple">
            <summary>
            Gets a value indicating whether multiple services for this contract are allowed.
            </summary>
            <value>
              <c>true</c> if multiple services are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.AsOpenGeneric">
            <summary>
            Gets a value indicating whether the contract should be exported as an open generic.
            </summary>
            <value>
              <c>true</c> if the contract should be exported as an open generic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.MetadataAttributes">
            <summary>
            Gets the supported metadata attributes.
            </summary>
            <value>
            The metadata attributes.
            </value>
            <remarks>The metadata attributes are used to register the conventions for application services.</remarks>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.ContractType">
            <summary>
            Gets the contract type of the export.
            </summary>
            <value>
            The contract type of the export.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.Instance">
            <summary>
            Gets the service instance.
            </summary>
            <value>
            The service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.InstanceType">
            <summary>
            Gets the type of the service instance.
            </summary>
            <value>
            The type of the service instance.
            </value>
        </member>
        <member name="P:Kephas.Services.Reflection.IAppServiceInfo.InstanceFactory">
            <summary>
            Gets the service instance factory.
            </summary>
            <value>
            The service instance factory.
            </value>
        </member>
        <member name="T:Kephas.Services.Reflection.AppServiceInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Kephas.Services.Reflection.IAppServiceInfo"/>.
            </summary>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfoExtensions.IsSingleton(Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Gets a value indicating whether the application service is shared.
            </summary>
            <param name="appServiceInfo">The application service contract information.</param>
            <returns>
            <c>true</c> if shared; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfoExtensions.IsScoped(Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Gets a value indicating whether the application service is shared within a scope.
            </summary>
            <param name="appServiceInfo">The application service contract information.</param>
            <returns>
            <c>true</c> if shared within a scope; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Kephas.Services.Reflection.AppServiceInfoExtensions.IsTransient(Kephas.Services.Reflection.IAppServiceInfo)">
            <summary>
            Gets a value indicating whether the application service is instanced per request.
            </summary>
            <param name="appServiceInfo">The application service contract information.</param>
            <returns>
            <c>true</c> if instanced per request; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kephas.Services.ScopedAppServiceContractAttribute">
            <summary>
            Marks an interface to be contract for singleton application services within a specific scope.
            Application services are automatically identified by the composition
            and added to the container.
            </summary>
        </member>
        <member name="M:Kephas.Services.ScopedAppServiceContractAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ScopedAppServiceContractAttribute"/> class.
            </summary>
        </member>
        <member name="T:Kephas.Services.ServiceException">
            <summary>
            Exception for signalling service errors.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceException"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Services.ServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Kephas.Services.ServiceHelper">
            <summary>
            A service helper.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceHelper.InitializeAsync(System.Object,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Initializes the service asynchronously.
            </summary>
            <remarks>
            If the service implements <see cref="T:Kephas.Services.IAsyncInitializable"/>, the <see cref="M:Kephas.Services.IAsyncInitializable.InitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method is called and its result is returned.
            If the service implements <see cref="T:Kephas.Services.IInitializable"/>, the <see cref="M:Kephas.Services.IInitializable.Initialize(Kephas.Services.IContext)"/> method is called and a completed task is returned.
            Otherwise nothing happens.
            </remarks>
            <param name="service">The service.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Services.ServiceHelper.Initialize(System.Object,Kephas.Services.IContext)">
            <summary>
            Initializes the service.
            </summary>
            <remarks>
            If the service implements <see cref="T:Kephas.Services.IAsyncInitializable"/>, the <see cref="M:Kephas.Services.IAsyncInitializable.InitializeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method is synchronously called.
            If the service implements <see cref="T:Kephas.Services.IInitializable"/>, the <see cref="M:Kephas.Services.IInitializable.Initialize(Kephas.Services.IContext)"/> method is called.
            Otherwise nothing happens.
            </remarks>
            <param name="service">The service.</param>
            <param name="context">Optional. The context.</param>
        </member>
        <member name="M:Kephas.Services.ServiceHelper.FinalizeAsync(System.Object,Kephas.Services.IContext,System.Threading.CancellationToken)">
            <summary>
            Finalizes the service asynchronously.
            </summary>
            <remarks>
            If the service implements <see cref="T:Kephas.Services.IAsyncFinalizable"/>, the <see cref="M:Kephas.Services.IAsyncFinalizable.FinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method is called and its result is returned.
            If the service implements <see cref="T:Kephas.Services.IFinalizable"/>, the <see cref="M:Kephas.Services.IFinalizable.Finalize(Kephas.Services.IContext)"/> method is called and a completed task is returned.
            If the service implements <see cref="T:System.IDisposable"/>, the <see cref="M:System.IDisposable.Dispose"/> method is called and a completed task is returned.
            Otherwise nothing happens.
            </remarks>
            <param name="service">The service.</param>
            <param name="context">Optional. The context.</param>
            <param name="cancellationToken">Optional. A token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Services.ServiceHelper.Finalize(System.Object,Kephas.Services.IContext)">
            <summary>
            Finalizes the service.
            </summary>
            <remarks>
            If the service implements <see cref="T:Kephas.Services.IAsyncFinalizable"/>, the <see cref="M:Kephas.Services.IAsyncFinalizable.FinalizeAsync(Kephas.Services.IContext,System.Threading.CancellationToken)"/> method is called synchronously.
            If the service implements <see cref="T:Kephas.Services.IFinalizable"/>, the <see cref="M:Kephas.Services.IFinalizable.Finalize(Kephas.Services.IContext)"/> method is called.
            If the service implements <see cref="T:System.IDisposable"/>, the <see cref="M:System.IDisposable.Dispose"/> method is called.
            Otherwise nothing happens.
            </remarks>
            <param name="service">The service.</param>
            <param name="context">Optional. The context.</param>
        </member>
        <member name="T:Kephas.Services.ServiceNameAttribute">
            <summary>
            Attribute for naming services.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceNameAttribute"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Kephas.Services.ServiceNameAttribute.Kephas#Composition#Metadata#IMetadataValue#Value">
            <summary>Gets the metadata value.</summary>
            <value>The metadata value.</value>
        </member>
        <member name="P:Kephas.Services.ServiceNameAttribute.Value">
            <summary>Gets the metadata value.</summary>
            <value>The metadata value.</value>
        </member>
        <member name="T:Kephas.Services.ServiceNotInitializedException">
            <summary>
            Exception for signalling service not initialized errors.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceNotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceNotInitializedException"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Services.ServiceNotInitializedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceNotInitializedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Kephas.Services.ServiceNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.ServiceNotInitializedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Kephas.Services.SingletonAppServiceContractAttribute">
            <summary>
            Marks an interface to be a contract for singleton application services.
            Application services are automatically identified by the composition
            and added to the container.
            </summary>
        </member>
        <member name="M:Kephas.Services.SingletonAppServiceContractAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.SingletonAppServiceContractAttribute"/> class.
            </summary>
        </member>
        <member name="T:Kephas.Services.Transitions.FinalizationMonitor`2">
            <summary>
            Class monitoring the finalization state for the service <typeparamref name="TContract"/> with the implementation <typeparamref name="TServiceImplementation"/>.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
            <typeparam name="TServiceImplementation">The service implementation type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.FinalizationMonitor`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.FinalizationMonitor`2"/> class.
            </summary>
        </member>
        <member name="T:Kephas.Services.Transitions.FinalizationMonitor`1">
            <summary>
            Class monitoring the finalization state for the service <typeparamref name="TContract"/> with the implementation type provided in constructor.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.FinalizationMonitor`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.FinalizationMonitor`1"/> class.
            </summary>
            <param name="serviceImplementationType">Type of the service implementation.</param>
        </member>
        <member name="T:Kephas.Services.Transitions.InitializationMonitor`2">
            <summary>
            Class monitoring the initialization state for the service <typeparamref name="TContract"/> with the implementation <typeparamref name="TServiceImplementation"/>.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
            <typeparam name="TServiceImplementation">The service implementation type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.InitializationMonitor`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.InitializationMonitor`2"/> class.
            </summary>
        </member>
        <member name="T:Kephas.Services.Transitions.InitializationMonitor`1">
            <summary>
            Class monitoring the initialization state for the service <typeparamref name="TContract"/> with the implementation type provided in constructor.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.InitializationMonitor`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.InitializationMonitor`1"/> class.
            </summary>
            <param name="serviceImplementationType">Type of the service implementation.</param>
        </member>
        <member name="T:Kephas.Services.Transitions.ITransitionState">
            <summary>
            Provides information about a transition's state.
            </summary>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.IsNotStarted">
            <summary>
            Gets a value indicating whether the transition is not started.
            </summary>
            <value>
            <c>true</c> if the transition is not started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.IsInProgress">
            <summary>
            Gets a value indicating whether the transition is in progress.
            </summary>
            <value>
            <c>true</c> if the transition is in progress; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.IsCompleted">
            <summary>
            Gets a value indicating whether the transition is completed.
            </summary>
            <value>
            <c>true</c> if the transition is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.IsCompletedSuccessfully">
            <summary>
            Gets a value indicating whether the transition is completed successfully.
            </summary>
            <value>
            <c>true</c> if the transition  is completed successfully; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.IsFaulted">
            <summary>
            Gets a value indicating whether the transition is faulted.
            </summary>
            <value>
            <c>true</c> if the transition is faulted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.ITransitionState.Exception">
            <summary>
            Gets the exception in the case the transition failed.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Kephas.Services.Transitions.ServiceTransitionException">
            <summary>
            The service transition exception.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.ServiceTransitionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.ServiceTransitionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Kephas.Services.Transitions.ServiceTransitionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.ServiceTransitionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Kephas.Services.Transitions.TransitionMonitor">
            <summary>
            Class monitoring the state of a service transition.
            </summary>
        </member>
        <member name="F:Kephas.Services.Transitions.TransitionMonitor.transitionName">
            <summary>
            The transition name.
            </summary>
        </member>
        <member name="F:Kephas.Services.Transitions.TransitionMonitor.serviceName">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="F:Kephas.Services.Transitions.TransitionMonitor.syncObject">
            <summary>
            The synchronization object.
            </summary>
        </member>
        <member name="F:Kephas.Services.Transitions.TransitionMonitor.inProgress">
            <summary>
            Stores the progess flag.
            null: not started.
            true: in progress.
            false: completed.
            </summary>
        </member>
        <member name="F:Kephas.Services.Transitions.TransitionMonitor.isFaulted">
            <summary>
            Stores the faulted flag.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.TransitionMonitor"/> class.
            </summary>
            <param name="transitionName">Name of the transition.</param>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.TransitionMonitor"/> class.
            </summary>
            <param name="transitionName">Name of the transition.</param>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.IsNotStarted">
            <summary>
            Gets a value indicating whether the transition is not started.
            </summary>
            <value>
            <c>true</c> if the transition is not started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.IsInProgress">
            <summary>
            Gets a value indicating whether the transition is in progress.
            </summary>
            <value>
            <c>true</c> if the transition is in progress; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.IsCompleted">
            <summary>
            Gets a value indicating whether the transition is completed.
            </summary>
            <value>
            <c>true</c> if the transition is completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.IsCompletedSuccessfully">
            <summary>
            Gets a value indicating whether the transition is completed succcessfully.
            </summary>
            <value>
            <c>true</c> if the transition  is completed succcessfully; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.IsFaulted">
            <summary>
            Gets a value indicating whether the transition is faulted.
            </summary>
            <value>
            <c>true</c> if the transition is faulted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Kephas.Services.Transitions.TransitionMonitor.Exception">
            <summary>
            Gets the exception in the case the transition failed.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.AssertIsNotStarted">
            <summary>
            Asserts that the service is not started.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.AssertIsInProgress">
            <summary>
            Asserts that the service is in progress.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.AssertIsCompleted">
            <summary>
            Asserts that the service is completed.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.AssertIsCompletedSuccessfully">
            <summary>
            Asserts that the service is completed successfully.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.Start">
            <summary>
            Starts the transition.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.Complete">
            <summary>
            Completes the transition successfully.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.Fault(System.Exception)">
            <summary>
            Marks the transition as faulted.
            </summary>
            <param name="exception">The exception which occured.</param>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.Reset">
            <summary>
            Resets the transition to its initial state.
            </summary>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor.GetServiceName">
            <summary>
            Gets service name.
            </summary>
            <returns>
            The service name.
            </returns>
        </member>
        <member name="T:Kephas.Services.Transitions.TransitionMonitor`2">
            <summary>
            Class monitoring the state of a transition for the service <typeparamref name="TContract"/> with the implementation <typeparamref name="TServiceImplementation"/>.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
            <typeparam name="TServiceImplementation">The service implementation type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.TransitionMonitor`2" /> class.
            </summary>
            <param name="transitionName">Name of the transition.</param>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor`2.ComputeServiceName">
            <summary>
            Gets the name of the service.
            </summary>
            <returns>The name of the service.</returns>
        </member>
        <member name="T:Kephas.Services.Transitions.TransitionMonitor`1">
            <summary>
            Class monitoring the state of a transition for the service <typeparamref name="TContract"/> with the implementation type provided in constructor.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor`1.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Services.Transitions.TransitionMonitor`1" /> class.
            </summary>
            <param name="transitionName">Name of the transition.</param>
            <param name="serviceImplementationType">Type of the service implementation.</param>
        </member>
        <member name="M:Kephas.Services.Transitions.TransitionMonitor`1.ComputeServiceName(System.Type)">
            <summary>
            Gets the name of the service.
            </summary>
            <param name="serviceImplementationType">Type of the service implementation.</param>
            <returns>
            The name of the service.
            </returns>
        </member>
        <member name="T:Kephas.StringExtensions">
            <summary>
            String extension methods.
            </summary>
        </member>
        <member name="M:Kephas.StringExtensions.Split(System.String,System.Func{System.Char,System.Boolean},System.Boolean)">
            <summary>
            Splits the string using a controller function.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="isSeparator">The function indicating whether a character is separator.</param>
            <param name="removeEmptyEntries">Optional. True to remove empty entries.</param>
            <returns>
            An enumeration of string splits.
            </returns>
        </member>
        <member name="M:Kephas.StringExtensions.Split(System.String,System.Char[],System.Char[],System.Boolean)">
            <summary>
            Splits the string using a separator and quoting characters.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The separator characters.</param>
            <param name="quote">The quote characters.</param>
            <param name="removeEmptyEntries">Optional. True to remove empty entries.</param>
            <returns>
            An enumeration of string splits.
            </returns>
        </member>
        <member name="M:Kephas.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats the provided string with the indicated arguments.
            </summary>
            <param name="format">The string format.</param>
            <param name="args">A variable-length parameters list containing arguments.</param>
            <returns>
            The formatted string.
            </returns>
        </member>
        <member name="M:Kephas.StringExtensions.JoinWith(System.String,System.Object[])">
            <summary>
            Concatenates the elements of an object array, using the specified separator between
            each element.
            </summary>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string
            only if values has more than one element.
            </param>
            <param name="args">An array that contains the elements to concatenate.</param>
            <returns>
            A string.
            </returns>
        </member>
        <member name="T:Kephas.Text.Encoding.Base64Data">
            <summary>
            A Base64 data.
            </summary>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Text.Encoding.Base64Data"/> class.
            </summary>
            <param name="base64String">The base64 string.</param>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Text.Encoding.Base64Data"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="mimeType">The MIME type (optional).</param>
        </member>
        <member name="P:Kephas.Text.Encoding.Base64Data.MimeType">
            <summary>
            Gets the MIME type.
            </summary>
            <value>
            The MIME type.
            </value>
        </member>
        <member name="P:Kephas.Text.Encoding.Base64Data.Bytes">
            <summary>
            Gets the bytes.
            </summary>
            <value>
            The bytes.
            </value>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.FromBase64String(System.String)">
            <summary>
            Initializes a new <see cref="T:Kephas.Text.Encoding.Base64Data"/> from the given Base64 string.
            </summary>
            <param name="base64String">The base64 string.</param>
            <returns>
            A <see cref="T:Kephas.Text.Encoding.Base64Data"/> instance representing the provided string.
            </returns>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.ToBase64String(System.Byte[],System.String)">
            <summary>
            Converts the provided bytes to a base 64 string.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <param name="mimeType">The MIME type (optional).</param>
            <returns>
            The given data converted to a Base64 string.
            </returns>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.ToBase64String(System.String,System.String)">
            <summary>
            Converts the provided plain string to a base 64 string.
            </summary>
            <param name="plainString">The plain string to convert.</param>
            <param name="mimeType">The MIME type (optional).</param>
            <returns>
            The given string converted to a Base64 string.
            </returns>
        </member>
        <member name="M:Kephas.Text.Encoding.Base64Data.ToBase64String">
            <summary>
            Converts this object to a Base64 string.
            </summary>
            <returns>
            This object as a Base64 string.
            </returns>
        </member>
        <member name="T:Kephas.Threading.Lock">
            <summary>
            Class used for execution synchronization.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Lock.EnterAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Enters the lock and ensures that the action is executed within the lock.
            </summary>
            <param name="action">The action to be executed.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Kephas.Threading.Lock.EnterAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Enters the lock and ensures that the action is executed within the lock.
            </summary>
            <param name="action">The action to be executed.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Kephas.Threading.Lock.EnterAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Enters the lock and ensures that the action is executed within the lock.
            </summary>
            <typeparam name="T">The asynchronous result type.</typeparam>
            <param name="action">The action to be executed.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Kephas.Threading.Lock.EnterAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Enters the lock and ensures that the action is executed within the lock.
            </summary>
            <typeparam name="T">The asynchronous result type.</typeparam>
            <param name="action">The action to be executed.</param>
            <param name="cancellationToken">Optional. The cancellation token.</param>
            <returns>An asynchronous result.</returns>
        </member>
        <member name="M:Kephas.Threading.Lock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Kephas.Threading.Tasks.TaskHelper">
            <summary>
            Extension methods for the <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/> classes.
            </summary>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskHelper.DefaultWaitMilliseconds">
            <summary>
            Gets or sets the default value of milliseconds to wait a task in a completion check cycle when simulating synchronous calls.
            The default value is 20 milliseconds, but it can be changed to accomodate application needs.
            </summary>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskHelper.DefaultTimeout">
            <summary>
            Gets or sets the default timeout when waiting for task completion in simulating synchronous calls.
            The default value is 30 seconds, but it can be changed to accomodate application needs.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.WaitNonLocking(System.Threading.Tasks.Task,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Waits the task avoiding the current thread to be locked.
            </summary>
            <param name="task">The task.</param>
            <param name="timeout">The timeout (optional). The default value is <see cref="P:Kephas.Threading.Tasks.TaskHelper.DefaultTimeout"/>.</param>
            <param name="waitMilliseconds">The milliseconds used to wait until checking again the state of the task (optional). The default value is <see cref="P:Kephas.Threading.Tasks.TaskHelper.DefaultWaitMilliseconds"/>.</param>
            <param name="throwOnTimeout">If set to <c>true</c> an exception is thrown on timeout.</param>
            <returns>
              <c>true</c> if the task completed execution within the allotted time; otherwise, <c>false</c>.
            </returns>
            <remarks>
            It is a bad practice to run synchronously tasks meant to be async "by birth".
            However, if there is no other chance than waiting for a task to complete synchronously,
            DO NOT USE task.Wait(), because there are situations when it deadlocks the thread.
            An option would be to use task.ConfigureAwait(false).Wait(), but all the tasks down
            the task chain must be exactly the same way configured, which may not not be always the case.
            An alternative implementation might be the one provided below, but this must be tried if it really works:
            http://stackoverflow.com/questions/5095183/how-would-i-run-an-async-taskt-method-synchronously.
            For more information see also http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
            and http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx.
            </remarks>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.GetResultNonLocking``1(System.Threading.Tasks.Task{``0},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Waits the task avoiding the current thread to be locked.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">Optional. The timeout. The default value is <see cref="P:Kephas.Threading.Tasks.TaskHelper.DefaultTimeout"/>.</param>
            <param name="waitMilliseconds">
            Optional. The milliseconds used to wait until checking again the state of the task. The default value is
            <see cref="P:Kephas.Threading.Tasks.TaskHelper.DefaultWaitMilliseconds"/>.</param>
            <param name="throwOnTimeout">Optional. If set to <c>true</c> an exception is thrown on timeout.</param>
            <returns>
            The task result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.PreserveThreadContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Gets a task awaiter preserving the current context upon continuation.
            </summary>
            <remarks>
            The returned awaiter does not continue on the captured context (<see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/><c>(false)</c> is called),
            but it can be configured to preserve some thread properties.
            This awaiter is useful on the server, where <c>await</c> should not continue on the starting thread (like the UI does), but properties like the current culture should be preserved.
            </remarks>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="task">The task.</param>
            <returns>
            A <see cref="T:Kephas.Threading.Tasks.ThreadContextAwaiter`1"/>.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.PreserveThreadContext(System.Threading.Tasks.Task)">
            <summary>
            Gets a task awaiter preserving the current context upon continuation.
            </summary>
            <remarks>
            The returned awaiter does not continue on the captured context (<see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/><c>(false)</c> is called),
            but it can be configured to preserve some thread properties.
            This awaiter is useful on the server, where <c>await</c> should not continue on the starting thread (like the UI does), but properties like the current culture should be preserved.
            </remarks>
            <param name="task">The task.</param>
            <returns>
            A <see cref="T:Kephas.Threading.Tasks.ThreadContextAwaiter"/>.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Configures a timeout for the provided task. If the task ends within the indicated time,
            the original task result is returned, otherwise a <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException"/> occurs.
            </summary>
            <remarks>
            The <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException"/> contains the original task that timed out.
            </remarks>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>
            The result of the original task.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Configures a timeout for the provided task. If the task ends within the indicated time,
            the original task result is returned, otherwise a <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException"/> occurs.
            </summary>
            <remarks>
            The <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException"/> contains the original task that timed out.
            </remarks>
            <typeparam name="T">The task result type.</typeparam>
            <param name="task">The task.</param>
            <param name="timeout">The timeout.</param>
            <returns>
            The result of the original task.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
            Converts the action into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the action
            does not complete in the indicated time or when cancellation is issued,
            the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <param name="action">The action to be executed.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync(System.Action,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Converts the action into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the action
            does not complete in the indicated time or when cancellation is issued,
            the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <param name="action">The action to be executed.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync(System.Action,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Converts the action into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the action
            does not complete in the indicated time or when cancellation is issued,
            the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <param name="action">The action to be executed.</param>
            <param name="timeout">The timeout. If <c>null</c> specified, indefinite wait is considered.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Converts the function into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the function does not complete in the indicated
            time or when cancellation is issued, the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <typeparam name="T">The function return type.</typeparam>
            <param name="func">The function to be executed.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync``1(System.Func{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Converts the function into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the function does not complete in the indicated
            time or when cancellation is issued, the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <typeparam name="T">The function return type.</typeparam>
            <param name="func">The function to be executed.</param>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.AsAsync``1(System.Func{``0},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Converts the function into an asynchronous operation.
            </summary>
            <remarks>
            Caution is to be considered because, when the function does not complete in the indicated
            time or when cancellation is issued, the task running the operation does not complete.
            In this case, the running task is returned in the Task property of either the TaskCanceledException
            or TaskTimeoutException.
            </remarks>
            <typeparam name="T">The function return type.</typeparam>
            <param name="func">The function to be executed.</param>
            <param name="timeout">The timeout. If <c>null</c> specified, indefinite wait is considered.</param>
            <param name="cancellationToken">Optional. a token that allows processing to be cancelled.</param>
            <returns>
            An asynchronous result.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.GetResultType(System.Threading.Tasks.Task)">
            <summary>
            Gets the result type of a generic task type.
            If the task does not return any result, <c>null</c> is returned.
            </summary>
            <param name="task">The task.</param>
            <returns>
            The result type.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.GetResult(System.Threading.Tasks.Task)">
            <summary>
            Gets the result of a task.
            If the task does not return any result, <c>null</c> is returned.
            </summary>
            <param name="task">The task.</param>
            <returns>
            The result type.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.EnsureCompletedSuccessfully(System.Threading.Tasks.Task)">
            <summary>
            Ensures that the task completed successfully.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskHelper.EnsureCompletedSuccessfully``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Ensures that the task completed successfully.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="task">The task.</param>
            <returns>The task result.</returns>
        </member>
        <member name="T:Kephas.Threading.Tasks.TaskNotCompletedException">
            <summary>
            Exception for signalling task not completed errors.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskNotCompletedException.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskNotCompletedException" /> class.
            </summary>
            <param name="task">The task that is not completed.</param>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskNotCompletedException.#ctor(System.Threading.Tasks.Task,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskNotCompletedException" /> class with the specified error message.</summary>
            <param name="task">The task that is not completed.</param>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskNotCompletedException.#ctor(System.Threading.Tasks.Task,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskNotCompletedException" /> class with the specified error message and inner exception.</summary>
            <param name="task">The task that is not completed.</param>
            <param name="message">The message that describes the error. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskNotCompletedException.Task">
            <summary>
            Gets the task that is not completed.
            </summary>
            <value>
            The task that is not completed.
            </value>
        </member>
        <member name="T:Kephas.Threading.Tasks.TaskSettings">
            <summary>
            Task settings.
            </summary>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskSettings.DefaultWaitMilliseconds">
            <summary>
            Gets or sets the default value of milliseconds to wait a task in a completion check cycle when simulating synchronous calls.
            The default value is 20 milliseconds.
            </summary>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskSettings.DefaultTimeout">
            <summary>
            Gets or sets the default timeout when waiting for task completion in simulating synchronous calls.
            The default value is 30 seconds.
            </summary>
        </member>
        <member name="T:Kephas.Threading.Tasks.TaskTimeoutException">
            <summary>
            Exception for signalling task timeout errors.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskTimeoutException.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException" /> class.
            </summary>
            <param name="task">The task that timeout.</param>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskTimeoutException.#ctor(System.Threading.Tasks.Task,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException" /> class with the specified error message.</summary>
            <param name="task">The task that timeout.</param>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Kephas.Threading.Tasks.TaskTimeoutException.#ctor(System.Threading.Tasks.Task,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.TaskTimeoutException" /> class with the specified error message and inner exception.</summary>
            <param name="task">The task that timeout.</param>
            <param name="message">The message that describes the error. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
        </member>
        <member name="P:Kephas.Threading.Tasks.TaskTimeoutException.Task">
            <summary>
            Gets the task that timed out.
            </summary>
            <value>
            The task that timed out.
            </value>
        </member>
        <member name="T:Kephas.Threading.Tasks.ThreadContext">
            <summary>
            Stores the thread context.
            </summary>
        </member>
        <member name="F:Kephas.Threading.Tasks.ThreadContext.storeActions">
            <summary>
            The store actions.
            </summary>
        </member>
        <member name="F:Kephas.Threading.Tasks.ThreadContext.restoreActions">
            <summary>
            The restore actions.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContext.#ctor(System.Collections.Generic.IEnumerable{System.Action{Kephas.Threading.Tasks.ThreadContext}},System.Collections.Generic.IEnumerable{System.Action{Kephas.Threading.Tasks.ThreadContext}})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.ThreadContext"/>
            class.
            </summary>
            <param name="storeActions">The actions called when information should be stored in the context.</param>
            <param name="restoreActions">The actions called when information should be restored from the context.</param>
        </member>
        <member name="P:Kephas.Threading.Tasks.ThreadContext.CurrentCulture">
            <summary>
            Gets or sets the current culture.
            </summary>
            <value>
            The current culture.
            </value>
        </member>
        <member name="P:Kephas.Threading.Tasks.ThreadContext.CurrentUICulture">
            <summary>
            Gets or sets the current UI culture.
            </summary>
            <value>
            The current UI culture.
            </value>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContext.Store">
            <summary>
            Stores information in the thread context.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContext.Restore">
            <summary>
            Restores information from the thread context.
            </summary>
        </member>
        <member name="T:Kephas.Threading.Tasks.ThreadContextAwaiter`1">
            <summary>
            Awaiter preserving the thread context.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="F:Kephas.Threading.Tasks.ThreadContextAwaiter`1.awaiter">
            <summary>
            The awaiter.
            </summary>
        </member>
        <member name="F:Kephas.Threading.Tasks.ThreadContextAwaiter`1.threadContext">
            <summary>
            Thread context for the server.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.ThreadContextAwaiter`1"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Kephas.Threading.Tasks.ThreadContextAwaiter`1.IsCompleted">
            <summary>
            Gets a value indicating whether the awaiter is completed.
            </summary>
            <value>
            <c>true</c> if this object is completed, <c>false</c> if not.
            </value>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter`1.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param><exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter`1.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param><exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter`1.GetAwaiter">
            <summary>
            Gets this awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter`1.GetResult">
            <summary>
            Notifies the awaiter to get the result.
            </summary>
            <returns>
            The result returned by the task.
            </returns>
        </member>
        <member name="T:Kephas.Threading.Tasks.ThreadContextAwaiter">
            <summary>
            Awaiter preserving the thread context.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.ThreadContextAwaiter"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Kephas.Threading.Tasks.ThreadContextAwaiter.IsCompleted">
            <summary>
            Gets a value indicating whether the awaiter is completed.
            </summary>
            <value>
            <c>true</c> if this object is completed, <c>false</c> if not.
            </value>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter.OnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param><exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param><exception cref="T:System.ArgumentNullException">The <paramref name="continuation"/> argument is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter.GetAwaiter">
            <summary>
            Gets this awaiter.
            </summary>
            <returns>
            The awaiter.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextAwaiter.GetResult">
            <summary>
            Notifies the awaiter to get the result.
            </summary>
        </member>
        <member name="T:Kephas.Threading.Tasks.ThreadContextBuilder">
            <summary>
            Provides methods to configure and build <see cref="T:Kephas.Threading.Tasks.ThreadContext"/> instances.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.ThreadContextBuilder"/> class.
            </summary>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.#ctor(Kephas.Dynamic.IExpando)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Threading.Tasks.ThreadContextBuilder"/> class.
            </summary>
            <param name="threadContextPool">The thread context pool.</param>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.WithStoreAction(System.Action{Kephas.Threading.Tasks.ThreadContext})">
            <summary>
            Adds the store action to the ambient services. This method is not thread safe, use it with caution and only when initializing the server.
            </summary>
            <param name="storeAction">The store action.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.WithRestoreAction(System.Action{Kephas.Threading.Tasks.ThreadContext})">
            <summary>
            Adds the restore action to the ambient services. This method is not thread safe, use it with caution and only when initializing the server.
            </summary>
            <param name="restoreAction">The restore action.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.CreateThreadContext">
            <summary>
            Creates a new <see cref="T:Kephas.Threading.Tasks.ThreadContext"/>.
            </summary>
            <returns>
            A <see cref="T:Kephas.Threading.Tasks.ThreadContext"/>.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.GetOrCreateContextActions(System.String)">
            <summary>
            Gets the context actions list with the provided key and, if the list does not exist, creates it.
            </summary>
            <param name="actionsKey">The actions key.</param>
            <returns>
            The context actions list.
            </returns>
        </member>
        <member name="M:Kephas.Threading.Tasks.ThreadContextBuilder.GetContextActions(System.String)">
            <summary>
            Gets the context actions list with the provided key.
            </summary>
            <param name="actionsKey">The actions key.</param>
            <returns>
            The context actions list.
            </returns>
        </member>
        <member name="T:Kephas.Versioning.IVersionComparer">
            <summary>
            Contract for version comparer objects capable of sorting and determining the equality of
            <see cref="T:Kephas.Versioning.SemanticVersion"/> objects.
            </summary>
        </member>
        <member name="T:Kephas.Versioning.SemanticVersion">
            <summary>A strict SemVer implementation</summary>
            <summary>A base version operations</summary>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(Kephas.Versioning.SemanticVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <param name="version">Version to clone.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z-prerelease.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
            <param name="releaseLabel">The prerelease label.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z-prerelease#build01.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
            <param name="releaseLabel">The prerelease label.</param>
            <param name="metadata">The build metadata.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z-alpha.1.2#build01.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
            <param name="releaseLabels">Release labels that have been split by the dot separator.</param>
            <param name="metadata">The build metadata.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="releaseLabel">Full release label.</param>
            <param name="metadata">Build metadata.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z.T-alpha.1.2#build01.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
            <param name="revision">The T part of the version.</param>
            <param name="releaseLabel">Prerelease label.</param>
            <param name="metadata">Build metadata.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <remarks>Creates a SemanticVersion X.Y.Z.T-alpha.1.2#build01.</remarks>
            <param name="major">The X part of the version.</param>
            <param name="minor">The Y part of the version.</param>
            <param name="patch">The Z part of the version.</param>
            <param name="revision">The T part of the version.</param>
            <param name="releaseLabels">The release labels.</param>
            <param name="metadata">The build metadata.</param>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="releaseLabels">The release labels.</param>
            <param name="metadata">The build metadata.</param>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Major">
            <summary>Gets the major version X (X.y.z).</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Minor">
            <summary>Gets the minor version Y (x.Y.z).</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Patch">
            <summary>Gets the patch version Z (x.y.Z).</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Hotfix">
            <summary>Gets the hotfix version T (x.y.z.T).</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.ReleaseLabels">
            <summary>
            Gets a collection of pre-release labels attached to the version.
            </summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Release">
            <summary>Gets the full pre-release label for the version.</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.IsPrerelease">
            <summary>Gets a value indicating whether pre-release labels exist for the version.</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.HasMetadata">
            <summary>Gets a value indicating whether metadata exists for the version.</summary>
        </member>
        <member name="P:Kephas.Versioning.SemanticVersion.Metadata">
            <summary>Gets the build metadata attached to the version.</summary>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_Equality(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Equals operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_Inequality(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Not equal operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_LessThan(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Less than operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_LessThanOrEqual(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Less than or equal operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_GreaterThan(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Greater than operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.op_GreaterThanOrEqual(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Greater than or equal operator.
            </summary>
            <param name="version1">The first instance to compare.</param>
            <param name="version2">The second instance to compare.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a SemVer string using strict SemVer rules.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
                                                illegal values.</exception>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Kephas.Versioning.SemanticVersion"/>.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.TryParse(System.String,Kephas.Versioning.SemanticVersion@)">
            <summary>
            Parse a version string.
            </summary>
            <param name="value">The value.</param>
            <param name="semanticVersion">[out] Version to clone.</param>
            <returns>
            False if the version is not a strict semver, true otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.ToNormalizedString">
            <summary>
            Gives a normalized representation of the version.
            This string is unique to the identity of the version and does not contain metadata.
            </summary>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.ToFullString">
            <summary>
            Gives a full representation of the version include metadata.
            This string is not unique to the identity of the version. Other versions
            that differ on metadata will have a different full string representation.
            </summary>
            <returns>The full string representation, including metadata.</returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.ToString">
            <summary>Get the normalized string.</summary>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Custom string format.
            </summary>
            <param name="format">The format to use.
                                 -or-
                                 A null reference (<see langword="Nothing" /> in Visual Basic) to use
                                 the default format defined for the type of the
                                 <see cref="T:System.IFormattable" /> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.
                                         -or-
                                         A null reference (<see langword="Nothing" /> in Visual Basic)
                                         to obtain the numeric format information from the current
                                         locale setting of the operating system.</param>
            <returns>
            The formatted string.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.TryFormatter(System.String,System.IFormatProvider,System.String@)">
            <summary>
            Internal string formatter.
            </summary>
            <param name="format">The format to use.
                                 -or-
                                 A null reference (<see langword="Nothing" /> in Visual Basic) to use
                                 the default format defined for the type of the
                                 <see cref="T:System.IFormattable" /> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.
                                         -or-
                                         A null reference (<see langword="Nothing" /> in Visual Basic)
                                         to obtain the numeric format information from the current
                                         locale setting of the operating system.</param>
            <param name="formattedString">[out] The formatted string.</param>
            <returns>
            True if the version could be formatted, false otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.CompareTo(System.Object)">
             <summary>
             Compares the current instance with another object of the same type and returns an integer
             that indicates whether the current instance precedes, follows, or occurs in the same position
             in the sort order as the other object.
             </summary>
             <param name="other">An object to compare with this instance.</param>
             <returns>
             A value that indicates the relative order of the objects being compared. The return value has
             these meanings:
             Value
            
             Meaning
            
             Less than zero
            
             This instance precedes <paramref name="other" /> in the sort order.
            
             Zero
            
             This instance occurs in the same position in the sort order as <paramref name="other" />.
            
             Greater than zero
            
             This instance follows <paramref name="other" /> in the sort order.
             </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.CompareTo(Kephas.Versioning.SemanticVersion)">
             <summary>
             Compares the current instance with another object of the same type and returns an integer
             that indicates whether the current instance precedes, follows, or occurs in the same position
             in the sort order as the other object.
             </summary>
             <param name="other">An object to compare with this instance.</param>
             <returns>
             A value that indicates the relative order of the objects being compared. The return value has
             these meanings:
             Value
            
             Meaning
            
             Less than zero
            
             This instance precedes <paramref name="other" /> in the sort order.
            
             Zero
            
             This instance occurs in the same position in the sort order as <paramref name="other" />.
            
             Greater than zero
            
             This instance follows <paramref name="other" /> in the sort order.
             </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true" /> if the specified object  is equal to the current object; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.Equals(Kephas.Versioning.SemanticVersion)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" />
            parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.Equals(Kephas.Versioning.SemanticVersion,Kephas.Versioning.VersionComparison)">
            <summary>
            Determines whether the specified object is equal to the current object using the provided comparison.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <param name="versionComparison">Version comparison to be compared.</param>
            <returns>
            <see langword="true" /> if the specified object  is equal to the current object; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.CompareTo(Kephas.Versioning.SemanticVersion,Kephas.Versioning.VersionComparison)">
             <summary>
             Compares the current instance with another object of the same type and returns an integer
             that indicates whether the current instance precedes, follows, or occurs in the same position
             in the sort order as the other object.
             </summary>
             <param name="other">An object to compare with this instance.</param>
             <param name="versionComparison">Version comparison to be compared.</param>
             <returns>
             A value that indicates the relative order of the objects being compared. The return value has
             these meanings:
             Value
            
             Meaning
            
             Less than zero
            
             This instance precedes <paramref name="other" /> in the sort order.
            
             Zero
            
             This instance occurs in the same position in the sort order as <paramref name="other" />.
            
             Greater than zero
            
             This instance follows <paramref name="other" /> in the sort order.
             </returns>
        </member>
        <member name="M:Kephas.Versioning.SemanticVersion.ParseSections(System.String)">
            <summary>
            Parse the version string into version/release/build The goal of this code is to take the most
            direct and optimized path to parsing and validating a semver. Regex would be much cleaner,
            but is too slow.
            </summary>
            <param name="value">The value to be parsed.</param>
            <returns>
            The version, release labels and metadata.
            </returns>
        </member>
        <member name="T:Kephas.Versioning.VersionComparer">
            <summary>
            An IVersionComparer for NuGetVersion and NuGetVersion types.
            </summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparer.Default">
            <summary>A default comparer that compares metadata as strings.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparer.Version">
            <summary>A comparer that uses only the version numbers.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparer.VersionRelease">
            <summary>Compares versions without comparing the metadata.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparer.VersionReleaseMetadata">
            <summary>A version comparer that follows SemVer 2.0.0 rules.</summary>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.VersionComparer"/> class
            in the default mode.
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.#ctor(Kephas.Versioning.VersionComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.VersionComparer"/> class
            respecting the given comparison mode.
            </summary>
            <param name="versionComparison">The comparison mode.</param>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.Compare(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion,Kephas.Versioning.VersionComparison)">
            <summary>
            Compares the given versions using the <see cref="T:Kephas.Versioning.VersionComparison"/> mode.
            </summary>
            <param name="version1">First semantic version to be compared.</param>
            <param name="version2">Second semantic version to be compared.</param>
            <param name="versionComparison">The comparison mode.</param>
            <returns>
            A negative value if the first version is less than the second version, zero if both versions
            are equal, and a positive value if the first version is greater than the second one.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.Equals(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Determines if both versions are equal.
            </summary>
            <param name="version1">First semantic version to be compared.</param>
            <param name="version2">Second semantic version to be compared.</param>
            <returns>
            True if both versions are equal, false otherwise.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.GetHashCode(Kephas.Versioning.SemanticVersion)">
            <summary>
            Gives a hash code based on the normalized version string.
            </summary>
            <param name="version">The semantic version.</param>
            <returns>
            The hash code of the provided version.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.Compare(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>Compare versions.</summary>
            <param name="version1">First semantic version to be compared.</param>
            <param name="version2">Second semantic version to be compared.</param>
            <returns>
            A negative value if the first version is less than the second version,
            zero if both versions are equal,
            and a positive value if the first version is greater than the second one.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.CompareReleaseLabels(System.String[],System.String[])">
            <summary>Compares sets of release labels.</summary>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.CompareRelease(System.String,System.String)">
            <summary>
            Release labels are compared as numbers if they are numeric, otherwise they will be compared
            as strings.
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.GetReleaseLabelsOrNull(Kephas.Versioning.SemanticVersion)">
            <summary>
            Returns an array of release labels from the version, or null.
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionComparer.AreReleaseLabelsEqual(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>Compare release labels</summary>
        </member>
        <member name="T:Kephas.Versioning.VersionComparison">
            <summary>Version comparison modes.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparison.Default">
            <summary>
            Semantic version 2.0.1-rc comparison.
            </summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparison.Version">
            <summary>Compares only the version numbers.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparison.VersionRelease">
            <summary>
            Include Version number and Release labels in the compare.
            </summary>
        </member>
        <member name="F:Kephas.Versioning.VersionComparison.VersionReleaseMetadata">
            <summary>Include all metadata during the compare.</summary>
        </member>
        <member name="T:Kephas.Versioning.VersionFormatter">
            <summary>Custom formatter for NuGet versions.</summary>
        </member>
        <member name="F:Kephas.Versioning.VersionFormatter.Instance">
            <summary>A static instance of the VersionFormatter class.</summary>
        </member>
        <member name="M:Kephas.Versioning.VersionFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Format a version string.
            </summary>
            <param name="format">A format string containing formatting specifications.</param>
            <param name="arg">An object to format.</param>
            <param name="formatProvider">An object that supplies format information about the current
                                         instance.</param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionFormatter.GetFormat(System.Type)">
            <summary>
            Get version format type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>
            The version format type.
            </returns>
        </member>
        <member name="M:Kephas.Versioning.VersionFormatter.GetNormalizedString(Kephas.Versioning.SemanticVersion)">
            <summary>
            Create a normalized version string. This string is unique for each version 'identity'
            and does not include leading zeros or metadata.
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionFormatter.GetFullString(Kephas.Versioning.SemanticVersion)">
            <summary>
            Create the full version string including metadata. This is primarily for display purposes.
            </summary>
        </member>
        <member name="T:Kephas.Versioning.VersionRange">
            <summary>
            Provides operations with version ranges.
            </summary>
        </member>
        <member name="F:Kephas.Versioning.VersionRange.Separator">
            <summary>
            The version range separator.
            </summary>
        </member>
        <member name="F:Kephas.Versioning.VersionRange.Wildcard">
            <summary>
            The wildcard used for 
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionRange.#ctor(Kephas.Versioning.SemanticVersion,Kephas.Versioning.SemanticVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Kephas.Versioning.VersionRange"/> class.
            </summary>
            <param name="minVersion">The minimum version.</param>
            <param name="maxVersion">The maximum version.</param>
        </member>
        <member name="P:Kephas.Versioning.VersionRange.MinVersion">
            <summary>
            Gets the minimum version.
            </summary>
        </member>
        <member name="P:Kephas.Versioning.VersionRange.MaxVersion">
            <summary>
            Gets the maximum version.
            </summary>
        </member>
        <member name="M:Kephas.Versioning.VersionRange.Parse(System.String)">
            <summary>
            Parses the version range.
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns>The version range.</returns>
        </member>
        <member name="M:Kephas.Versioning.VersionRange.TryParse(System.String,Kephas.Versioning.VersionRange@)">
            <summary>
            Tries to parse the version range.
            </summary>
            <param name="str">The string to be parsed.</param>
            <param name="versionRange">[out] The parsed version range.</param>
            <returns>True if the version could be parsed, false otherwise.</returns>
        </member>
    </members>
</doc>
